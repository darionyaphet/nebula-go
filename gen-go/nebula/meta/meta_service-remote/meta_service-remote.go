// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "github.com/vesoft-inc/nebula-go/gen-go/nebula/meta"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpace(CreateSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSpace(DropSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  GetSpaceResp getSpace(GetSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ListSpacesResp listSpaces(ListSpacesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTag(CreateTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterTag(AlterTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTag(DropTagReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagResp getTag(GetTagReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagsResp listTags(ListTagsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdge(CreateEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterEdge(AlterEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdge(DropEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeResp getEdge(GetEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgesResp listEdges(ListEdgesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addHosts(AddHostsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeHosts(RemoveHostsReq req)")
  fmt.Fprintln(os.Stderr, "  ListHostsResp listHosts(ListHostsReq req)")
  fmt.Fprintln(os.Stderr, "  GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp multiPut(MultiPutReq req)")
  fmt.Fprintln(os.Stderr, "  GetResp get(GetReq req)")
  fmt.Fprintln(os.Stderr, "  MultiGetResp multiGet(MultiGetReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp remove(RemoveReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeRange(RemoveRangeReq req)")
  fmt.Fprintln(os.Stderr, "  ScanResp scan(ScanReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropUser(DropUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterUser(AlterUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp grantRole(GrantRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp revokeRole(RevokeRoleReq req)")
  fmt.Fprintln(os.Stderr, "  GetUserResp getUser(GetUserReq req)")
  fmt.Fprintln(os.Stderr, "  ListUsersResp listUsers(ListUsersReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp listRoles(ListRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp changePassword(ChangePasswordReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp checkPassword(CheckPasswordReq req)")
  fmt.Fprintln(os.Stderr, "  HBResp heartBeat(HBReq req)")
  fmt.Fprintln(os.Stderr, "  BalanceResp balance(BalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp leaderBalance(LeaderBalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp regConfig(RegConfigReq req)")
  fmt.Fprintln(os.Stderr, "  GetConfigResp getConfig(GetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp setConfig(SetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ListConfigsResp listConfigs(ListConfigsReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()

  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }

  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := meta.NewMetaServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }

  switch cmd {
  case "createSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpace requires 1 args")
      flag.Usage()
    }
    arg195 := flag.Arg(1)
    mbTrans196 := thrift.NewMemoryBufferLen(len(arg195))
    defer mbTrans196.Close()
    _, err197 := mbTrans196.WriteString(arg195)
    if err197 != nil {
      Usage()
      return
    }
    factory198 := thrift.NewSimpleJSONProtocolFactory()
    jsProt199 := factory198.GetProtocol(mbTrans196)
    argvalue0 := meta.NewCreateSpaceReq()
    err200 := argvalue0.Read(jsProt199)
    if err200 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpace(value0))
    fmt.Print("\n")
    break
  case "dropSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSpace requires 1 args")
      flag.Usage()
    }
    arg201 := flag.Arg(1)
    mbTrans202 := thrift.NewMemoryBufferLen(len(arg201))
    defer mbTrans202.Close()
    _, err203 := mbTrans202.WriteString(arg201)
    if err203 != nil {
      Usage()
      return
    }
    factory204 := thrift.NewSimpleJSONProtocolFactory()
    jsProt205 := factory204.GetProtocol(mbTrans202)
    argvalue0 := meta.NewDropSpaceReq()
    err206 := argvalue0.Read(jsProt205)
    if err206 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSpace(value0))
    fmt.Print("\n")
    break
  case "getSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSpace requires 1 args")
      flag.Usage()
    }
    arg207 := flag.Arg(1)
    mbTrans208 := thrift.NewMemoryBufferLen(len(arg207))
    defer mbTrans208.Close()
    _, err209 := mbTrans208.WriteString(arg207)
    if err209 != nil {
      Usage()
      return
    }
    factory210 := thrift.NewSimpleJSONProtocolFactory()
    jsProt211 := factory210.GetProtocol(mbTrans208)
    argvalue0 := meta.NewGetSpaceReq()
    err212 := argvalue0.Read(jsProt211)
    if err212 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSpace(value0))
    fmt.Print("\n")
    break
  case "listSpaces":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSpaces requires 1 args")
      flag.Usage()
    }
    arg213 := flag.Arg(1)
    mbTrans214 := thrift.NewMemoryBufferLen(len(arg213))
    defer mbTrans214.Close()
    _, err215 := mbTrans214.WriteString(arg213)
    if err215 != nil {
      Usage()
      return
    }
    factory216 := thrift.NewSimpleJSONProtocolFactory()
    jsProt217 := factory216.GetProtocol(mbTrans214)
    argvalue0 := meta.NewListSpacesReq()
    err218 := argvalue0.Read(jsProt217)
    if err218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSpaces(value0))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 1 args")
      flag.Usage()
    }
    arg219 := flag.Arg(1)
    mbTrans220 := thrift.NewMemoryBufferLen(len(arg219))
    defer mbTrans220.Close()
    _, err221 := mbTrans220.WriteString(arg219)
    if err221 != nil {
      Usage()
      return
    }
    factory222 := thrift.NewSimpleJSONProtocolFactory()
    jsProt223 := factory222.GetProtocol(mbTrans220)
    argvalue0 := meta.NewCreateTagReq()
    err224 := argvalue0.Read(jsProt223)
    if err224 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTag(value0))
    fmt.Print("\n")
    break
  case "alterTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTag requires 1 args")
      flag.Usage()
    }
    arg225 := flag.Arg(1)
    mbTrans226 := thrift.NewMemoryBufferLen(len(arg225))
    defer mbTrans226.Close()
    _, err227 := mbTrans226.WriteString(arg225)
    if err227 != nil {
      Usage()
      return
    }
    factory228 := thrift.NewSimpleJSONProtocolFactory()
    jsProt229 := factory228.GetProtocol(mbTrans226)
    argvalue0 := meta.NewAlterTagReq()
    err230 := argvalue0.Read(jsProt229)
    if err230 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTag(value0))
    fmt.Print("\n")
    break
  case "dropTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTag requires 1 args")
      flag.Usage()
    }
    arg231 := flag.Arg(1)
    mbTrans232 := thrift.NewMemoryBufferLen(len(arg231))
    defer mbTrans232.Close()
    _, err233 := mbTrans232.WriteString(arg231)
    if err233 != nil {
      Usage()
      return
    }
    factory234 := thrift.NewSimpleJSONProtocolFactory()
    jsProt235 := factory234.GetProtocol(mbTrans232)
    argvalue0 := meta.NewDropTagReq()
    err236 := argvalue0.Read(jsProt235)
    if err236 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTag(value0))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTag requires 1 args")
      flag.Usage()
    }
    arg237 := flag.Arg(1)
    mbTrans238 := thrift.NewMemoryBufferLen(len(arg237))
    defer mbTrans238.Close()
    _, err239 := mbTrans238.WriteString(arg237)
    if err239 != nil {
      Usage()
      return
    }
    factory240 := thrift.NewSimpleJSONProtocolFactory()
    jsProt241 := factory240.GetProtocol(mbTrans238)
    argvalue0 := meta.NewGetTagReq()
    err242 := argvalue0.Read(jsProt241)
    if err242 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTag(value0))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    arg243 := flag.Arg(1)
    mbTrans244 := thrift.NewMemoryBufferLen(len(arg243))
    defer mbTrans244.Close()
    _, err245 := mbTrans244.WriteString(arg243)
    if err245 != nil {
      Usage()
      return
    }
    factory246 := thrift.NewSimpleJSONProtocolFactory()
    jsProt247 := factory246.GetProtocol(mbTrans244)
    argvalue0 := meta.NewListTagsReq()
    err248 := argvalue0.Read(jsProt247)
    if err248 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTags(value0))
    fmt.Print("\n")
    break
  case "createEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
      flag.Usage()
    }
    arg249 := flag.Arg(1)
    mbTrans250 := thrift.NewMemoryBufferLen(len(arg249))
    defer mbTrans250.Close()
    _, err251 := mbTrans250.WriteString(arg249)
    if err251 != nil {
      Usage()
      return
    }
    factory252 := thrift.NewSimpleJSONProtocolFactory()
    jsProt253 := factory252.GetProtocol(mbTrans250)
    argvalue0 := meta.NewCreateEdgeReq()
    err254 := argvalue0.Read(jsProt253)
    if err254 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdge(value0))
    fmt.Print("\n")
    break
  case "alterEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterEdge requires 1 args")
      flag.Usage()
    }
    arg255 := flag.Arg(1)
    mbTrans256 := thrift.NewMemoryBufferLen(len(arg255))
    defer mbTrans256.Close()
    _, err257 := mbTrans256.WriteString(arg255)
    if err257 != nil {
      Usage()
      return
    }
    factory258 := thrift.NewSimpleJSONProtocolFactory()
    jsProt259 := factory258.GetProtocol(mbTrans256)
    argvalue0 := meta.NewAlterEdgeReq()
    err260 := argvalue0.Read(jsProt259)
    if err260 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterEdge(value0))
    fmt.Print("\n")
    break
  case "dropEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdge requires 1 args")
      flag.Usage()
    }
    arg261 := flag.Arg(1)
    mbTrans262 := thrift.NewMemoryBufferLen(len(arg261))
    defer mbTrans262.Close()
    _, err263 := mbTrans262.WriteString(arg261)
    if err263 != nil {
      Usage()
      return
    }
    factory264 := thrift.NewSimpleJSONProtocolFactory()
    jsProt265 := factory264.GetProtocol(mbTrans262)
    argvalue0 := meta.NewDropEdgeReq()
    err266 := argvalue0.Read(jsProt265)
    if err266 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdge(value0))
    fmt.Print("\n")
    break
  case "getEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdge requires 1 args")
      flag.Usage()
    }
    arg267 := flag.Arg(1)
    mbTrans268 := thrift.NewMemoryBufferLen(len(arg267))
    defer mbTrans268.Close()
    _, err269 := mbTrans268.WriteString(arg267)
    if err269 != nil {
      Usage()
      return
    }
    factory270 := thrift.NewSimpleJSONProtocolFactory()
    jsProt271 := factory270.GetProtocol(mbTrans268)
    argvalue0 := meta.NewGetEdgeReq()
    err272 := argvalue0.Read(jsProt271)
    if err272 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdge(value0))
    fmt.Print("\n")
    break
  case "listEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdges requires 1 args")
      flag.Usage()
    }
    arg273 := flag.Arg(1)
    mbTrans274 := thrift.NewMemoryBufferLen(len(arg273))
    defer mbTrans274.Close()
    _, err275 := mbTrans274.WriteString(arg273)
    if err275 != nil {
      Usage()
      return
    }
    factory276 := thrift.NewSimpleJSONProtocolFactory()
    jsProt277 := factory276.GetProtocol(mbTrans274)
    argvalue0 := meta.NewListEdgesReq()
    err278 := argvalue0.Read(jsProt277)
    if err278 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdges(value0))
    fmt.Print("\n")
    break
  case "addHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddHosts requires 1 args")
      flag.Usage()
    }
    arg279 := flag.Arg(1)
    mbTrans280 := thrift.NewMemoryBufferLen(len(arg279))
    defer mbTrans280.Close()
    _, err281 := mbTrans280.WriteString(arg279)
    if err281 != nil {
      Usage()
      return
    }
    factory282 := thrift.NewSimpleJSONProtocolFactory()
    jsProt283 := factory282.GetProtocol(mbTrans280)
    argvalue0 := meta.NewAddHostsReq()
    err284 := argvalue0.Read(jsProt283)
    if err284 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddHosts(value0))
    fmt.Print("\n")
    break
  case "removeHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveHosts requires 1 args")
      flag.Usage()
    }
    arg285 := flag.Arg(1)
    mbTrans286 := thrift.NewMemoryBufferLen(len(arg285))
    defer mbTrans286.Close()
    _, err287 := mbTrans286.WriteString(arg285)
    if err287 != nil {
      Usage()
      return
    }
    factory288 := thrift.NewSimpleJSONProtocolFactory()
    jsProt289 := factory288.GetProtocol(mbTrans286)
    argvalue0 := meta.NewRemoveHostsReq()
    err290 := argvalue0.Read(jsProt289)
    if err290 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveHosts(value0))
    fmt.Print("\n")
    break
  case "listHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListHosts requires 1 args")
      flag.Usage()
    }
    arg291 := flag.Arg(1)
    mbTrans292 := thrift.NewMemoryBufferLen(len(arg291))
    defer mbTrans292.Close()
    _, err293 := mbTrans292.WriteString(arg291)
    if err293 != nil {
      Usage()
      return
    }
    factory294 := thrift.NewSimpleJSONProtocolFactory()
    jsProt295 := factory294.GetProtocol(mbTrans292)
    argvalue0 := meta.NewListHostsReq()
    err296 := argvalue0.Read(jsProt295)
    if err296 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListHosts(value0))
    fmt.Print("\n")
    break
  case "getPartsAlloc":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartsAlloc requires 1 args")
      flag.Usage()
    }
    arg297 := flag.Arg(1)
    mbTrans298 := thrift.NewMemoryBufferLen(len(arg297))
    defer mbTrans298.Close()
    _, err299 := mbTrans298.WriteString(arg297)
    if err299 != nil {
      Usage()
      return
    }
    factory300 := thrift.NewSimpleJSONProtocolFactory()
    jsProt301 := factory300.GetProtocol(mbTrans298)
    argvalue0 := meta.NewGetPartsAllocReq()
    err302 := argvalue0.Read(jsProt301)
    if err302 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartsAlloc(value0))
    fmt.Print("\n")
    break
  case "multiPut":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 1 args")
      flag.Usage()
    }
    arg303 := flag.Arg(1)
    mbTrans304 := thrift.NewMemoryBufferLen(len(arg303))
    defer mbTrans304.Close()
    _, err305 := mbTrans304.WriteString(arg303)
    if err305 != nil {
      Usage()
      return
    }
    factory306 := thrift.NewSimpleJSONProtocolFactory()
    jsProt307 := factory306.GetProtocol(mbTrans304)
    argvalue0 := meta.NewMultiPutReq()
    err308 := argvalue0.Read(jsProt307)
    if err308 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiPut(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg309 := flag.Arg(1)
    mbTrans310 := thrift.NewMemoryBufferLen(len(arg309))
    defer mbTrans310.Close()
    _, err311 := mbTrans310.WriteString(arg309)
    if err311 != nil {
      Usage()
      return
    }
    factory312 := thrift.NewSimpleJSONProtocolFactory()
    jsProt313 := factory312.GetProtocol(mbTrans310)
    argvalue0 := meta.NewGetReq()
    err314 := argvalue0.Read(jsProt313)
    if err314 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "multiGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGet requires 1 args")
      flag.Usage()
    }
    arg315 := flag.Arg(1)
    mbTrans316 := thrift.NewMemoryBufferLen(len(arg315))
    defer mbTrans316.Close()
    _, err317 := mbTrans316.WriteString(arg315)
    if err317 != nil {
      Usage()
      return
    }
    factory318 := thrift.NewSimpleJSONProtocolFactory()
    jsProt319 := factory318.GetProtocol(mbTrans316)
    argvalue0 := meta.NewMultiGetReq()
    err320 := argvalue0.Read(jsProt319)
    if err320 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGet(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg321 := flag.Arg(1)
    mbTrans322 := thrift.NewMemoryBufferLen(len(arg321))
    defer mbTrans322.Close()
    _, err323 := mbTrans322.WriteString(arg321)
    if err323 != nil {
      Usage()
      return
    }
    factory324 := thrift.NewSimpleJSONProtocolFactory()
    jsProt325 := factory324.GetProtocol(mbTrans322)
    argvalue0 := meta.NewRemoveReq()
    err326 := argvalue0.Read(jsProt325)
    if err326 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg327 := flag.Arg(1)
    mbTrans328 := thrift.NewMemoryBufferLen(len(arg327))
    defer mbTrans328.Close()
    _, err329 := mbTrans328.WriteString(arg327)
    if err329 != nil {
      Usage()
      return
    }
    factory330 := thrift.NewSimpleJSONProtocolFactory()
    jsProt331 := factory330.GetProtocol(mbTrans328)
    argvalue0 := meta.NewRemoveRangeReq()
    err332 := argvalue0.Read(jsProt331)
    if err332 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg333 := flag.Arg(1)
    mbTrans334 := thrift.NewMemoryBufferLen(len(arg333))
    defer mbTrans334.Close()
    _, err335 := mbTrans334.WriteString(arg333)
    if err335 != nil {
      Usage()
      return
    }
    factory336 := thrift.NewSimpleJSONProtocolFactory()
    jsProt337 := factory336.GetProtocol(mbTrans334)
    argvalue0 := meta.NewScanReq()
    err338 := argvalue0.Read(jsProt337)
    if err338 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(value0))
    fmt.Print("\n")
    break
  case "createUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg339 := flag.Arg(1)
    mbTrans340 := thrift.NewMemoryBufferLen(len(arg339))
    defer mbTrans340.Close()
    _, err341 := mbTrans340.WriteString(arg339)
    if err341 != nil {
      Usage()
      return
    }
    factory342 := thrift.NewSimpleJSONProtocolFactory()
    jsProt343 := factory342.GetProtocol(mbTrans340)
    argvalue0 := meta.NewCreateUserReq()
    err344 := argvalue0.Read(jsProt343)
    if err344 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(value0))
    fmt.Print("\n")
    break
  case "dropUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropUser requires 1 args")
      flag.Usage()
    }
    arg345 := flag.Arg(1)
    mbTrans346 := thrift.NewMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil {
      Usage()
      return
    }
    factory348 := thrift.NewSimpleJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    argvalue0 := meta.NewDropUserReq()
    err350 := argvalue0.Read(jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropUser(value0))
    fmt.Print("\n")
    break
  case "alterUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterUser requires 1 args")
      flag.Usage()
    }
    arg351 := flag.Arg(1)
    mbTrans352 := thrift.NewMemoryBufferLen(len(arg351))
    defer mbTrans352.Close()
    _, err353 := mbTrans352.WriteString(arg351)
    if err353 != nil {
      Usage()
      return
    }
    factory354 := thrift.NewSimpleJSONProtocolFactory()
    jsProt355 := factory354.GetProtocol(mbTrans352)
    argvalue0 := meta.NewAlterUserReq()
    err356 := argvalue0.Read(jsProt355)
    if err356 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterUser(value0))
    fmt.Print("\n")
    break
  case "grantRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 1 args")
      flag.Usage()
    }
    arg357 := flag.Arg(1)
    mbTrans358 := thrift.NewMemoryBufferLen(len(arg357))
    defer mbTrans358.Close()
    _, err359 := mbTrans358.WriteString(arg357)
    if err359 != nil {
      Usage()
      return
    }
    factory360 := thrift.NewSimpleJSONProtocolFactory()
    jsProt361 := factory360.GetProtocol(mbTrans358)
    argvalue0 := meta.NewGrantRoleReq()
    err362 := argvalue0.Read(jsProt361)
    if err362 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRole(value0))
    fmt.Print("\n")
    break
  case "revokeRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 1 args")
      flag.Usage()
    }
    arg363 := flag.Arg(1)
    mbTrans364 := thrift.NewMemoryBufferLen(len(arg363))
    defer mbTrans364.Close()
    _, err365 := mbTrans364.WriteString(arg363)
    if err365 != nil {
      Usage()
      return
    }
    factory366 := thrift.NewSimpleJSONProtocolFactory()
    jsProt367 := factory366.GetProtocol(mbTrans364)
    argvalue0 := meta.NewRevokeRoleReq()
    err368 := argvalue0.Read(jsProt367)
    if err368 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokeRole(value0))
    fmt.Print("\n")
    break
  case "getUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUser requires 1 args")
      flag.Usage()
    }
    arg369 := flag.Arg(1)
    mbTrans370 := thrift.NewMemoryBufferLen(len(arg369))
    defer mbTrans370.Close()
    _, err371 := mbTrans370.WriteString(arg369)
    if err371 != nil {
      Usage()
      return
    }
    factory372 := thrift.NewSimpleJSONProtocolFactory()
    jsProt373 := factory372.GetProtocol(mbTrans370)
    argvalue0 := meta.NewGetUserReq()
    err374 := argvalue0.Read(jsProt373)
    if err374 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUser(value0))
    fmt.Print("\n")
    break
  case "listUsers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListUsers requires 1 args")
      flag.Usage()
    }
    arg375 := flag.Arg(1)
    mbTrans376 := thrift.NewMemoryBufferLen(len(arg375))
    defer mbTrans376.Close()
    _, err377 := mbTrans376.WriteString(arg375)
    if err377 != nil {
      Usage()
      return
    }
    factory378 := thrift.NewSimpleJSONProtocolFactory()
    jsProt379 := factory378.GetProtocol(mbTrans376)
    argvalue0 := meta.NewListUsersReq()
    err380 := argvalue0.Read(jsProt379)
    if err380 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListUsers(value0))
    fmt.Print("\n")
    break
  case "listRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 1 args")
      flag.Usage()
    }
    arg381 := flag.Arg(1)
    mbTrans382 := thrift.NewMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil {
      Usage()
      return
    }
    factory384 := thrift.NewSimpleJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    argvalue0 := meta.NewListRolesReq()
    err386 := argvalue0.Read(jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListRoles(value0))
    fmt.Print("\n")
    break
  case "changePassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ChangePassword requires 1 args")
      flag.Usage()
    }
    arg387 := flag.Arg(1)
    mbTrans388 := thrift.NewMemoryBufferLen(len(arg387))
    defer mbTrans388.Close()
    _, err389 := mbTrans388.WriteString(arg387)
    if err389 != nil {
      Usage()
      return
    }
    factory390 := thrift.NewSimpleJSONProtocolFactory()
    jsProt391 := factory390.GetProtocol(mbTrans388)
    argvalue0 := meta.NewChangePasswordReq()
    err392 := argvalue0.Read(jsProt391)
    if err392 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ChangePassword(value0))
    fmt.Print("\n")
    break
  case "checkPassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckPassword requires 1 args")
      flag.Usage()
    }
    arg393 := flag.Arg(1)
    mbTrans394 := thrift.NewMemoryBufferLen(len(arg393))
    defer mbTrans394.Close()
    _, err395 := mbTrans394.WriteString(arg393)
    if err395 != nil {
      Usage()
      return
    }
    factory396 := thrift.NewSimpleJSONProtocolFactory()
    jsProt397 := factory396.GetProtocol(mbTrans394)
    argvalue0 := meta.NewCheckPasswordReq()
    err398 := argvalue0.Read(jsProt397)
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckPassword(value0))
    fmt.Print("\n")
    break
  case "heartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg399 := flag.Arg(1)
    mbTrans400 := thrift.NewMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewSimpleJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue0 := meta.NewHBReq()
    err404 := argvalue0.Read(jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(value0))
    fmt.Print("\n")
    break
  case "balance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Balance requires 1 args")
      flag.Usage()
    }
    arg405 := flag.Arg(1)
    mbTrans406 := thrift.NewMemoryBufferLen(len(arg405))
    defer mbTrans406.Close()
    _, err407 := mbTrans406.WriteString(arg405)
    if err407 != nil {
      Usage()
      return
    }
    factory408 := thrift.NewSimpleJSONProtocolFactory()
    jsProt409 := factory408.GetProtocol(mbTrans406)
    argvalue0 := meta.NewBalanceReq()
    err410 := argvalue0.Read(jsProt409)
    if err410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Balance(value0))
    fmt.Print("\n")
    break
  case "leaderBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LeaderBalance requires 1 args")
      flag.Usage()
    }
    arg411 := flag.Arg(1)
    mbTrans412 := thrift.NewMemoryBufferLen(len(arg411))
    defer mbTrans412.Close()
    _, err413 := mbTrans412.WriteString(arg411)
    if err413 != nil {
      Usage()
      return
    }
    factory414 := thrift.NewSimpleJSONProtocolFactory()
    jsProt415 := factory414.GetProtocol(mbTrans412)
    argvalue0 := meta.NewLeaderBalanceReq()
    err416 := argvalue0.Read(jsProt415)
    if err416 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LeaderBalance(value0))
    fmt.Print("\n")
    break
  case "regConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegConfig requires 1 args")
      flag.Usage()
    }
    arg417 := flag.Arg(1)
    mbTrans418 := thrift.NewMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil {
      Usage()
      return
    }
    factory420 := thrift.NewSimpleJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    argvalue0 := meta.NewRegConfigReq()
    err422 := argvalue0.Read(jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegConfig(value0))
    fmt.Print("\n")
    break
  case "getConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfig requires 1 args")
      flag.Usage()
    }
    arg423 := flag.Arg(1)
    mbTrans424 := thrift.NewMemoryBufferLen(len(arg423))
    defer mbTrans424.Close()
    _, err425 := mbTrans424.WriteString(arg423)
    if err425 != nil {
      Usage()
      return
    }
    factory426 := thrift.NewSimpleJSONProtocolFactory()
    jsProt427 := factory426.GetProtocol(mbTrans424)
    argvalue0 := meta.NewGetConfigReq()
    err428 := argvalue0.Read(jsProt427)
    if err428 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfig(value0))
    fmt.Print("\n")
    break
  case "setConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetConfig requires 1 args")
      flag.Usage()
    }
    arg429 := flag.Arg(1)
    mbTrans430 := thrift.NewMemoryBufferLen(len(arg429))
    defer mbTrans430.Close()
    _, err431 := mbTrans430.WriteString(arg429)
    if err431 != nil {
      Usage()
      return
    }
    factory432 := thrift.NewSimpleJSONProtocolFactory()
    jsProt433 := factory432.GetProtocol(mbTrans430)
    argvalue0 := meta.NewSetConfigReq()
    err434 := argvalue0.Read(jsProt433)
    if err434 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetConfig(value0))
    fmt.Print("\n")
    break
  case "listConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListConfigs requires 1 args")
      flag.Usage()
    }
    arg435 := flag.Arg(1)
    mbTrans436 := thrift.NewMemoryBufferLen(len(arg435))
    defer mbTrans436.Close()
    _, err437 := mbTrans436.WriteString(arg435)
    if err437 != nil {
      Usage()
      return
    }
    factory438 := thrift.NewSimpleJSONProtocolFactory()
    jsProt439 := factory438.GetProtocol(mbTrans436)
    argvalue0 := meta.NewListConfigsReq()
    err440 := argvalue0.Read(jsProt439)
    if err440 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListConfigs(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
