// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/gen-go/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
type MetaService interface {
  // Parameters:
  //  - Req
  CreateSpace(req *CreateSpaceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSpace(req *DropSpaceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetSpace(req *GetSpaceReq) (r *GetSpaceResp, err error)
  // Parameters:
  //  - Req
  ListSpaces(req *ListSpacesReq) (r *ListSpacesResp, err error)
  // Parameters:
  //  - Req
  CreateTag(req *CreateTagReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterTag(req *AlterTagReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTag(req *DropTagReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTag(req *GetTagReq) (r *GetTagResp, err error)
  // Parameters:
  //  - Req
  ListTags(req *ListTagsReq) (r *ListTagsResp, err error)
  // Parameters:
  //  - Req
  CreateEdge(req *CreateEdgeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterEdge(req *AlterEdgeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdge(req *DropEdgeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdge(req *GetEdgeReq) (r *GetEdgeResp, err error)
  // Parameters:
  //  - Req
  ListEdges(req *ListEdgesReq) (r *ListEdgesResp, err error)
  // Parameters:
  //  - Req
  AddHosts(req *AddHostsReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveHosts(req *RemoveHostsReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListHosts(req *ListHostsReq) (r *ListHostsResp, err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(req *GetPartsAllocReq) (r *GetPartsAllocResp, err error)
  // Parameters:
  //  - Req
  MultiPut(req *MultiPutReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  Get(req *GetReq) (r *GetResp, err error)
  // Parameters:
  //  - Req
  MultiGet(req *MultiGetReq) (r *MultiGetResp, err error)
  // Parameters:
  //  - Req
  Remove(req *RemoveReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveRange(req *RemoveRangeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  Scan(req *ScanReq) (r *ScanResp, err error)
  // Parameters:
  //  - Req
  CreateUser(req *CreateUserReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropUser(req *DropUserReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterUser(req *AlterUserReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GrantRole(req *GrantRoleReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RevokeRole(req *RevokeRoleReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetUser(req *GetUserReq) (r *GetUserResp, err error)
  // Parameters:
  //  - Req
  ListUsers(req *ListUsersReq) (r *ListUsersResp, err error)
  // Parameters:
  //  - Req
  ListRoles(req *ListRolesReq) (r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  ChangePassword(req *ChangePasswordReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  CheckPassword(req *CheckPasswordReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(req *HBReq) (r *HBResp, err error)
  // Parameters:
  //  - Req
  Balance(req *BalanceReq) (r *BalanceResp, err error)
  // Parameters:
  //  - Req
  LeaderBalance(req *LeaderBalanceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RegConfig(req *RegConfigReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetConfig(req *GetConfigReq) (r *GetConfigResp, err error)
  // Parameters:
  //  - Req
  SetConfig(req *SetConfigReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListConfigs(req *ListConfigsReq) (r *ListConfigsResp, err error)
}

type MetaServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *MetaServiceClient) Close() error {
  return client.Transport.Close()
}

func NewMetaServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceClient {
  return &MetaServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMetaServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceClient {
  return &MetaServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpace(req *CreateSpaceReq) (r *ExecResp, err error) {
  if err = p.sendCreateSpace(req); err != nil { return }
  return p.recvCreateSpace()
}

func (p *MetaServiceClient) sendCreateSpace(req *CreateSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error29 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error30 error
    error30, err = error29.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error30
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSpace failed: invalid message type")
    return
  }
  result := MetaServiceCreateSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSpace(req *DropSpaceReq) (r *ExecResp, err error) {
  if err = p.sendDropSpace(req); err != nil { return }
  return p.recvDropSpace()
}

func (p *MetaServiceClient) sendDropSpace(req *DropSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error31 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error32 error
    error32, err = error31.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error32
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropSpace failed: invalid message type")
    return
  }
  result := MetaServiceDropSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSpace(req *GetSpaceReq) (r *GetSpaceResp, err error) {
  if err = p.sendGetSpace(req); err != nil { return }
  return p.recvGetSpace()
}

func (p *MetaServiceClient) sendGetSpace(req *GetSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetSpace() (value *GetSpaceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error33 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error34 error
    error34, err = error33.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error34
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSpace failed: invalid message type")
    return
  }
  result := MetaServiceGetSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSpaces(req *ListSpacesReq) (r *ListSpacesResp, err error) {
  if err = p.sendListSpaces(req); err != nil { return }
  return p.recvListSpaces()
}

func (p *MetaServiceClient) sendListSpaces(req *ListSpacesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSpaces", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSpacesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListSpaces() (value *ListSpacesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSpaces" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSpaces failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSpaces failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error35 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error36 error
    error36, err = error35.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error36
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSpaces failed: invalid message type")
    return
  }
  result := MetaServiceListSpacesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTag(req *CreateTagReq) (r *ExecResp, err error) {
  if err = p.sendCreateTag(req); err != nil { return }
  return p.recvCreateTag()
}

func (p *MetaServiceClient) sendCreateTag(req *CreateTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error37 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error38 error
    error38, err = error37.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error38
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTag failed: invalid message type")
    return
  }
  result := MetaServiceCreateTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterTag(req *AlterTagReq) (r *ExecResp, err error) {
  if err = p.sendAlterTag(req); err != nil { return }
  return p.recvAlterTag()
}

func (p *MetaServiceClient) sendAlterTag(req *AlterTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAlterTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error39 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error40 error
    error40, err = error39.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error40
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterTag failed: invalid message type")
    return
  }
  result := MetaServiceAlterTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTag(req *DropTagReq) (r *ExecResp, err error) {
  if err = p.sendDropTag(req); err != nil { return }
  return p.recvDropTag()
}

func (p *MetaServiceClient) sendDropTag(req *DropTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error41 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error42 error
    error42, err = error41.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error42
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropTag failed: invalid message type")
    return
  }
  result := MetaServiceDropTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTag(req *GetTagReq) (r *GetTagResp, err error) {
  if err = p.sendGetTag(req); err != nil { return }
  return p.recvGetTag()
}

func (p *MetaServiceClient) sendGetTag(req *GetTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetTag() (value *GetTagResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error43 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error44 error
    error44, err = error43.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error44
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTag failed: invalid message type")
    return
  }
  result := MetaServiceGetTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTags(req *ListTagsReq) (r *ListTagsResp, err error) {
  if err = p.sendListTags(req); err != nil { return }
  return p.recvListTags()
}

func (p *MetaServiceClient) sendListTags(req *ListTagsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTags", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListTags() (value *ListTagsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTags" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTags failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTags failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error45 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error46 error
    error46, err = error45.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error46
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTags failed: invalid message type")
    return
  }
  result := MetaServiceListTagsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdge(req *CreateEdgeReq) (r *ExecResp, err error) {
  if err = p.sendCreateEdge(req); err != nil { return }
  return p.recvCreateEdge()
}

func (p *MetaServiceClient) sendCreateEdge(req *CreateEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error47 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error48 error
    error48, err = error47.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error48
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createEdge failed: invalid message type")
    return
  }
  result := MetaServiceCreateEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterEdge(req *AlterEdgeReq) (r *ExecResp, err error) {
  if err = p.sendAlterEdge(req); err != nil { return }
  return p.recvAlterEdge()
}

func (p *MetaServiceClient) sendAlterEdge(req *AlterEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAlterEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error49 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error50 error
    error50, err = error49.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error50
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterEdge failed: invalid message type")
    return
  }
  result := MetaServiceAlterEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdge(req *DropEdgeReq) (r *ExecResp, err error) {
  if err = p.sendDropEdge(req); err != nil { return }
  return p.recvDropEdge()
}

func (p *MetaServiceClient) sendDropEdge(req *DropEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error51 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error52 error
    error52, err = error51.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error52
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropEdge failed: invalid message type")
    return
  }
  result := MetaServiceDropEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdge(req *GetEdgeReq) (r *GetEdgeResp, err error) {
  if err = p.sendGetEdge(req); err != nil { return }
  return p.recvGetEdge()
}

func (p *MetaServiceClient) sendGetEdge(req *GetEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetEdge() (value *GetEdgeResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error53 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error54 error
    error54, err = error53.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error54
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdge failed: invalid message type")
    return
  }
  result := MetaServiceGetEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdges(req *ListEdgesReq) (r *ListEdgesResp, err error) {
  if err = p.sendListEdges(req); err != nil { return }
  return p.recvListEdges()
}

func (p *MetaServiceClient) sendListEdges(req *ListEdgesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdges", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListEdges() (value *ListEdgesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdges" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdges failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdges failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error55 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error56 error
    error56, err = error55.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error56
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdges failed: invalid message type")
    return
  }
  result := MetaServiceListEdgesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHosts(req *AddHostsReq) (r *ExecResp, err error) {
  if err = p.sendAddHosts(req); err != nil { return }
  return p.recvAddHosts()
}

func (p *MetaServiceClient) sendAddHosts(req *AddHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAddHosts() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error57 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error58 error
    error58, err = error57.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error58
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHosts failed: invalid message type")
    return
  }
  result := MetaServiceAddHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveHosts(req *RemoveHostsReq) (r *ExecResp, err error) {
  if err = p.sendRemoveHosts(req); err != nil { return }
  return p.recvRemoveHosts()
}

func (p *MetaServiceClient) sendRemoveHosts(req *RemoveHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemoveHosts() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error59 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error60 error
    error60, err = error59.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error60
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeHosts failed: invalid message type")
    return
  }
  result := MetaServiceRemoveHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListHosts(req *ListHostsReq) (r *ListHostsResp, err error) {
  if err = p.sendListHosts(req); err != nil { return }
  return p.recvListHosts()
}

func (p *MetaServiceClient) sendListHosts(req *ListHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListHosts() (value *ListHostsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error61 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error62 error
    error62, err = error61.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error62
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listHosts failed: invalid message type")
    return
  }
  result := MetaServiceListHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetPartsAlloc(req *GetPartsAllocReq) (r *GetPartsAllocResp, err error) {
  if err = p.sendGetPartsAlloc(req); err != nil { return }
  return p.recvGetPartsAlloc()
}

func (p *MetaServiceClient) sendGetPartsAlloc(req *GetPartsAllocReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getPartsAlloc", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetPartsAllocArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getPartsAlloc" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getPartsAlloc failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getPartsAlloc failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error63 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error64 error
    error64, err = error63.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error64
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPartsAlloc failed: invalid message type")
    return
  }
  result := MetaServiceGetPartsAllocResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MultiPut(req *MultiPutReq) (r *ExecResp, err error) {
  if err = p.sendMultiPut(req); err != nil { return }
  return p.recvMultiPut()
}

func (p *MetaServiceClient) sendMultiPut(req *MultiPutReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiPut", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiPutArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvMultiPut() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiPut" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiPut failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiPut failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error65 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error66 error
    error66, err = error65.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error66
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPut failed: invalid message type")
    return
  }
  result := MetaServiceMultiPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Get(req *GetReq) (r *GetResp, err error) {
  if err = p.sendGet(req); err != nil { return }
  return p.recvGet()
}

func (p *MetaServiceClient) sendGet(req *GetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGet() (value *GetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error67 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error68 error
    error68, err = error67.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error68
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := MetaServiceGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MultiGet(req *MultiGetReq) (r *MultiGetResp, err error) {
  if err = p.sendMultiGet(req); err != nil { return }
  return p.recvMultiGet()
}

func (p *MetaServiceClient) sendMultiGet(req *MultiGetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiGet", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvMultiGet() (value *MultiGetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiGet" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiGet failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiGet failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error69 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error70 error
    error70, err = error69.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error70
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiGet failed: invalid message type")
    return
  }
  result := MetaServiceMultiGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Remove(req *RemoveReq) (r *ExecResp, err error) {
  if err = p.sendRemove(req); err != nil { return }
  return p.recvRemove()
}

func (p *MetaServiceClient) sendRemove(req *RemoveReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemove() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "remove" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error71 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error72 error
    error72, err = error71.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error72
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
    return
  }
  result := MetaServiceRemoveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveRange(req *RemoveRangeReq) (r *ExecResp, err error) {
  if err = p.sendRemoveRange(req); err != nil { return }
  return p.recvRemoveRange()
}

func (p *MetaServiceClient) sendRemoveRange(req *RemoveRangeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeRange", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveRangeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemoveRange() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeRange" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeRange failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeRange failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error73 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error74 error
    error74, err = error73.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error74
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeRange failed: invalid message type")
    return
  }
  result := MetaServiceRemoveRangeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Scan(req *ScanReq) (r *ScanResp, err error) {
  if err = p.sendScan(req); err != nil { return }
  return p.recvScan()
}

func (p *MetaServiceClient) sendScan(req *ScanReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("scan", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceScanArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvScan() (value *ScanResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "scan" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "scan failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "scan failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error75 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error76 error
    error76, err = error75.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error76
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scan failed: invalid message type")
    return
  }
  result := MetaServiceScanResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateUser(req *CreateUserReq) (r *ExecResp, err error) {
  if err = p.sendCreateUser(req); err != nil { return }
  return p.recvCreateUser()
}

func (p *MetaServiceClient) sendCreateUser(req *CreateUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error77 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error78 error
    error78, err = error77.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error78
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createUser failed: invalid message type")
    return
  }
  result := MetaServiceCreateUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropUser(req *DropUserReq) (r *ExecResp, err error) {
  if err = p.sendDropUser(req); err != nil { return }
  return p.recvDropUser()
}

func (p *MetaServiceClient) sendDropUser(req *DropUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error79 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error80 error
    error80, err = error79.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error80
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropUser failed: invalid message type")
    return
  }
  result := MetaServiceDropUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterUser(req *AlterUserReq) (r *ExecResp, err error) {
  if err = p.sendAlterUser(req); err != nil { return }
  return p.recvAlterUser()
}

func (p *MetaServiceClient) sendAlterUser(req *AlterUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAlterUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error81 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error82 error
    error82, err = error81.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error82
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterUser failed: invalid message type")
    return
  }
  result := MetaServiceAlterUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GrantRole(req *GrantRoleReq) (r *ExecResp, err error) {
  if err = p.sendGrantRole(req); err != nil { return }
  return p.recvGrantRole()
}

func (p *MetaServiceClient) sendGrantRole(req *GrantRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("grantRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGrantRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGrantRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "grantRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "grantRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "grantRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error83 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error84 error
    error84, err = error83.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error84
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grantRole failed: invalid message type")
    return
  }
  result := MetaServiceGrantRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RevokeRole(req *RevokeRoleReq) (r *ExecResp, err error) {
  if err = p.sendRevokeRole(req); err != nil { return }
  return p.recvRevokeRole()
}

func (p *MetaServiceClient) sendRevokeRole(req *RevokeRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("revokeRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRevokeRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRevokeRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "revokeRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "revokeRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "revokeRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error85 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error86 error
    error86, err = error85.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error86
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeRole failed: invalid message type")
    return
  }
  result := MetaServiceRevokeRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetUser(req *GetUserReq) (r *GetUserResp, err error) {
  if err = p.sendGetUser(req); err != nil { return }
  return p.recvGetUser()
}

func (p *MetaServiceClient) sendGetUser(req *GetUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetUser() (value *GetUserResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error87 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error88 error
    error88, err = error87.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error88
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUser failed: invalid message type")
    return
  }
  result := MetaServiceGetUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListUsers(req *ListUsersReq) (r *ListUsersResp, err error) {
  if err = p.sendListUsers(req); err != nil { return }
  return p.recvListUsers()
}

func (p *MetaServiceClient) sendListUsers(req *ListUsersReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListUsersArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListUsers() (value *ListUsersResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listUsers" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error89 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error90 error
    error90, err = error89.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error90
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listUsers failed: invalid message type")
    return
  }
  result := MetaServiceListUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListRoles(req *ListRolesReq) (r *ListRolesResp, err error) {
  if err = p.sendListRoles(req); err != nil { return }
  return p.recvListRoles()
}

func (p *MetaServiceClient) sendListRoles(req *ListRolesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listRoles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListRolesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListRoles() (value *ListRolesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listRoles" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listRoles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listRoles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error91 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error92 error
    error92, err = error91.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error92
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listRoles failed: invalid message type")
    return
  }
  result := MetaServiceListRolesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ChangePassword(req *ChangePasswordReq) (r *ExecResp, err error) {
  if err = p.sendChangePassword(req); err != nil { return }
  return p.recvChangePassword()
}

func (p *MetaServiceClient) sendChangePassword(req *ChangePasswordReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changePassword", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceChangePasswordArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvChangePassword() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changePassword" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "changePassword failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "changePassword failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error93 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error94 error
    error94, err = error93.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error94
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changePassword failed: invalid message type")
    return
  }
  result := MetaServiceChangePasswordResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CheckPassword(req *CheckPasswordReq) (r *ExecResp, err error) {
  if err = p.sendCheckPassword(req); err != nil { return }
  return p.recvCheckPassword()
}

func (p *MetaServiceClient) sendCheckPassword(req *CheckPasswordReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("checkPassword", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCheckPasswordArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCheckPassword() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "checkPassword" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "checkPassword failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "checkPassword failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error95 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error96 error
    error96, err = error95.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error96
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkPassword failed: invalid message type")
    return
  }
  result := MetaServiceCheckPasswordResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) HeartBeat(req *HBReq) (r *HBResp, err error) {
  if err = p.sendHeartBeat(req); err != nil { return }
  return p.recvHeartBeat()
}

func (p *MetaServiceClient) sendHeartBeat(req *HBReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("heartBeat", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceHeartBeatArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvHeartBeat() (value *HBResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "heartBeat" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "heartBeat failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "heartBeat failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error97 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error98 error
    error98, err = error97.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error98
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartBeat failed: invalid message type")
    return
  }
  result := MetaServiceHeartBeatResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Balance(req *BalanceReq) (r *BalanceResp, err error) {
  if err = p.sendBalance(req); err != nil { return }
  return p.recvBalance()
}

func (p *MetaServiceClient) sendBalance(req *BalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("balance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvBalance() (value *BalanceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "balance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "balance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "balance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error99 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error100 error
    error100, err = error99.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error100
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "balance failed: invalid message type")
    return
  }
  result := MetaServiceBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) LeaderBalance(req *LeaderBalanceReq) (r *ExecResp, err error) {
  if err = p.sendLeaderBalance(req); err != nil { return }
  return p.recvLeaderBalance()
}

func (p *MetaServiceClient) sendLeaderBalance(req *LeaderBalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("leaderBalance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceLeaderBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvLeaderBalance() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "leaderBalance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "leaderBalance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "leaderBalance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error101 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error102 error
    error102, err = error101.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error102
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "leaderBalance failed: invalid message type")
    return
  }
  result := MetaServiceLeaderBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RegConfig(req *RegConfigReq) (r *ExecResp, err error) {
  if err = p.sendRegConfig(req); err != nil { return }
  return p.recvRegConfig()
}

func (p *MetaServiceClient) sendRegConfig(req *RegConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("regConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRegConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRegConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "regConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "regConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "regConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error103 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error104 error
    error104, err = error103.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error104
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "regConfig failed: invalid message type")
    return
  }
  result := MetaServiceRegConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetConfig(req *GetConfigReq) (r *GetConfigResp, err error) {
  if err = p.sendGetConfig(req); err != nil { return }
  return p.recvGetConfig()
}

func (p *MetaServiceClient) sendGetConfig(req *GetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetConfig() (value *GetConfigResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error105 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error106 error
    error106, err = error105.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error106
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConfig failed: invalid message type")
    return
  }
  result := MetaServiceGetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SetConfig(req *SetConfigReq) (r *ExecResp, err error) {
  if err = p.sendSetConfig(req); err != nil { return }
  return p.recvSetConfig()
}

func (p *MetaServiceClient) sendSetConfig(req *SetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvSetConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "setConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "setConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error107 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error108 error
    error108, err = error107.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error108
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setConfig failed: invalid message type")
    return
  }
  result := MetaServiceSetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListConfigs(req *ListConfigsReq) (r *ListConfigsResp, err error) {
  if err = p.sendListConfigs(req); err != nil { return }
  return p.recvListConfigs()
}

func (p *MetaServiceClient) sendListConfigs(req *ListConfigsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConfigs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListConfigsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListConfigs() (value *ListConfigsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConfigs" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listConfigs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listConfigs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error109 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error110 error
    error110, err = error109.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error110
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConfigs failed: invalid message type")
    return
  }
  result := MetaServiceListConfigsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type MetaServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewMetaServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMetaServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *MetaServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSpace(req *CreateSpaceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateSpace(req); err != nil { return }
  return p.recvCreateSpace()
}

func (p *MetaServiceThreadsafeClient) sendCreateSpace(req *CreateSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error111 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error112 error
    error112, err = error111.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error112
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSpace failed: invalid message type")
    return
  }
  result := MetaServiceCreateSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSpace(req *DropSpaceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropSpace(req); err != nil { return }
  return p.recvDropSpace()
}

func (p *MetaServiceThreadsafeClient) sendDropSpace(req *DropSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error113 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error114 error
    error114, err = error113.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error114
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropSpace failed: invalid message type")
    return
  }
  result := MetaServiceDropSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSpace(req *GetSpaceReq) (r *GetSpaceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetSpace(req); err != nil { return }
  return p.recvGetSpace()
}

func (p *MetaServiceThreadsafeClient) sendGetSpace(req *GetSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetSpace() (value *GetSpaceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error115 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error116 error
    error116, err = error115.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error116
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSpace failed: invalid message type")
    return
  }
  result := MetaServiceGetSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSpaces(req *ListSpacesReq) (r *ListSpacesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListSpaces(req); err != nil { return }
  return p.recvListSpaces()
}

func (p *MetaServiceThreadsafeClient) sendListSpaces(req *ListSpacesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSpaces", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSpacesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListSpaces() (value *ListSpacesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSpaces" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSpaces failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSpaces failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error117 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error118 error
    error118, err = error117.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error118
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSpaces failed: invalid message type")
    return
  }
  result := MetaServiceListSpacesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTag(req *CreateTagReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateTag(req); err != nil { return }
  return p.recvCreateTag()
}

func (p *MetaServiceThreadsafeClient) sendCreateTag(req *CreateTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error119 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error120 error
    error120, err = error119.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error120
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTag failed: invalid message type")
    return
  }
  result := MetaServiceCreateTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterTag(req *AlterTagReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAlterTag(req); err != nil { return }
  return p.recvAlterTag()
}

func (p *MetaServiceThreadsafeClient) sendAlterTag(req *AlterTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAlterTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error121 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error122 error
    error122, err = error121.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error122
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterTag failed: invalid message type")
    return
  }
  result := MetaServiceAlterTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTag(req *DropTagReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropTag(req); err != nil { return }
  return p.recvDropTag()
}

func (p *MetaServiceThreadsafeClient) sendDropTag(req *DropTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error123 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error124 error
    error124, err = error123.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error124
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropTag failed: invalid message type")
    return
  }
  result := MetaServiceDropTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTag(req *GetTagReq) (r *GetTagResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetTag(req); err != nil { return }
  return p.recvGetTag()
}

func (p *MetaServiceThreadsafeClient) sendGetTag(req *GetTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetTag() (value *GetTagResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error125 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error126 error
    error126, err = error125.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error126
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTag failed: invalid message type")
    return
  }
  result := MetaServiceGetTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTags(req *ListTagsReq) (r *ListTagsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListTags(req); err != nil { return }
  return p.recvListTags()
}

func (p *MetaServiceThreadsafeClient) sendListTags(req *ListTagsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTags", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListTags() (value *ListTagsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTags" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTags failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTags failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error127 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error128 error
    error128, err = error127.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error128
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTags failed: invalid message type")
    return
  }
  result := MetaServiceListTagsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdge(req *CreateEdgeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateEdge(req); err != nil { return }
  return p.recvCreateEdge()
}

func (p *MetaServiceThreadsafeClient) sendCreateEdge(req *CreateEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error129 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error130 error
    error130, err = error129.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error130
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createEdge failed: invalid message type")
    return
  }
  result := MetaServiceCreateEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterEdge(req *AlterEdgeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAlterEdge(req); err != nil { return }
  return p.recvAlterEdge()
}

func (p *MetaServiceThreadsafeClient) sendAlterEdge(req *AlterEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAlterEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error131 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error132 error
    error132, err = error131.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error132
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterEdge failed: invalid message type")
    return
  }
  result := MetaServiceAlterEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdge(req *DropEdgeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropEdge(req); err != nil { return }
  return p.recvDropEdge()
}

func (p *MetaServiceThreadsafeClient) sendDropEdge(req *DropEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error133 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error134 error
    error134, err = error133.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error134
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropEdge failed: invalid message type")
    return
  }
  result := MetaServiceDropEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdge(req *GetEdgeReq) (r *GetEdgeResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetEdge(req); err != nil { return }
  return p.recvGetEdge()
}

func (p *MetaServiceThreadsafeClient) sendGetEdge(req *GetEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetEdge() (value *GetEdgeResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error135 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error136 error
    error136, err = error135.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error136
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdge failed: invalid message type")
    return
  }
  result := MetaServiceGetEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdges(req *ListEdgesReq) (r *ListEdgesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListEdges(req); err != nil { return }
  return p.recvListEdges()
}

func (p *MetaServiceThreadsafeClient) sendListEdges(req *ListEdgesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdges", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListEdges() (value *ListEdgesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdges" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdges failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdges failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error137 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error138 error
    error138, err = error137.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error138
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdges failed: invalid message type")
    return
  }
  result := MetaServiceListEdgesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddHosts(req *AddHostsReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddHosts(req); err != nil { return }
  return p.recvAddHosts()
}

func (p *MetaServiceThreadsafeClient) sendAddHosts(req *AddHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAddHosts() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error139 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error140 error
    error140, err = error139.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error140
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHosts failed: invalid message type")
    return
  }
  result := MetaServiceAddHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveHosts(req *RemoveHostsReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemoveHosts(req); err != nil { return }
  return p.recvRemoveHosts()
}

func (p *MetaServiceThreadsafeClient) sendRemoveHosts(req *RemoveHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemoveHosts() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error141 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error142 error
    error142, err = error141.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error142
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeHosts failed: invalid message type")
    return
  }
  result := MetaServiceRemoveHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListHosts(req *ListHostsReq) (r *ListHostsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListHosts(req); err != nil { return }
  return p.recvListHosts()
}

func (p *MetaServiceThreadsafeClient) sendListHosts(req *ListHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListHosts() (value *ListHostsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error143 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error144 error
    error144, err = error143.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error144
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listHosts failed: invalid message type")
    return
  }
  result := MetaServiceListHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetPartsAlloc(req *GetPartsAllocReq) (r *GetPartsAllocResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetPartsAlloc(req); err != nil { return }
  return p.recvGetPartsAlloc()
}

func (p *MetaServiceThreadsafeClient) sendGetPartsAlloc(req *GetPartsAllocReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getPartsAlloc", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetPartsAllocArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getPartsAlloc" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getPartsAlloc failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getPartsAlloc failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error145 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error146 error
    error146, err = error145.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error146
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPartsAlloc failed: invalid message type")
    return
  }
  result := MetaServiceGetPartsAllocResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MultiPut(req *MultiPutReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendMultiPut(req); err != nil { return }
  return p.recvMultiPut()
}

func (p *MetaServiceThreadsafeClient) sendMultiPut(req *MultiPutReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiPut", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiPutArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvMultiPut() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiPut" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiPut failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiPut failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error147 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error148 error
    error148, err = error147.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error148
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPut failed: invalid message type")
    return
  }
  result := MetaServiceMultiPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Get(req *GetReq) (r *GetResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGet(req); err != nil { return }
  return p.recvGet()
}

func (p *MetaServiceThreadsafeClient) sendGet(req *GetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGet() (value *GetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error149 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error150 error
    error150, err = error149.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error150
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := MetaServiceGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MultiGet(req *MultiGetReq) (r *MultiGetResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendMultiGet(req); err != nil { return }
  return p.recvMultiGet()
}

func (p *MetaServiceThreadsafeClient) sendMultiGet(req *MultiGetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiGet", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvMultiGet() (value *MultiGetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiGet" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiGet failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiGet failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error151 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error152 error
    error152, err = error151.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error152
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiGet failed: invalid message type")
    return
  }
  result := MetaServiceMultiGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Remove(req *RemoveReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemove(req); err != nil { return }
  return p.recvRemove()
}

func (p *MetaServiceThreadsafeClient) sendRemove(req *RemoveReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemove() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "remove" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error153 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error154 error
    error154, err = error153.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error154
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
    return
  }
  result := MetaServiceRemoveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveRange(req *RemoveRangeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemoveRange(req); err != nil { return }
  return p.recvRemoveRange()
}

func (p *MetaServiceThreadsafeClient) sendRemoveRange(req *RemoveRangeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeRange", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveRangeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemoveRange() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeRange" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeRange failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeRange failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error155 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error156 error
    error156, err = error155.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error156
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeRange failed: invalid message type")
    return
  }
  result := MetaServiceRemoveRangeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Scan(req *ScanReq) (r *ScanResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendScan(req); err != nil { return }
  return p.recvScan()
}

func (p *MetaServiceThreadsafeClient) sendScan(req *ScanReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("scan", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceScanArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvScan() (value *ScanResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "scan" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "scan failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "scan failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error157 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error158 error
    error158, err = error157.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error158
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scan failed: invalid message type")
    return
  }
  result := MetaServiceScanResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateUser(req *CreateUserReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateUser(req); err != nil { return }
  return p.recvCreateUser()
}

func (p *MetaServiceThreadsafeClient) sendCreateUser(req *CreateUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error159 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error160 error
    error160, err = error159.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error160
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createUser failed: invalid message type")
    return
  }
  result := MetaServiceCreateUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropUser(req *DropUserReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropUser(req); err != nil { return }
  return p.recvDropUser()
}

func (p *MetaServiceThreadsafeClient) sendDropUser(req *DropUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error161 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error162 error
    error162, err = error161.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error162
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropUser failed: invalid message type")
    return
  }
  result := MetaServiceDropUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterUser(req *AlterUserReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAlterUser(req); err != nil { return }
  return p.recvAlterUser()
}

func (p *MetaServiceThreadsafeClient) sendAlterUser(req *AlterUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAlterUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error163 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error164 error
    error164, err = error163.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error164
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterUser failed: invalid message type")
    return
  }
  result := MetaServiceAlterUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GrantRole(req *GrantRoleReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGrantRole(req); err != nil { return }
  return p.recvGrantRole()
}

func (p *MetaServiceThreadsafeClient) sendGrantRole(req *GrantRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("grantRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGrantRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGrantRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "grantRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "grantRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "grantRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error165 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error166 error
    error166, err = error165.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error166
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grantRole failed: invalid message type")
    return
  }
  result := MetaServiceGrantRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RevokeRole(req *RevokeRoleReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRevokeRole(req); err != nil { return }
  return p.recvRevokeRole()
}

func (p *MetaServiceThreadsafeClient) sendRevokeRole(req *RevokeRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("revokeRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRevokeRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRevokeRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "revokeRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "revokeRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "revokeRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error167 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error168 error
    error168, err = error167.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error168
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeRole failed: invalid message type")
    return
  }
  result := MetaServiceRevokeRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetUser(req *GetUserReq) (r *GetUserResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetUser(req); err != nil { return }
  return p.recvGetUser()
}

func (p *MetaServiceThreadsafeClient) sendGetUser(req *GetUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetUser() (value *GetUserResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error169 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error170 error
    error170, err = error169.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error170
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUser failed: invalid message type")
    return
  }
  result := MetaServiceGetUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListUsers(req *ListUsersReq) (r *ListUsersResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListUsers(req); err != nil { return }
  return p.recvListUsers()
}

func (p *MetaServiceThreadsafeClient) sendListUsers(req *ListUsersReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListUsersArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListUsers() (value *ListUsersResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listUsers" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error171 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error172 error
    error172, err = error171.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error172
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listUsers failed: invalid message type")
    return
  }
  result := MetaServiceListUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListRoles(req *ListRolesReq) (r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListRoles(req); err != nil { return }
  return p.recvListRoles()
}

func (p *MetaServiceThreadsafeClient) sendListRoles(req *ListRolesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listRoles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListRolesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListRoles() (value *ListRolesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listRoles" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listRoles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listRoles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error173 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error174 error
    error174, err = error173.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error174
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listRoles failed: invalid message type")
    return
  }
  result := MetaServiceListRolesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ChangePassword(req *ChangePasswordReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendChangePassword(req); err != nil { return }
  return p.recvChangePassword()
}

func (p *MetaServiceThreadsafeClient) sendChangePassword(req *ChangePasswordReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changePassword", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceChangePasswordArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvChangePassword() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changePassword" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "changePassword failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "changePassword failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error175 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error176 error
    error176, err = error175.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error176
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changePassword failed: invalid message type")
    return
  }
  result := MetaServiceChangePasswordResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CheckPassword(req *CheckPasswordReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCheckPassword(req); err != nil { return }
  return p.recvCheckPassword()
}

func (p *MetaServiceThreadsafeClient) sendCheckPassword(req *CheckPasswordReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("checkPassword", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCheckPasswordArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCheckPassword() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "checkPassword" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "checkPassword failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "checkPassword failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error177 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error178 error
    error178, err = error177.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error178
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkPassword failed: invalid message type")
    return
  }
  result := MetaServiceCheckPasswordResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) HeartBeat(req *HBReq) (r *HBResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendHeartBeat(req); err != nil { return }
  return p.recvHeartBeat()
}

func (p *MetaServiceThreadsafeClient) sendHeartBeat(req *HBReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("heartBeat", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceHeartBeatArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvHeartBeat() (value *HBResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "heartBeat" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "heartBeat failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "heartBeat failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error179 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error180 error
    error180, err = error179.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error180
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartBeat failed: invalid message type")
    return
  }
  result := MetaServiceHeartBeatResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Balance(req *BalanceReq) (r *BalanceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendBalance(req); err != nil { return }
  return p.recvBalance()
}

func (p *MetaServiceThreadsafeClient) sendBalance(req *BalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("balance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvBalance() (value *BalanceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "balance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "balance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "balance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error181 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error182 error
    error182, err = error181.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error182
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "balance failed: invalid message type")
    return
  }
  result := MetaServiceBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) LeaderBalance(req *LeaderBalanceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendLeaderBalance(req); err != nil { return }
  return p.recvLeaderBalance()
}

func (p *MetaServiceThreadsafeClient) sendLeaderBalance(req *LeaderBalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("leaderBalance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceLeaderBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvLeaderBalance() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "leaderBalance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "leaderBalance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "leaderBalance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error183 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error184 error
    error184, err = error183.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error184
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "leaderBalance failed: invalid message type")
    return
  }
  result := MetaServiceLeaderBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RegConfig(req *RegConfigReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRegConfig(req); err != nil { return }
  return p.recvRegConfig()
}

func (p *MetaServiceThreadsafeClient) sendRegConfig(req *RegConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("regConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRegConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRegConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "regConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "regConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "regConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error185 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error186 error
    error186, err = error185.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error186
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "regConfig failed: invalid message type")
    return
  }
  result := MetaServiceRegConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetConfig(req *GetConfigReq) (r *GetConfigResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetConfig(req); err != nil { return }
  return p.recvGetConfig()
}

func (p *MetaServiceThreadsafeClient) sendGetConfig(req *GetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetConfig() (value *GetConfigResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error187 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error188 error
    error188, err = error187.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error188
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConfig failed: invalid message type")
    return
  }
  result := MetaServiceGetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SetConfig(req *SetConfigReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSetConfig(req); err != nil { return }
  return p.recvSetConfig()
}

func (p *MetaServiceThreadsafeClient) sendSetConfig(req *SetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvSetConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "setConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "setConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error189 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error190 error
    error190, err = error189.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error190
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setConfig failed: invalid message type")
    return
  }
  result := MetaServiceSetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListConfigs(req *ListConfigsReq) (r *ListConfigsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListConfigs(req); err != nil { return }
  return p.recvListConfigs()
}

func (p *MetaServiceThreadsafeClient) sendListConfigs(req *ListConfigsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConfigs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListConfigsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListConfigs() (value *ListConfigsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConfigs" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listConfigs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listConfigs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error191 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error192 error
    error192, err = error191.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error192
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConfigs failed: invalid message type")
    return
  }
  result := MetaServiceListConfigsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type MetaServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler MetaService
}

func (p *MetaServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *MetaServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewMetaServiceProcessor(handler MetaService) *MetaServiceProcessor {
  self193 := &MetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self193.processorMap["createSpace"] = &metaServiceProcessorCreateSpace{handler:handler}
  self193.processorMap["dropSpace"] = &metaServiceProcessorDropSpace{handler:handler}
  self193.processorMap["getSpace"] = &metaServiceProcessorGetSpace{handler:handler}
  self193.processorMap["listSpaces"] = &metaServiceProcessorListSpaces{handler:handler}
  self193.processorMap["createTag"] = &metaServiceProcessorCreateTag{handler:handler}
  self193.processorMap["alterTag"] = &metaServiceProcessorAlterTag{handler:handler}
  self193.processorMap["dropTag"] = &metaServiceProcessorDropTag{handler:handler}
  self193.processorMap["getTag"] = &metaServiceProcessorGetTag{handler:handler}
  self193.processorMap["listTags"] = &metaServiceProcessorListTags{handler:handler}
  self193.processorMap["createEdge"] = &metaServiceProcessorCreateEdge{handler:handler}
  self193.processorMap["alterEdge"] = &metaServiceProcessorAlterEdge{handler:handler}
  self193.processorMap["dropEdge"] = &metaServiceProcessorDropEdge{handler:handler}
  self193.processorMap["getEdge"] = &metaServiceProcessorGetEdge{handler:handler}
  self193.processorMap["listEdges"] = &metaServiceProcessorListEdges{handler:handler}
  self193.processorMap["addHosts"] = &metaServiceProcessorAddHosts{handler:handler}
  self193.processorMap["removeHosts"] = &metaServiceProcessorRemoveHosts{handler:handler}
  self193.processorMap["listHosts"] = &metaServiceProcessorListHosts{handler:handler}
  self193.processorMap["getPartsAlloc"] = &metaServiceProcessorGetPartsAlloc{handler:handler}
  self193.processorMap["multiPut"] = &metaServiceProcessorMultiPut{handler:handler}
  self193.processorMap["get"] = &metaServiceProcessorGet{handler:handler}
  self193.processorMap["multiGet"] = &metaServiceProcessorMultiGet{handler:handler}
  self193.processorMap["remove"] = &metaServiceProcessorRemove{handler:handler}
  self193.processorMap["removeRange"] = &metaServiceProcessorRemoveRange{handler:handler}
  self193.processorMap["scan"] = &metaServiceProcessorScan{handler:handler}
  self193.processorMap["createUser"] = &metaServiceProcessorCreateUser{handler:handler}
  self193.processorMap["dropUser"] = &metaServiceProcessorDropUser{handler:handler}
  self193.processorMap["alterUser"] = &metaServiceProcessorAlterUser{handler:handler}
  self193.processorMap["grantRole"] = &metaServiceProcessorGrantRole{handler:handler}
  self193.processorMap["revokeRole"] = &metaServiceProcessorRevokeRole{handler:handler}
  self193.processorMap["getUser"] = &metaServiceProcessorGetUser{handler:handler}
  self193.processorMap["listUsers"] = &metaServiceProcessorListUsers{handler:handler}
  self193.processorMap["listRoles"] = &metaServiceProcessorListRoles{handler:handler}
  self193.processorMap["changePassword"] = &metaServiceProcessorChangePassword{handler:handler}
  self193.processorMap["checkPassword"] = &metaServiceProcessorCheckPassword{handler:handler}
  self193.processorMap["heartBeat"] = &metaServiceProcessorHeartBeat{handler:handler}
  self193.processorMap["balance"] = &metaServiceProcessorBalance{handler:handler}
  self193.processorMap["leaderBalance"] = &metaServiceProcessorLeaderBalance{handler:handler}
  self193.processorMap["regConfig"] = &metaServiceProcessorRegConfig{handler:handler}
  self193.processorMap["getConfig"] = &metaServiceProcessorGetConfig{handler:handler}
  self193.processorMap["setConfig"] = &metaServiceProcessorSetConfig{handler:handler}
  self193.processorMap["listConfigs"] = &metaServiceProcessorListConfigs{handler:handler}
  return self193
}

type metaServiceProcessorCreateSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSpace) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSpaceArgs)
  var result MetaServiceCreateSpaceResult
  if retval, err := p.handler.CreateSpace(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSpace) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSpaceArgs)
  var result MetaServiceDropSpaceResult
  if retval, err := p.handler.DropSpace(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSpace) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSpaceArgs)
  var result MetaServiceGetSpaceResult
  if retval, err := p.handler.GetSpace(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSpaces struct {
  handler MetaService
}

func (p *metaServiceProcessorListSpaces) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSpacesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSpaces) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSpaces", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSpaces) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSpacesArgs)
  var result MetaServiceListSpacesResult
  if retval, err := p.handler.ListSpaces(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSpaces: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTag struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagArgs)
  var result MetaServiceCreateTagResult
  if retval, err := p.handler.CreateTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterTag struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterTagArgs)
  var result MetaServiceAlterTagResult
  if retval, err := p.handler.AlterTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTag struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagArgs)
  var result MetaServiceDropTagResult
  if retval, err := p.handler.DropTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTag struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagArgs)
  var result MetaServiceGetTagResult
  if retval, err := p.handler.GetTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTags struct {
  handler MetaService
}

func (p *metaServiceProcessorListTags) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTags) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTags", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTags) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagsArgs)
  var result MetaServiceListTagsResult
  if retval, err := p.handler.ListTags(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeArgs)
  var result MetaServiceCreateEdgeResult
  if retval, err := p.handler.CreateEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterEdgeArgs)
  var result MetaServiceAlterEdgeResult
  if retval, err := p.handler.AlterEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeArgs)
  var result MetaServiceDropEdgeResult
  if retval, err := p.handler.DropEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeArgs)
  var result MetaServiceGetEdgeResult
  if retval, err := p.handler.GetEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdges struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdges) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgesArgs)
  var result MetaServiceListEdgesResult
  if retval, err := p.handler.ListEdges(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorAddHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddHosts) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddHostsArgs)
  var result MetaServiceAddHostsResult
  if retval, err := p.handler.AddHosts(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveHosts) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveHostsArgs)
  var result MetaServiceRemoveHostsResult
  if retval, err := p.handler.RemoveHosts(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorListHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListHosts) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListHostsArgs)
  var result MetaServiceListHostsResult
  if retval, err := p.handler.ListHosts(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetPartsAlloc struct {
  handler MetaService
}

func (p *metaServiceProcessorGetPartsAlloc) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetPartsAllocArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetPartsAlloc) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getPartsAlloc", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetPartsAlloc) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetPartsAllocArgs)
  var result MetaServiceGetPartsAllocResult
  if retval, err := p.handler.GetPartsAlloc(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartsAlloc: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMultiPut struct {
  handler MetaService
}

func (p *metaServiceProcessorMultiPut) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMultiPutArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMultiPut) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiPut", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMultiPut) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMultiPutArgs)
  var result MetaServiceMultiPutResult
  if retval, err := p.handler.MultiPut(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGet struct {
  handler MetaService
}

func (p *metaServiceProcessorGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("get", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetArgs)
  var result MetaServiceGetResult
  if retval, err := p.handler.Get(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMultiGet struct {
  handler MetaService
}

func (p *metaServiceProcessorMultiGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMultiGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMultiGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiGet", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMultiGet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMultiGetArgs)
  var result MetaServiceMultiGetResult
  if retval, err := p.handler.MultiGet(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiGet: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemove struct {
  handler MetaService
}

func (p *metaServiceProcessorRemove) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemove) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("remove", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemove) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveArgs)
  var result MetaServiceRemoveResult
  if retval, err := p.handler.Remove(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveRange struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveRange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveRangeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveRange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeRange", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveRange) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveRangeArgs)
  var result MetaServiceRemoveRangeResult
  if retval, err := p.handler.RemoveRange(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRange: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorScan struct {
  handler MetaService
}

func (p *metaServiceProcessorScan) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceScanArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorScan) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("scan", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorScan) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceScanArgs)
  var result MetaServiceScanResult
  if retval, err := p.handler.Scan(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateUser struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateUserArgs)
  var result MetaServiceCreateUserResult
  if retval, err := p.handler.CreateUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropUser struct {
  handler MetaService
}

func (p *metaServiceProcessorDropUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropUserArgs)
  var result MetaServiceDropUserResult
  if retval, err := p.handler.DropUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterUser struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterUserArgs)
  var result MetaServiceAlterUserResult
  if retval, err := p.handler.AlterUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGrantRole struct {
  handler MetaService
}

func (p *metaServiceProcessorGrantRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGrantRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGrantRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("grantRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGrantRole) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGrantRoleArgs)
  var result MetaServiceGrantRoleResult
  if retval, err := p.handler.GrantRole(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRevokeRole struct {
  handler MetaService
}

func (p *metaServiceProcessorRevokeRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRevokeRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRevokeRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("revokeRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRevokeRole) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRevokeRoleArgs)
  var result MetaServiceRevokeRoleResult
  if retval, err := p.handler.RevokeRole(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetUser struct {
  handler MetaService
}

func (p *metaServiceProcessorGetUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetUserArgs)
  var result MetaServiceGetUserResult
  if retval, err := p.handler.GetUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListUsers struct {
  handler MetaService
}

func (p *metaServiceProcessorListUsers) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListUsersArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListUsers) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listUsers", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListUsers) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListUsersArgs)
  var result MetaServiceListUsersResult
  if retval, err := p.handler.ListUsers(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUsers: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorListRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListRoles) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListRolesArgs)
  var result MetaServiceListRolesResult
  if retval, err := p.handler.ListRoles(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorChangePassword struct {
  handler MetaService
}

func (p *metaServiceProcessorChangePassword) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceChangePasswordArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorChangePassword) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("changePassword", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorChangePassword) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceChangePasswordArgs)
  var result MetaServiceChangePasswordResult
  if retval, err := p.handler.ChangePassword(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changePassword: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCheckPassword struct {
  handler MetaService
}

func (p *metaServiceProcessorCheckPassword) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCheckPasswordArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCheckPassword) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("checkPassword", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCheckPassword) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCheckPasswordArgs)
  var result MetaServiceCheckPasswordResult
  if retval, err := p.handler.CheckPassword(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPassword: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorHeartBeat struct {
  handler MetaService
}

func (p *metaServiceProcessorHeartBeat) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceHeartBeatArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorHeartBeat) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("heartBeat", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorHeartBeat) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceHeartBeatArgs)
  var result MetaServiceHeartBeatResult
  if retval, err := p.handler.HeartBeat(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorBalance struct {
  handler MetaService
}

func (p *metaServiceProcessorBalance) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceBalanceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorBalance) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("balance", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorBalance) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceBalanceArgs)
  var result MetaServiceBalanceResult
  if retval, err := p.handler.Balance(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing balance: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorLeaderBalance struct {
  handler MetaService
}

func (p *metaServiceProcessorLeaderBalance) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceLeaderBalanceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorLeaderBalance) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("leaderBalance", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorLeaderBalance) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceLeaderBalanceArgs)
  var result MetaServiceLeaderBalanceResult
  if retval, err := p.handler.LeaderBalance(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaderBalance: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRegConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorRegConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRegConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRegConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("regConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRegConfig) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRegConfigArgs)
  var result MetaServiceRegConfigResult
  if retval, err := p.handler.RegConfig(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing regConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorGetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetConfig) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetConfigArgs)
  var result MetaServiceGetConfigResult
  if retval, err := p.handler.GetConfig(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorSetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("setConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSetConfig) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSetConfigArgs)
  var result MetaServiceSetConfigResult
  if retval, err := p.handler.SetConfig(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListConfigs struct {
  handler MetaService
}

func (p *metaServiceProcessorListConfigs) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListConfigsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListConfigs) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listConfigs", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListConfigs) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListConfigsArgs)
  var result MetaServiceListConfigsResult
  if retval, err := p.handler.ListConfigs(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConfigs: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type MetaServiceCreateSpaceArgs struct {
  Req *CreateSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceArgs() *MetaServiceCreateSpaceArgs {
  return &MetaServiceCreateSpaceArgs{}
}

var MetaServiceCreateSpaceArgs_Req_DEFAULT *CreateSpaceReq
func (p *MetaServiceCreateSpaceArgs) GetReq() *CreateSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceResult() *MetaServiceCreateSpaceResult {
  return &MetaServiceCreateSpaceResult{}
}

var MetaServiceCreateSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropSpaceArgs struct {
  Req *DropSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSpaceArgs() *MetaServiceDropSpaceArgs {
  return &MetaServiceDropSpaceArgs{}
}

var MetaServiceDropSpaceArgs_Req_DEFAULT *DropSpaceReq
func (p *MetaServiceDropSpaceArgs) GetReq() *DropSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceDropSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSpaceResult() *MetaServiceDropSpaceResult {
  return &MetaServiceDropSpaceResult{}
}

var MetaServiceDropSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetSpaceArgs struct {
  Req *GetSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSpaceArgs() *MetaServiceGetSpaceArgs {
  return &MetaServiceGetSpaceArgs{}
}

var MetaServiceGetSpaceArgs_Req_DEFAULT *GetSpaceReq
func (p *MetaServiceGetSpaceArgs) GetReq() *GetSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceGetSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetSpaceResult struct {
  Success *GetSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSpaceResult() *MetaServiceGetSpaceResult {
  return &MetaServiceGetSpaceResult{}
}

var MetaServiceGetSpaceResult_Success_DEFAULT *GetSpaceResp
func (p *MetaServiceGetSpaceResult) GetSuccess() *GetSpaceResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSpaceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSpacesArgs struct {
  Req *ListSpacesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSpacesArgs() *MetaServiceListSpacesArgs {
  return &MetaServiceListSpacesArgs{}
}

var MetaServiceListSpacesArgs_Req_DEFAULT *ListSpacesReq
func (p *MetaServiceListSpacesArgs) GetReq() *ListSpacesReq {
  if !p.IsSetReq() {
    return MetaServiceListSpacesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSpacesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSpacesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSpacesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSpacesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSpacesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSpacesResult struct {
  Success *ListSpacesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSpacesResult() *MetaServiceListSpacesResult {
  return &MetaServiceListSpacesResult{}
}

var MetaServiceListSpacesResult_Success_DEFAULT *ListSpacesResp
func (p *MetaServiceListSpacesResult) GetSuccess() *ListSpacesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSpacesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSpacesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSpacesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSpacesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSpacesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSpacesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateTagArgs struct {
  Req *CreateTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagArgs() *MetaServiceCreateTagArgs {
  return &MetaServiceCreateTagArgs{}
}

var MetaServiceCreateTagArgs_Req_DEFAULT *CreateTagReq
func (p *MetaServiceCreateTagArgs) GetReq() *CreateTagReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagResult() *MetaServiceCreateTagResult {
  return &MetaServiceCreateTagResult{}
}

var MetaServiceCreateTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterTagArgs struct {
  Req *AlterTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterTagArgs() *MetaServiceAlterTagArgs {
  return &MetaServiceAlterTagArgs{}
}

var MetaServiceAlterTagArgs_Req_DEFAULT *AlterTagReq
func (p *MetaServiceAlterTagArgs) GetReq() *AlterTagReq {
  if !p.IsSetReq() {
    return MetaServiceAlterTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterTagResult() *MetaServiceAlterTagResult {
  return &MetaServiceAlterTagResult{}
}

var MetaServiceAlterTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropTagArgs struct {
  Req *DropTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagArgs() *MetaServiceDropTagArgs {
  return &MetaServiceDropTagArgs{}
}

var MetaServiceDropTagArgs_Req_DEFAULT *DropTagReq
func (p *MetaServiceDropTagArgs) GetReq() *DropTagReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagResult() *MetaServiceDropTagResult {
  return &MetaServiceDropTagResult{}
}

var MetaServiceDropTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetTagArgs struct {
  Req *GetTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagArgs() *MetaServiceGetTagArgs {
  return &MetaServiceGetTagArgs{}
}

var MetaServiceGetTagArgs_Req_DEFAULT *GetTagReq
func (p *MetaServiceGetTagArgs) GetReq() *GetTagReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetTagResult struct {
  Success *GetTagResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagResult() *MetaServiceGetTagResult {
  return &MetaServiceGetTagResult{}
}

var MetaServiceGetTagResult_Success_DEFAULT *GetTagResp
func (p *MetaServiceGetTagResult) GetSuccess() *GetTagResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagsArgs struct {
  Req *ListTagsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagsArgs() *MetaServiceListTagsArgs {
  return &MetaServiceListTagsArgs{}
}

var MetaServiceListTagsArgs_Req_DEFAULT *ListTagsReq
func (p *MetaServiceListTagsArgs) GetReq() *ListTagsReq {
  if !p.IsSetReq() {
    return MetaServiceListTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagsResult struct {
  Success *ListTagsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagsResult() *MetaServiceListTagsResult {
  return &MetaServiceListTagsResult{}
}

var MetaServiceListTagsResult_Success_DEFAULT *ListTagsResp
func (p *MetaServiceListTagsResult) GetSuccess() *ListTagsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeArgs struct {
  Req *CreateEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeArgs() *MetaServiceCreateEdgeArgs {
  return &MetaServiceCreateEdgeArgs{}
}

var MetaServiceCreateEdgeArgs_Req_DEFAULT *CreateEdgeReq
func (p *MetaServiceCreateEdgeArgs) GetReq() *CreateEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeResult() *MetaServiceCreateEdgeResult {
  return &MetaServiceCreateEdgeResult{}
}

var MetaServiceCreateEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterEdgeArgs struct {
  Req *AlterEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterEdgeArgs() *MetaServiceAlterEdgeArgs {
  return &MetaServiceAlterEdgeArgs{}
}

var MetaServiceAlterEdgeArgs_Req_DEFAULT *AlterEdgeReq
func (p *MetaServiceAlterEdgeArgs) GetReq() *AlterEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceAlterEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterEdgeResult() *MetaServiceAlterEdgeResult {
  return &MetaServiceAlterEdgeResult{}
}

var MetaServiceAlterEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeArgs struct {
  Req *DropEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeArgs() *MetaServiceDropEdgeArgs {
  return &MetaServiceDropEdgeArgs{}
}

var MetaServiceDropEdgeArgs_Req_DEFAULT *DropEdgeReq
func (p *MetaServiceDropEdgeArgs) GetReq() *DropEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeResult() *MetaServiceDropEdgeResult {
  return &MetaServiceDropEdgeResult{}
}

var MetaServiceDropEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeArgs struct {
  Req *GetEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeArgs() *MetaServiceGetEdgeArgs {
  return &MetaServiceGetEdgeArgs{}
}

var MetaServiceGetEdgeArgs_Req_DEFAULT *GetEdgeReq
func (p *MetaServiceGetEdgeArgs) GetReq() *GetEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeResult struct {
  Success *GetEdgeResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeResult() *MetaServiceGetEdgeResult {
  return &MetaServiceGetEdgeResult{}
}

var MetaServiceGetEdgeResult_Success_DEFAULT *GetEdgeResp
func (p *MetaServiceGetEdgeResult) GetSuccess() *GetEdgeResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgesArgs struct {
  Req *ListEdgesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgesArgs() *MetaServiceListEdgesArgs {
  return &MetaServiceListEdgesArgs{}
}

var MetaServiceListEdgesArgs_Req_DEFAULT *ListEdgesReq
func (p *MetaServiceListEdgesArgs) GetReq() *ListEdgesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgesResult struct {
  Success *ListEdgesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgesResult() *MetaServiceListEdgesResult {
  return &MetaServiceListEdgesResult{}
}

var MetaServiceListEdgesResult_Success_DEFAULT *ListEdgesResp
func (p *MetaServiceListEdgesResult) GetSuccess() *ListEdgesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddHostsArgs struct {
  Req *AddHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostsArgs() *MetaServiceAddHostsArgs {
  return &MetaServiceAddHostsArgs{}
}

var MetaServiceAddHostsArgs_Req_DEFAULT *AddHostsReq
func (p *MetaServiceAddHostsArgs) GetReq() *AddHostsReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddHostsResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostsResult() *MetaServiceAddHostsResult {
  return &MetaServiceAddHostsResult{}
}

var MetaServiceAddHostsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveHostsArgs struct {
  Req *RemoveHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveHostsArgs() *MetaServiceRemoveHostsArgs {
  return &MetaServiceRemoveHostsArgs{}
}

var MetaServiceRemoveHostsArgs_Req_DEFAULT *RemoveHostsReq
func (p *MetaServiceRemoveHostsArgs) GetReq() *RemoveHostsReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveHostsResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveHostsResult() *MetaServiceRemoveHostsResult {
  return &MetaServiceRemoveHostsResult{}
}

var MetaServiceRemoveHostsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveHostsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListHostsArgs struct {
  Req *ListHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListHostsArgs() *MetaServiceListHostsArgs {
  return &MetaServiceListHostsArgs{}
}

var MetaServiceListHostsArgs_Req_DEFAULT *ListHostsReq
func (p *MetaServiceListHostsArgs) GetReq() *ListHostsReq {
  if !p.IsSetReq() {
    return MetaServiceListHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListHostsResult struct {
  Success *ListHostsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListHostsResult() *MetaServiceListHostsResult {
  return &MetaServiceListHostsResult{}
}

var MetaServiceListHostsResult_Success_DEFAULT *ListHostsResp
func (p *MetaServiceListHostsResult) GetSuccess() *ListHostsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListHostsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetPartsAllocArgs struct {
  Req *GetPartsAllocReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetPartsAllocArgs() *MetaServiceGetPartsAllocArgs {
  return &MetaServiceGetPartsAllocArgs{}
}

var MetaServiceGetPartsAllocArgs_Req_DEFAULT *GetPartsAllocReq
func (p *MetaServiceGetPartsAllocArgs) GetReq() *GetPartsAllocReq {
  if !p.IsSetReq() {
    return MetaServiceGetPartsAllocArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetPartsAllocArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetPartsAllocArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetPartsAllocReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetPartsAllocArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetPartsAllocResult struct {
  Success *GetPartsAllocResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetPartsAllocResult() *MetaServiceGetPartsAllocResult {
  return &MetaServiceGetPartsAllocResult{}
}

var MetaServiceGetPartsAllocResult_Success_DEFAULT *GetPartsAllocResp
func (p *MetaServiceGetPartsAllocResult) GetSuccess() *GetPartsAllocResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetPartsAllocResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetPartsAllocResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetPartsAllocResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetPartsAllocResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetPartsAllocResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceMultiPutArgs struct {
  Req *MultiPutReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMultiPutArgs() *MetaServiceMultiPutArgs {
  return &MetaServiceMultiPutArgs{}
}

var MetaServiceMultiPutArgs_Req_DEFAULT *MultiPutReq
func (p *MetaServiceMultiPutArgs) GetReq() *MultiPutReq {
  if !p.IsSetReq() {
    return MetaServiceMultiPutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMultiPutArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceMultiPutArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiPutArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMultiPutReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMultiPutArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiPutArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceMultiPutResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMultiPutResult() *MetaServiceMultiPutResult {
  return &MetaServiceMultiPutResult{}
}

var MetaServiceMultiPutResult_Success_DEFAULT *ExecResp
func (p *MetaServiceMultiPutResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceMultiPutResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiPutResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMultiPutResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiPutResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiPutResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetArgs struct {
  Req *GetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetArgs() *MetaServiceGetArgs {
  return &MetaServiceGetArgs{}
}

var MetaServiceGetArgs_Req_DEFAULT *GetReq
func (p *MetaServiceGetArgs) GetReq() *GetReq {
  if !p.IsSetReq() {
    return MetaServiceGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetResult struct {
  Success *GetResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetResult() *MetaServiceGetResult {
  return &MetaServiceGetResult{}
}

var MetaServiceGetResult_Success_DEFAULT *GetResp
func (p *MetaServiceGetResult) GetSuccess() *GetResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceMultiGetArgs struct {
  Req *MultiGetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMultiGetArgs() *MetaServiceMultiGetArgs {
  return &MetaServiceMultiGetArgs{}
}

var MetaServiceMultiGetArgs_Req_DEFAULT *MultiGetReq
func (p *MetaServiceMultiGetArgs) GetReq() *MultiGetReq {
  if !p.IsSetReq() {
    return MetaServiceMultiGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMultiGetArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceMultiGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMultiGetReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMultiGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMultiGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceMultiGetResult struct {
  Success *MultiGetResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMultiGetResult() *MetaServiceMultiGetResult {
  return &MetaServiceMultiGetResult{}
}

var MetaServiceMultiGetResult_Success_DEFAULT *MultiGetResp
func (p *MetaServiceMultiGetResult) GetSuccess() *MultiGetResp {
  if !p.IsSetSuccess() {
    return MetaServiceMultiGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMultiGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceMultiGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewMultiGetResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMultiGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMultiGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiGetResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveArgs struct {
  Req *RemoveReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveArgs() *MetaServiceRemoveArgs {
  return &MetaServiceRemoveArgs{}
}

var MetaServiceRemoveArgs_Req_DEFAULT *RemoveReq
func (p *MetaServiceRemoveArgs) GetReq() *RemoveReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveResult() *MetaServiceRemoveResult {
  return &MetaServiceRemoveResult{}
}

var MetaServiceRemoveResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveRangeArgs struct {
  Req *RemoveRangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveRangeArgs() *MetaServiceRemoveRangeArgs {
  return &MetaServiceRemoveRangeArgs{}
}

var MetaServiceRemoveRangeArgs_Req_DEFAULT *RemoveRangeReq
func (p *MetaServiceRemoveRangeArgs) GetReq() *RemoveRangeReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveRangeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveRangeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveRangeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveRangeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveRangeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveRangeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveRangeResult() *MetaServiceRemoveRangeResult {
  return &MetaServiceRemoveRangeResult{}
}

var MetaServiceRemoveRangeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveRangeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveRangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveRangeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveRangeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveRangeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceScanArgs struct {
  Req *ScanReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceScanArgs() *MetaServiceScanArgs {
  return &MetaServiceScanArgs{}
}

var MetaServiceScanArgs_Req_DEFAULT *ScanReq
func (p *MetaServiceScanArgs) GetReq() *ScanReq {
  if !p.IsSetReq() {
    return MetaServiceScanArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceScanArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceScanArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceScanArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewScanReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceScanArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceScanArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceScanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceScanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceScanResult struct {
  Success *ScanResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceScanResult() *MetaServiceScanResult {
  return &MetaServiceScanResult{}
}

var MetaServiceScanResult_Success_DEFAULT *ScanResp
func (p *MetaServiceScanResult) GetSuccess() *ScanResp {
  if !p.IsSetSuccess() {
    return MetaServiceScanResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceScanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceScanResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceScanResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewScanResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceScanResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceScanResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceScanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceScanResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateUserArgs struct {
  Req *CreateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateUserArgs() *MetaServiceCreateUserArgs {
  return &MetaServiceCreateUserArgs{}
}

var MetaServiceCreateUserArgs_Req_DEFAULT *CreateUserReq
func (p *MetaServiceCreateUserArgs) GetReq() *CreateUserReq {
  if !p.IsSetReq() {
    return MetaServiceCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateUserResult() *MetaServiceCreateUserResult {
  return &MetaServiceCreateUserResult{}
}

var MetaServiceCreateUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropUserArgs struct {
  Req *DropUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropUserArgs() *MetaServiceDropUserArgs {
  return &MetaServiceDropUserArgs{}
}

var MetaServiceDropUserArgs_Req_DEFAULT *DropUserReq
func (p *MetaServiceDropUserArgs) GetReq() *DropUserReq {
  if !p.IsSetReq() {
    return MetaServiceDropUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropUserResult() *MetaServiceDropUserResult {
  return &MetaServiceDropUserResult{}
}

var MetaServiceDropUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterUserArgs struct {
  Req *AlterUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterUserArgs() *MetaServiceAlterUserArgs {
  return &MetaServiceAlterUserArgs{}
}

var MetaServiceAlterUserArgs_Req_DEFAULT *AlterUserReq
func (p *MetaServiceAlterUserArgs) GetReq() *AlterUserReq {
  if !p.IsSetReq() {
    return MetaServiceAlterUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterUserResult() *MetaServiceAlterUserResult {
  return &MetaServiceAlterUserResult{}
}

var MetaServiceAlterUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGrantRoleArgs struct {
  Req *GrantRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGrantRoleArgs() *MetaServiceGrantRoleArgs {
  return &MetaServiceGrantRoleArgs{}
}

var MetaServiceGrantRoleArgs_Req_DEFAULT *GrantRoleReq
func (p *MetaServiceGrantRoleArgs) GetReq() *GrantRoleReq {
  if !p.IsSetReq() {
    return MetaServiceGrantRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGrantRoleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGrantRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGrantRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGrantRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGrantRoleResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGrantRoleResult() *MetaServiceGrantRoleResult {
  return &MetaServiceGrantRoleResult{}
}

var MetaServiceGrantRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceGrantRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceGrantRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGrantRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGrantRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGrantRoleResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRevokeRoleArgs struct {
  Req *RevokeRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRevokeRoleArgs() *MetaServiceRevokeRoleArgs {
  return &MetaServiceRevokeRoleArgs{}
}

var MetaServiceRevokeRoleArgs_Req_DEFAULT *RevokeRoleReq
func (p *MetaServiceRevokeRoleArgs) GetReq() *RevokeRoleReq {
  if !p.IsSetReq() {
    return MetaServiceRevokeRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRevokeRoleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRevokeRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRevokeRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRevokeRoleResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRevokeRoleResult() *MetaServiceRevokeRoleResult {
  return &MetaServiceRevokeRoleResult{}
}

var MetaServiceRevokeRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRevokeRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRevokeRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRevokeRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRevokeRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetUserArgs struct {
  Req *GetUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetUserArgs() *MetaServiceGetUserArgs {
  return &MetaServiceGetUserArgs{}
}

var MetaServiceGetUserArgs_Req_DEFAULT *GetUserReq
func (p *MetaServiceGetUserArgs) GetReq() *GetUserReq {
  if !p.IsSetReq() {
    return MetaServiceGetUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetUserResult struct {
  Success *GetUserResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetUserResult() *MetaServiceGetUserResult {
  return &MetaServiceGetUserResult{}
}

var MetaServiceGetUserResult_Success_DEFAULT *GetUserResp
func (p *MetaServiceGetUserResult) GetSuccess() *GetUserResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetUserResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListUsersArgs struct {
  Req *ListUsersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListUsersArgs() *MetaServiceListUsersArgs {
  return &MetaServiceListUsersArgs{}
}

var MetaServiceListUsersArgs_Req_DEFAULT *ListUsersReq
func (p *MetaServiceListUsersArgs) GetReq() *ListUsersReq {
  if !p.IsSetReq() {
    return MetaServiceListUsersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListUsersArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListUsersArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListUsersReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListUsersResult struct {
  Success *ListUsersResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListUsersResult() *MetaServiceListUsersResult {
  return &MetaServiceListUsersResult{}
}

var MetaServiceListUsersResult_Success_DEFAULT *ListUsersResp
func (p *MetaServiceListUsersResult) GetSuccess() *ListUsersResp {
  if !p.IsSetSuccess() {
    return MetaServiceListUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListUsersResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListUsersResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListUsersResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListRolesArgs struct {
  Req *ListRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListRolesArgs() *MetaServiceListRolesArgs {
  return &MetaServiceListRolesArgs{}
}

var MetaServiceListRolesArgs_Req_DEFAULT *ListRolesReq
func (p *MetaServiceListRolesArgs) GetReq() *ListRolesReq {
  if !p.IsSetReq() {
    return MetaServiceListRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListRolesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListRolesResult struct {
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListRolesResult() *MetaServiceListRolesResult {
  return &MetaServiceListRolesResult{}
}

var MetaServiceListRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceListRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListRolesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceChangePasswordArgs struct {
  Req *ChangePasswordReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceChangePasswordArgs() *MetaServiceChangePasswordArgs {
  return &MetaServiceChangePasswordArgs{}
}

var MetaServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordReq
func (p *MetaServiceChangePasswordArgs) GetReq() *ChangePasswordReq {
  if !p.IsSetReq() {
    return MetaServiceChangePasswordArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceChangePasswordArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceChangePasswordArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewChangePasswordReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceChangePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceChangePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceChangePasswordResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceChangePasswordResult() *MetaServiceChangePasswordResult {
  return &MetaServiceChangePasswordResult{}
}

var MetaServiceChangePasswordResult_Success_DEFAULT *ExecResp
func (p *MetaServiceChangePasswordResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceChangePasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceChangePasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceChangePasswordResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceChangePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceChangePasswordResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCheckPasswordArgs struct {
  Req *CheckPasswordReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCheckPasswordArgs() *MetaServiceCheckPasswordArgs {
  return &MetaServiceCheckPasswordArgs{}
}

var MetaServiceCheckPasswordArgs_Req_DEFAULT *CheckPasswordReq
func (p *MetaServiceCheckPasswordArgs) GetReq() *CheckPasswordReq {
  if !p.IsSetReq() {
    return MetaServiceCheckPasswordArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCheckPasswordArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCheckPasswordArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCheckPasswordArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCheckPasswordReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCheckPasswordArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("checkPassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCheckPasswordArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCheckPasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCheckPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCheckPasswordResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCheckPasswordResult() *MetaServiceCheckPasswordResult {
  return &MetaServiceCheckPasswordResult{}
}

var MetaServiceCheckPasswordResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCheckPasswordResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCheckPasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCheckPasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCheckPasswordResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCheckPasswordResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCheckPasswordResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("checkPassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCheckPasswordResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCheckPasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCheckPasswordResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceHeartBeatArgs struct {
  Req *HBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceHeartBeatArgs() *MetaServiceHeartBeatArgs {
  return &MetaServiceHeartBeatArgs{}
}

var MetaServiceHeartBeatArgs_Req_DEFAULT *HBReq
func (p *MetaServiceHeartBeatArgs) GetReq() *HBReq {
  if !p.IsSetReq() {
    return MetaServiceHeartBeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceHeartBeatArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceHeartBeatArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewHBReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceHeartBeatResult struct {
  Success *HBResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceHeartBeatResult() *MetaServiceHeartBeatResult {
  return &MetaServiceHeartBeatResult{}
}

var MetaServiceHeartBeatResult_Success_DEFAULT *HBResp
func (p *MetaServiceHeartBeatResult) GetSuccess() *HBResp {
  if !p.IsSetSuccess() {
    return MetaServiceHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceHeartBeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceHeartBeatResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewHBResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceHeartBeatResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceBalanceArgs struct {
  Req *BalanceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceBalanceArgs() *MetaServiceBalanceArgs {
  return &MetaServiceBalanceArgs{}
}

var MetaServiceBalanceArgs_Req_DEFAULT *BalanceReq
func (p *MetaServiceBalanceArgs) GetReq() *BalanceReq {
  if !p.IsSetReq() {
    return MetaServiceBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceBalanceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceBalanceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceBalanceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewBalanceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceBalanceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("balance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceBalanceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceBalanceResult struct {
  Success *BalanceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceBalanceResult() *MetaServiceBalanceResult {
  return &MetaServiceBalanceResult{}
}

var MetaServiceBalanceResult_Success_DEFAULT *BalanceResp
func (p *MetaServiceBalanceResult) GetSuccess() *BalanceResp {
  if !p.IsSetSuccess() {
    return MetaServiceBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceBalanceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceBalanceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewBalanceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceBalanceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("balance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceBalanceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceBalanceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceLeaderBalanceArgs struct {
  Req *LeaderBalanceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceLeaderBalanceArgs() *MetaServiceLeaderBalanceArgs {
  return &MetaServiceLeaderBalanceArgs{}
}

var MetaServiceLeaderBalanceArgs_Req_DEFAULT *LeaderBalanceReq
func (p *MetaServiceLeaderBalanceArgs) GetReq() *LeaderBalanceReq {
  if !p.IsSetReq() {
    return MetaServiceLeaderBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceLeaderBalanceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceLeaderBalanceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewLeaderBalanceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("leaderBalance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceLeaderBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceLeaderBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceLeaderBalanceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceLeaderBalanceResult() *MetaServiceLeaderBalanceResult {
  return &MetaServiceLeaderBalanceResult{}
}

var MetaServiceLeaderBalanceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceLeaderBalanceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceLeaderBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceLeaderBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceLeaderBalanceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("leaderBalance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceLeaderBalanceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceLeaderBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceLeaderBalanceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRegConfigArgs struct {
  Req *RegConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRegConfigArgs() *MetaServiceRegConfigArgs {
  return &MetaServiceRegConfigArgs{}
}

var MetaServiceRegConfigArgs_Req_DEFAULT *RegConfigReq
func (p *MetaServiceRegConfigArgs) GetReq() *RegConfigReq {
  if !p.IsSetReq() {
    return MetaServiceRegConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRegConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRegConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRegConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRegConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRegConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRegConfigResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRegConfigResult() *MetaServiceRegConfigResult {
  return &MetaServiceRegConfigResult{}
}

var MetaServiceRegConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRegConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRegConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRegConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRegConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRegConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRegConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetConfigArgs struct {
  Req *GetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetConfigArgs() *MetaServiceGetConfigArgs {
  return &MetaServiceGetConfigArgs{}
}

var MetaServiceGetConfigArgs_Req_DEFAULT *GetConfigReq
func (p *MetaServiceGetConfigArgs) GetReq() *GetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceGetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetConfigResult struct {
  Success *GetConfigResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetConfigResult() *MetaServiceGetConfigResult {
  return &MetaServiceGetConfigResult{}
}

var MetaServiceGetConfigResult_Success_DEFAULT *GetConfigResp
func (p *MetaServiceGetConfigResult) GetSuccess() *GetConfigResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetConfigResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSetConfigArgs struct {
  Req *SetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSetConfigArgs() *MetaServiceSetConfigArgs {
  return &MetaServiceSetConfigArgs{}
}

var MetaServiceSetConfigArgs_Req_DEFAULT *SetConfigReq
func (p *MetaServiceSetConfigArgs) GetReq() *SetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceSetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSetConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSetConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSetConfigResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSetConfigResult() *MetaServiceSetConfigResult {
  return &MetaServiceSetConfigResult{}
}

var MetaServiceSetConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSetConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSetConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSetConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListConfigsArgs struct {
  Req *ListConfigsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListConfigsArgs() *MetaServiceListConfigsArgs {
  return &MetaServiceListConfigsArgs{}
}

var MetaServiceListConfigsArgs_Req_DEFAULT *ListConfigsReq
func (p *MetaServiceListConfigsArgs) GetReq() *ListConfigsReq {
  if !p.IsSetReq() {
    return MetaServiceListConfigsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListConfigsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListConfigsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListConfigsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListConfigsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListConfigsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListConfigsResult struct {
  Success *ListConfigsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListConfigsResult() *MetaServiceListConfigsResult {
  return &MetaServiceListConfigsResult{}
}

var MetaServiceListConfigsResult_Success_DEFAULT *ListConfigsResp
func (p *MetaServiceListConfigsResult) GetSuccess() *ListConfigsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListConfigsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListConfigsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListConfigsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListConfigsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListConfigsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListConfigsResult(%+v)", *p)
}


