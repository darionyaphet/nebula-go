// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/gen-go/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_DISCONNECTED ErrorCode = -1
  ErrorCode_E_FAIL_TO_CONNECT ErrorCode = -2
  ErrorCode_E_RPC_FAILURE ErrorCode = -3
  ErrorCode_E_LEADER_CHANGED ErrorCode = -11
  ErrorCode_E_NO_HOSTS ErrorCode = -21
  ErrorCode_E_EXISTED ErrorCode = -22
  ErrorCode_E_NOT_FOUND ErrorCode = -23
  ErrorCode_E_INVALID_HOST ErrorCode = -24
  ErrorCode_E_UNSUPPORTED ErrorCode = -25
  ErrorCode_E_NOT_DROP ErrorCode = -26
  ErrorCode_E_BALANCER_RUNNING ErrorCode = -27
  ErrorCode_E_CONFIG_IMMUTABLE ErrorCode = -28
  ErrorCode_E_CONFLICT ErrorCode = -29
  ErrorCode_E_WRONGCLUSTER ErrorCode = -30
  ErrorCode_E_STORE_FAILURE ErrorCode = -31
  ErrorCode_E_STORE_SEGMENT_ILLEGAL ErrorCode = -32
  ErrorCode_E_BAD_BALANCE_PLAN ErrorCode = -33
  ErrorCode_E_BALANCED ErrorCode = -34
  ErrorCode_E_INVALID_PASSWORD ErrorCode = -41
  ErrorCode_E_INPROPER_ROLE ErrorCode = -42
  ErrorCode_E_UNKNOWN ErrorCode = -99
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_DISCONNECTED: "E_DISCONNECTED",
  ErrorCode_E_FAIL_TO_CONNECT: "E_FAIL_TO_CONNECT",
  ErrorCode_E_RPC_FAILURE: "E_RPC_FAILURE",
  ErrorCode_E_LEADER_CHANGED: "E_LEADER_CHANGED",
  ErrorCode_E_NO_HOSTS: "E_NO_HOSTS",
  ErrorCode_E_EXISTED: "E_EXISTED",
  ErrorCode_E_NOT_FOUND: "E_NOT_FOUND",
  ErrorCode_E_INVALID_HOST: "E_INVALID_HOST",
  ErrorCode_E_UNSUPPORTED: "E_UNSUPPORTED",
  ErrorCode_E_NOT_DROP: "E_NOT_DROP",
  ErrorCode_E_BALANCER_RUNNING: "E_BALANCER_RUNNING",
  ErrorCode_E_CONFIG_IMMUTABLE: "E_CONFIG_IMMUTABLE",
  ErrorCode_E_CONFLICT: "E_CONFLICT",
  ErrorCode_E_WRONGCLUSTER: "E_WRONGCLUSTER",
  ErrorCode_E_STORE_FAILURE: "E_STORE_FAILURE",
  ErrorCode_E_STORE_SEGMENT_ILLEGAL: "E_STORE_SEGMENT_ILLEGAL",
  ErrorCode_E_BAD_BALANCE_PLAN: "E_BAD_BALANCE_PLAN",
  ErrorCode_E_BALANCED: "E_BALANCED",
  ErrorCode_E_INVALID_PASSWORD: "E_INVALID_PASSWORD",
  ErrorCode_E_INPROPER_ROLE: "E_INPROPER_ROLE",
  ErrorCode_E_UNKNOWN: "E_UNKNOWN",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_DISCONNECTED": ErrorCode_E_DISCONNECTED,
  "E_FAIL_TO_CONNECT": ErrorCode_E_FAIL_TO_CONNECT,
  "E_RPC_FAILURE": ErrorCode_E_RPC_FAILURE,
  "E_LEADER_CHANGED": ErrorCode_E_LEADER_CHANGED,
  "E_NO_HOSTS": ErrorCode_E_NO_HOSTS,
  "E_EXISTED": ErrorCode_E_EXISTED,
  "E_NOT_FOUND": ErrorCode_E_NOT_FOUND,
  "E_INVALID_HOST": ErrorCode_E_INVALID_HOST,
  "E_UNSUPPORTED": ErrorCode_E_UNSUPPORTED,
  "E_NOT_DROP": ErrorCode_E_NOT_DROP,
  "E_BALANCER_RUNNING": ErrorCode_E_BALANCER_RUNNING,
  "E_CONFIG_IMMUTABLE": ErrorCode_E_CONFIG_IMMUTABLE,
  "E_CONFLICT": ErrorCode_E_CONFLICT,
  "E_WRONGCLUSTER": ErrorCode_E_WRONGCLUSTER,
  "E_STORE_FAILURE": ErrorCode_E_STORE_FAILURE,
  "E_STORE_SEGMENT_ILLEGAL": ErrorCode_E_STORE_SEGMENT_ILLEGAL,
  "E_BAD_BALANCE_PLAN": ErrorCode_E_BAD_BALANCE_PLAN,
  "E_BALANCED": ErrorCode_E_BALANCED,
  "E_INVALID_PASSWORD": ErrorCode_E_INVALID_PASSWORD,
  "E_INPROPER_ROLE": ErrorCode_E_INPROPER_ROLE,
  "E_UNKNOWN": ErrorCode_E_UNKNOWN,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type AlterSchemaOp int64
const (
  AlterSchemaOp_ADD AlterSchemaOp = 1
  AlterSchemaOp_CHANGE AlterSchemaOp = 2
  AlterSchemaOp_DROP AlterSchemaOp = 3
  AlterSchemaOp_UNKNOWN AlterSchemaOp = 4
)

var AlterSchemaOpToName = map[AlterSchemaOp]string {
  AlterSchemaOp_ADD: "ADD",
  AlterSchemaOp_CHANGE: "CHANGE",
  AlterSchemaOp_DROP: "DROP",
  AlterSchemaOp_UNKNOWN: "UNKNOWN",
}

var AlterSchemaOpToValue = map[string]AlterSchemaOp {
  "ADD": AlterSchemaOp_ADD,
  "CHANGE": AlterSchemaOp_CHANGE,
  "DROP": AlterSchemaOp_DROP,
  "UNKNOWN": AlterSchemaOp_UNKNOWN,
}

func (p AlterSchemaOp) String() string {
  if v, ok := AlterSchemaOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func AlterSchemaOpFromString(s string) (AlterSchemaOp, error) {
  if v, ok := AlterSchemaOpToValue[s]; ok {
    return v, nil
  }
  return AlterSchemaOp(0), fmt.Errorf("not a valid AlterSchemaOp string")
}

func AlterSchemaOpPtr(v AlterSchemaOp) *AlterSchemaOp { return &v }

//* GOD is A global senior administrator.like root of Linux systems.
//* ADMIN is an administrator for a given Graph Space.
//* USER is a normal user for a given Graph Space. A User can access (read and write) the data in the Graph Space.
//* GUEST is a read-only role for a given Graph Space. A Guest cannot modify the data in the Graph Space.
//* Refer to header file src/graph/PermissionManager.h for details.
//
type RoleType int64
const (
  RoleType_GOD RoleType = 1
  RoleType_ADMIN RoleType = 2
  RoleType_USER RoleType = 3
  RoleType_GUEST RoleType = 4
)

var RoleTypeToName = map[RoleType]string {
  RoleType_GOD: "GOD",
  RoleType_ADMIN: "ADMIN",
  RoleType_USER: "USER",
  RoleType_GUEST: "GUEST",
}

var RoleTypeToValue = map[string]RoleType {
  "GOD": RoleType_GOD,
  "ADMIN": RoleType_ADMIN,
  "USER": RoleType_USER,
  "GUEST": RoleType_GUEST,
}

func (p RoleType) String() string {
  if v, ok := RoleTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
  if v, ok := RoleTypeToValue[s]; ok {
    return v, nil
  }
  return RoleType(0), fmt.Errorf("not a valid RoleType string")
}

func RoleTypePtr(v RoleType) *RoleType { return &v }

type HostStatus int64
const (
  HostStatus_ONLINE HostStatus = 0
  HostStatus_OFFLINE HostStatus = 1
  HostStatus_UNKNOWN HostStatus = 2
)

var HostStatusToName = map[HostStatus]string {
  HostStatus_ONLINE: "ONLINE",
  HostStatus_OFFLINE: "OFFLINE",
  HostStatus_UNKNOWN: "UNKNOWN",
}

var HostStatusToValue = map[string]HostStatus {
  "ONLINE": HostStatus_ONLINE,
  "OFFLINE": HostStatus_OFFLINE,
  "UNKNOWN": HostStatus_UNKNOWN,
}

func (p HostStatus) String() string {
  if v, ok := HostStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HostStatusFromString(s string) (HostStatus, error) {
  if v, ok := HostStatusToValue[s]; ok {
    return v, nil
  }
  return HostStatus(0), fmt.Errorf("not a valid HostStatus string")
}

func HostStatusPtr(v HostStatus) *HostStatus { return &v }

type TaskResult_ int64
const (
  TaskResult__SUCCEEDED TaskResult_ = 0
  TaskResult__FAILED TaskResult_ = 1
  TaskResult__IN_PROGRESS TaskResult_ = 2
  TaskResult__INVALID TaskResult_ = 3
)

var TaskResult_ToName = map[TaskResult_]string {
  TaskResult__SUCCEEDED: "SUCCEEDED",
  TaskResult__FAILED: "FAILED",
  TaskResult__IN_PROGRESS: "IN_PROGRESS",
  TaskResult__INVALID: "INVALID",
}

var TaskResult_ToValue = map[string]TaskResult_ {
  "SUCCEEDED": TaskResult__SUCCEEDED,
  "FAILED": TaskResult__FAILED,
  "IN_PROGRESS": TaskResult__IN_PROGRESS,
  "INVALID": TaskResult__INVALID,
}

func (p TaskResult_) String() string {
  if v, ok := TaskResult_ToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func TaskResult_FromString(s string) (TaskResult_, error) {
  if v, ok := TaskResult_ToValue[s]; ok {
    return v, nil
  }
  return TaskResult_(0), fmt.Errorf("not a valid TaskResult_ string")
}

func TaskResult_Ptr(v TaskResult_) *TaskResult_ { return &v }

type ConfigModule int64
const (
  ConfigModule_UNKNOWN ConfigModule = 0
  ConfigModule_ALL ConfigModule = 1
  ConfigModule_GRAPH ConfigModule = 2
  ConfigModule_META ConfigModule = 3
  ConfigModule_STORAGE ConfigModule = 4
)

var ConfigModuleToName = map[ConfigModule]string {
  ConfigModule_UNKNOWN: "UNKNOWN",
  ConfigModule_ALL: "ALL",
  ConfigModule_GRAPH: "GRAPH",
  ConfigModule_META: "META",
  ConfigModule_STORAGE: "STORAGE",
}

var ConfigModuleToValue = map[string]ConfigModule {
  "UNKNOWN": ConfigModule_UNKNOWN,
  "ALL": ConfigModule_ALL,
  "GRAPH": ConfigModule_GRAPH,
  "META": ConfigModule_META,
  "STORAGE": ConfigModule_STORAGE,
}

func (p ConfigModule) String() string {
  if v, ok := ConfigModuleToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigModuleFromString(s string) (ConfigModule, error) {
  if v, ok := ConfigModuleToValue[s]; ok {
    return v, nil
  }
  return ConfigModule(0), fmt.Errorf("not a valid ConfigModule string")
}

func ConfigModulePtr(v ConfigModule) *ConfigModule { return &v }

type ConfigType int64
const (
  ConfigType_INT64 ConfigType = 0
  ConfigType_DOUBLE ConfigType = 1
  ConfigType_BOOL ConfigType = 2
  ConfigType_STRING ConfigType = 3
  ConfigType_NESTED ConfigType = 4
)

var ConfigTypeToName = map[ConfigType]string {
  ConfigType_INT64: "INT64",
  ConfigType_DOUBLE: "DOUBLE",
  ConfigType_BOOL: "BOOL",
  ConfigType_STRING: "STRING",
  ConfigType_NESTED: "NESTED",
}

var ConfigTypeToValue = map[string]ConfigType {
  "INT64": ConfigType_INT64,
  "DOUBLE": ConfigType_DOUBLE,
  "BOOL": ConfigType_BOOL,
  "STRING": ConfigType_STRING,
  "NESTED": ConfigType_NESTED,
}

func (p ConfigType) String() string {
  if v, ok := ConfigTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigTypeFromString(s string) (ConfigType, error) {
  if v, ok := ConfigTypeToValue[s]; ok {
    return v, nil
  }
  return ConfigType(0), fmt.Errorf("not a valid ConfigType string")
}

func ConfigTypePtr(v ConfigType) *ConfigType { return &v }

type ConfigMode int64
const (
  ConfigMode_IMMUTABLE ConfigMode = 0
  ConfigMode_REBOOT ConfigMode = 1
  ConfigMode_MUTABLE ConfigMode = 2
  ConfigMode_IGNORED ConfigMode = 3
)

var ConfigModeToName = map[ConfigMode]string {
  ConfigMode_IMMUTABLE: "IMMUTABLE",
  ConfigMode_REBOOT: "REBOOT",
  ConfigMode_MUTABLE: "MUTABLE",
  ConfigMode_IGNORED: "IGNORED",
}

var ConfigModeToValue = map[string]ConfigMode {
  "IMMUTABLE": ConfigMode_IMMUTABLE,
  "REBOOT": ConfigMode_REBOOT,
  "MUTABLE": ConfigMode_MUTABLE,
  "IGNORED": ConfigMode_IGNORED,
}

func (p ConfigMode) String() string {
  if v, ok := ConfigModeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigModeFromString(s string) (ConfigMode, error) {
  if v, ok := ConfigModeToValue[s]; ok {
    return v, nil
  }
  return ConfigMode(0), fmt.Errorf("not a valid ConfigMode string")
}

func ConfigModePtr(v ConfigMode) *ConfigMode { return &v }

// Attributes:
//  - SpaceID
//  - TagID
//  - EdgeType
//  - UserID
//  - ClusterID
type ID struct {
  SpaceID *nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id,omitempty"`
  TagID *nebula0.TagID `thrift:"tag_id,2" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *nebula0.EdgeType `thrift:"edge_type,3" db:"edge_type" json:"edge_type,omitempty"`
  UserID *nebula0.UserID `thrift:"user_id,4" db:"user_id" json:"user_id,omitempty"`
  ClusterID *nebula0.ClusterID `thrift:"cluster_id,5" db:"cluster_id" json:"cluster_id,omitempty"`
}

func NewID() *ID {
  return &ID{}
}

var ID_SpaceID_DEFAULT nebula0.GraphSpaceID
func (p *ID) GetSpaceID() nebula0.GraphSpaceID {
  if !p.IsSetSpaceID() {
    return ID_SpaceID_DEFAULT
  }
return *p.SpaceID
}
var ID_TagID_DEFAULT nebula0.TagID
func (p *ID) GetTagID() nebula0.TagID {
  if !p.IsSetTagID() {
    return ID_TagID_DEFAULT
  }
return *p.TagID
}
var ID_EdgeType_DEFAULT nebula0.EdgeType
func (p *ID) GetEdgeType() nebula0.EdgeType {
  if !p.IsSetEdgeType() {
    return ID_EdgeType_DEFAULT
  }
return *p.EdgeType
}
var ID_UserID_DEFAULT nebula0.UserID
func (p *ID) GetUserID() nebula0.UserID {
  if !p.IsSetUserID() {
    return ID_UserID_DEFAULT
  }
return *p.UserID
}
var ID_ClusterID_DEFAULT nebula0.ClusterID
func (p *ID) GetClusterID() nebula0.ClusterID {
  if !p.IsSetClusterID() {
    return ID_ClusterID_DEFAULT
  }
return *p.ClusterID
}
func (p *ID) CountSetFieldsID() int {
  count := 0
  if (p.IsSetSpaceID()) {
    count++
  }
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  if (p.IsSetUserID()) {
    count++
  }
  if (p.IsSetClusterID()) {
    count++
  }
  return count

}

func (p *ID) IsSetSpaceID() bool {
  return p.SpaceID != nil
}

func (p *ID) IsSetTagID() bool {
  return p.TagID != nil
}

func (p *ID) IsSetEdgeType() bool {
  return p.EdgeType != nil
}

func (p *ID) IsSetUserID() bool {
  return p.UserID != nil
}

func (p *ID) IsSetClusterID() bool {
  return p.ClusterID != nil
}

func (p *ID) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ID)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = &temp
}
  return nil
}

func (p *ID)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = &temp
}
  return nil
}

func (p *ID)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = &temp
}
  return nil
}

func (p *ID)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := nebula0.UserID(v)
  p.UserID = &temp
}
  return nil
}

func (p *ID)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := nebula0.ClusterID(v)
  p.ClusterID = &temp
}
  return nil
}

func (p *ID) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsID(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("ID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ID) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceID() {
    if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SpaceID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_type: ", p), err) }
  }
  return err
}

func (p *ID) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetUserID() {
    if err := oprot.WriteFieldBegin("user_id", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.user_id (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetClusterID() {
    if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cluster_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ClusterID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cluster_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cluster_id: ", p), err) }
  }
  return err
}

func (p *ID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ID(%+v)", *p)
}

// Attributes:
//  - Id
//  - Name
type IdName struct {
  Id *ID `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIdName() *IdName {
  return &IdName{}
}

var IdName_Id_DEFAULT *ID
func (p *IdName) GetId() *ID {
  if !p.IsSetId() {
    return IdName_Id_DEFAULT
  }
return p.Id
}

func (p *IdName) GetName() string {
  return p.Name
}
func (p *IdName) IsSetId() bool {
  return p.Id != nil
}

func (p *IdName) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdName)  ReadField1(iprot thrift.Protocol) error {
  p.Id = NewID()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *IdName)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IdName) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IdName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdName) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IdName) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IdName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdName(%+v)", *p)
}

// Attributes:
//  - SpaceName
//  - PartitionNum
//  - ReplicaFactor
type SpaceProperties struct {
  SpaceName string `thrift:"space_name,1" db:"space_name" json:"space_name"`
  PartitionNum int32 `thrift:"partition_num,2" db:"partition_num" json:"partition_num"`
  ReplicaFactor int32 `thrift:"replica_factor,3" db:"replica_factor" json:"replica_factor"`
}

func NewSpaceProperties() *SpaceProperties {
  return &SpaceProperties{}
}


func (p *SpaceProperties) GetSpaceName() string {
  return p.SpaceName
}

func (p *SpaceProperties) GetPartitionNum() int32 {
  return p.PartitionNum
}

func (p *SpaceProperties) GetReplicaFactor() int32 {
  return p.ReplicaFactor
}
func (p *SpaceProperties) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceProperties)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *SpaceProperties)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartitionNum = v
}
  return nil
}

func (p *SpaceProperties)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReplicaFactor = v
}
  return nil
}

func (p *SpaceProperties) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceProperties"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceProperties) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteString(string(p.SpaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *SpaceProperties) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("partition_num", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partition_num: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartitionNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partition_num: ", p), err) }
  return err
}

func (p *SpaceProperties) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("replica_factor", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replica_factor: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReplicaFactor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replica_factor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replica_factor: ", p), err) }
  return err
}

func (p *SpaceProperties) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceProperties(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Properties
type SpaceItem struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Properties *SpaceProperties `thrift:"properties,2" db:"properties" json:"properties"`
}

func NewSpaceItem() *SpaceItem {
  return &SpaceItem{}
}


func (p *SpaceItem) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
var SpaceItem_Properties_DEFAULT *SpaceProperties
func (p *SpaceItem) GetProperties() *SpaceProperties {
  if !p.IsSetProperties() {
    return SpaceItem_Properties_DEFAULT
  }
return p.Properties
}
func (p *SpaceItem) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *SpaceItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *SpaceItem)  ReadField2(iprot thrift.Protocol) error {
  p.Properties = NewSpaceProperties()
  if err := p.Properties.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *SpaceItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *SpaceItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
  if err := p.Properties.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  return err
}

func (p *SpaceItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceItem(%+v)", *p)
}

// Attributes:
//  - TagID
//  - TagName
//  - Version
//  - Schema
type TagItem struct {
  TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  TagName string `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version nebula0.SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *nebula0.Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewTagItem() *TagItem {
  return &TagItem{}
}


func (p *TagItem) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *TagItem) GetTagName() string {
  return p.TagName
}

func (p *TagItem) GetVersion() nebula0.SchemaVer {
  return p.Version
}
var TagItem_Schema_DEFAULT *nebula0.Schema
func (p *TagItem) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return TagItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *TagItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *TagItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *TagItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *TagItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *TagItem)  ReadField4(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *TagItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TagItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *TagItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteString(string(p.TagName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *TagItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *TagItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *TagItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagItem(%+v)", *p)
}

// Attributes:
//  - Op
//  - Schema
type AlterSchemaItem struct {
  Op AlterSchemaOp `thrift:"op,1" db:"op" json:"op"`
  Schema *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema"`
}

func NewAlterSchemaItem() *AlterSchemaItem {
  return &AlterSchemaItem{}
}


func (p *AlterSchemaItem) GetOp() AlterSchemaOp {
  return p.Op
}
var AlterSchemaItem_Schema_DEFAULT *nebula0.Schema
func (p *AlterSchemaItem) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return AlterSchemaItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *AlterSchemaItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *AlterSchemaItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterSchemaItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AlterSchemaOp(v)
  p.Op = temp
}
  return nil
}

func (p *AlterSchemaItem)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *AlterSchemaItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterSchemaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterSchemaItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:op: ", p), err) }
  return err
}

func (p *AlterSchemaItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  return err
}

func (p *AlterSchemaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterSchemaItem(%+v)", *p)
}

// Attributes:
//  - EdgeType
//  - EdgeName
//  - Version
//  - Schema
type EdgeItem struct {
  EdgeType nebula0.EdgeType `thrift:"edge_type,1" db:"edge_type" json:"edge_type"`
  EdgeName string `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version nebula0.SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *nebula0.Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewEdgeItem() *EdgeItem {
  return &EdgeItem{}
}


func (p *EdgeItem) GetEdgeType() nebula0.EdgeType {
  return p.EdgeType
}

func (p *EdgeItem) GetEdgeName() string {
  return p.EdgeName
}

func (p *EdgeItem) GetVersion() nebula0.SchemaVer {
  return p.Version
}
var EdgeItem_Schema_DEFAULT *nebula0.Schema
func (p *EdgeItem) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return EdgeItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *EdgeItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *EdgeItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = temp
}
  return nil
}

func (p *EdgeItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *EdgeItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *EdgeItem)  ReadField4(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *EdgeItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edge_type: ", p), err) }
  return err
}

func (p *EdgeItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteString(string(p.EdgeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *EdgeItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *EdgeItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *EdgeItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeItem(%+v)", *p)
}

// Attributes:
//  - HostAddr
//  - Status
//  - LeaderParts
//  - AllParts
type HostItem struct {
  HostAddr *nebula0.HostAddr `thrift:"hostAddr,1" db:"hostAddr" json:"hostAddr"`
  Status HostStatus `thrift:"status,2" db:"status" json:"status"`
  LeaderParts map[string][]nebula0.PartitionID `thrift:"leader_parts,3" db:"leader_parts" json:"leader_parts"`
  AllParts map[string][]nebula0.PartitionID `thrift:"all_parts,4" db:"all_parts" json:"all_parts"`
}

func NewHostItem() *HostItem {
  return &HostItem{}
}

var HostItem_HostAddr_DEFAULT *nebula0.HostAddr
func (p *HostItem) GetHostAddr() *nebula0.HostAddr {
  if !p.IsSetHostAddr() {
    return HostItem_HostAddr_DEFAULT
  }
return p.HostAddr
}

func (p *HostItem) GetStatus() HostStatus {
  return p.Status
}

func (p *HostItem) GetLeaderParts() map[string][]nebula0.PartitionID {
  return p.LeaderParts
}

func (p *HostItem) GetAllParts() map[string][]nebula0.PartitionID {
  return p.AllParts
}
func (p *HostItem) IsSetHostAddr() bool {
  return p.HostAddr != nil
}

func (p *HostItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostItem)  ReadField1(iprot thrift.Protocol) error {
  p.HostAddr = nebula0.NewHostAddr()
  if err := p.HostAddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostAddr), err)
  }
  return nil
}

func (p *HostItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := HostStatus(v)
  p.Status = temp
}
  return nil
}

func (p *HostItem)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula0.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val2 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem3 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.PartitionID(v)
      _elem3 = temp
}
      _val2 = append(_val2, _elem3)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula0.PartitionID, size)
  p.AllParts =  tMap
  for i := 0; i < size; i ++ {
var _key4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key4 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val5 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem6 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.PartitionID(v)
      _elem6 = temp
}
      _val5 = append(_val5, _elem6)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.AllParts[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hostAddr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddr: ", p), err) }
  if err := p.HostAddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostAddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddr: ", p), err) }
  return err
}

func (p *HostItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *HostItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("all_parts", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:all_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.AllParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.AllParts {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:all_parts: ", p), err) }
  return err
}

func (p *HostItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostItem(%+v)", *p)
}

// Attributes:
//  - Account
//  - IsLock
//  - MaxQueriesPerHour
//  - MaxUpdatesPerHour
//  - MaxConnectionsPerHour
//  - MaxUserConnections
type UserItem struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  IsLock bool `thrift:"is_lock,2" db:"is_lock" json:"is_lock"`
  MaxQueriesPerHour int32 `thrift:"max_queries_per_hour,3" db:"max_queries_per_hour" json:"max_queries_per_hour"`
  MaxUpdatesPerHour int32 `thrift:"max_updates_per_hour,4" db:"max_updates_per_hour" json:"max_updates_per_hour"`
  MaxConnectionsPerHour int32 `thrift:"max_connections_per_hour,5" db:"max_connections_per_hour" json:"max_connections_per_hour"`
  MaxUserConnections int32 `thrift:"max_user_connections,6" db:"max_user_connections" json:"max_user_connections"`
}

func NewUserItem() *UserItem {
  return &UserItem{}
}


func (p *UserItem) GetAccount() string {
  return p.Account
}

func (p *UserItem) GetIsLock() bool {
  return p.IsLock
}

func (p *UserItem) GetMaxQueriesPerHour() int32 {
  return p.MaxQueriesPerHour
}

func (p *UserItem) GetMaxUpdatesPerHour() int32 {
  return p.MaxUpdatesPerHour
}

func (p *UserItem) GetMaxConnectionsPerHour() int32 {
  return p.MaxConnectionsPerHour
}

func (p *UserItem) GetMaxUserConnections() int32 {
  return p.MaxUserConnections
}
func (p *UserItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *UserItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsLock = v
}
  return nil
}

func (p *UserItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxQueriesPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUpdatesPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxConnectionsPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxUserConnections = v
}
  return nil
}

func (p *UserItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UserItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *UserItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_lock", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_lock: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsLock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_lock (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_lock: ", p), err) }
  return err
}

func (p *UserItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_queries_per_hour", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_queries_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxQueriesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_queries_per_hour (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_queries_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_updates_per_hour", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_updates_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUpdatesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_updates_per_hour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_updates_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_connections_per_hour", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_connections_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxConnectionsPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_connections_per_hour (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_connections_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_user_connections", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_user_connections: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUserConnections)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_user_connections (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_user_connections: ", p), err) }
  return err
}

func (p *UserItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserItem(%+v)", *p)
}

// Attributes:
//  - UserID
//  - SpaceID
//  - RoleType
type RoleItem struct {
  UserID nebula0.UserID `thrift:"user_id,1" db:"user_id" json:"user_id"`
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  RoleType RoleType `thrift:"role_type,3" db:"role_type" json:"role_type"`
}

func NewRoleItem() *RoleItem {
  return &RoleItem{}
}


func (p *RoleItem) GetUserID() nebula0.UserID {
  return p.UserID
}

func (p *RoleItem) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RoleItem) GetRoleType() RoleType {
  return p.RoleType
}
func (p *RoleItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.UserID(v)
  p.UserID = temp
}
  return nil
}

func (p *RoleItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RoleItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := RoleType(v)
  p.RoleType = temp
}
  return nil
}

func (p *RoleItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RoleItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role_type: ", p), err) }
  return err
}

func (p *RoleItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleItem(%+v)", *p)
}

// Attributes:
//  - Code
//  - Id
//  - Leader
type ExecResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Id *ID `thrift:"id,2" db:"id" json:"id"`
  Leader *nebula0.HostAddr `thrift:"leader,3" db:"leader" json:"leader"`
}

func NewExecResp() *ExecResp {
  return &ExecResp{}
}


func (p *ExecResp) GetCode() ErrorCode {
  return p.Code
}
var ExecResp_Id_DEFAULT *ID
func (p *ExecResp) GetId() *ID {
  if !p.IsSetId() {
    return ExecResp_Id_DEFAULT
  }
return p.Id
}
var ExecResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ExecResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ExecResp_Leader_DEFAULT
  }
return p.Leader
}
func (p *ExecResp) IsSetId() bool {
  return p.Id != nil
}

func (p *ExecResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ExecResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExecResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ExecResp)  ReadField2(iprot thrift.Protocol) error {
  p.Id = NewID()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *ExecResp)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ExecResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ExecResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *ExecResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  return err
}

func (p *ExecResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecResp(%+v)", *p)
}

// Attributes:
//  - Properties
type CreateSpaceReq struct {
  Properties *SpaceProperties `thrift:"properties,1" db:"properties" json:"properties"`
}

func NewCreateSpaceReq() *CreateSpaceReq {
  return &CreateSpaceReq{}
}

var CreateSpaceReq_Properties_DEFAULT *SpaceProperties
func (p *CreateSpaceReq) GetProperties() *SpaceProperties {
  if !p.IsSetProperties() {
    return CreateSpaceReq_Properties_DEFAULT
  }
return p.Properties
}
func (p *CreateSpaceReq) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *CreateSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  p.Properties = NewSpaceProperties()
  if err := p.Properties.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *CreateSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := p.Properties.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *CreateSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSpaceReq(%+v)", *p)
}

// Attributes:
//  - SpaceName
type DropSpaceReq struct {
  SpaceName string `thrift:"space_name,1" db:"space_name" json:"space_name"`
}

func NewDropSpaceReq() *DropSpaceReq {
  return &DropSpaceReq{}
}


func (p *DropSpaceReq) GetSpaceName() string {
  return p.SpaceName
}
func (p *DropSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *DropSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteString(string(p.SpaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *DropSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropSpaceReq(%+v)", *p)
}

type ListSpacesReq struct {
}

func NewListSpacesReq() *ListSpacesReq {
  return &ListSpacesReq{}
}

func (p *ListSpacesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSpacesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSpacesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Spaces
type ListSpacesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Spaces []*IdName `thrift:"spaces,3" db:"spaces" json:"spaces"`
}

func NewListSpacesResp() *ListSpacesResp {
  return &ListSpacesResp{}
}


func (p *ListSpacesResp) GetCode() ErrorCode {
  return p.Code
}
var ListSpacesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListSpacesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListSpacesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSpacesResp) GetSpaces() []*IdName {
  return p.Spaces
}
func (p *ListSpacesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListSpacesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListSpacesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IdName, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := NewIdName()
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Spaces = append(p.Spaces, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSpacesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSpacesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("spaces", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spaces: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spaces)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Spaces {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spaces: ", p), err) }
  return err
}

func (p *ListSpacesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSpacesResp(%+v)", *p)
}

// Attributes:
//  - SpaceName
type GetSpaceReq struct {
  SpaceName string `thrift:"space_name,1" db:"space_name" json:"space_name"`
}

func NewGetSpaceReq() *GetSpaceReq {
  return &GetSpaceReq{}
}


func (p *GetSpaceReq) GetSpaceName() string {
  return p.SpaceName
}
func (p *GetSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *GetSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteString(string(p.SpaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *GetSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSpaceReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetSpaceResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *SpaceItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetSpaceResp() *GetSpaceResp {
  return &GetSpaceResp{}
}


func (p *GetSpaceResp) GetCode() ErrorCode {
  return p.Code
}
var GetSpaceResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetSpaceResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetSpaceResp_Leader_DEFAULT
  }
return p.Leader
}
var GetSpaceResp_Item_DEFAULT *SpaceItem
func (p *GetSpaceResp) GetItem() *SpaceItem {
  if !p.IsSetItem() {
    return GetSpaceResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetSpaceResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetSpaceResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetSpaceResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetSpaceResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewSpaceItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetSpaceResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSpaceResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - Schema
type CreateTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName string `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Schema *nebula0.Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewCreateTagReq() *CreateTagReq {
  return &CreateTagReq{}
}


func (p *CreateTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagReq) GetTagName() string {
  return p.TagName
}
var CreateTagReq_Schema_DEFAULT *nebula0.Schema
func (p *CreateTagReq) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return CreateTagReq_Schema_DEFAULT
  }
return p.Schema
}
func (p *CreateTagReq) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *CreateTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *CreateTagReq)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteString(string(p.TagName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTagReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - TagItems
//  - SchemaProp
type AlterTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName string `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  TagItems []*AlterSchemaItem `thrift:"tag_items,3" db:"tag_items" json:"tag_items"`
  SchemaProp *nebula0.SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterTagReq() *AlterTagReq {
  return &AlterTagReq{}
}


func (p *AlterTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterTagReq) GetTagName() string {
  return p.TagName
}

func (p *AlterTagReq) GetTagItems() []*AlterSchemaItem {
  return p.TagItems
}
var AlterTagReq_SchemaProp_DEFAULT *nebula0.SchemaProp
func (p *AlterTagReq) GetSchemaProp() *nebula0.SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterTagReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterTagReq) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *AlterTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AlterTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *AlterTagReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.TagItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := NewAlterSchemaItem()
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.TagItems = append(p.TagItems, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField4(iprot thrift.Protocol) error {
  p.SchemaProp = nebula0.NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteString(string(p.TagName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TagItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_items: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterTagReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
type DropTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName string `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
}

func NewDropTagReq() *DropTagReq {
  return &DropTagReq{}
}


func (p *DropTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagReq) GetTagName() string {
  return p.TagName
}
func (p *DropTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *DropTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteString(string(p.TagName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *DropTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTagReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListTagsReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagsReq() *ListTagsReq {
  return &ListTagsReq{}
}


func (p *ListTagsReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListTagsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListTagsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Tags
type ListTagsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Tags []*TagItem `thrift:"tags,3" db:"tags" json:"tags"`
}

func NewListTagsResp() *ListTagsResp {
  return &ListTagsResp{}
}


func (p *ListTagsResp) GetCode() ErrorCode {
  return p.Code
}
var ListTagsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListTagsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListTagsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagsResp) GetTags() []*TagItem {
  return p.Tags
}
func (p *ListTagsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListTagsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListTagsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagItem, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := NewTagItem()
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Tags = append(p.Tags, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tags: ", p), err) }
  return err
}

func (p *ListTagsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagsResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - Version
type GetTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName string `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version nebula0.SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetTagReq() *GetTagReq {
  return &GetTagReq{}
}


func (p *GetTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagReq) GetTagName() string {
  return p.TagName
}

func (p *GetTagReq) GetVersion() nebula0.SchemaVer {
  return p.Version
}
func (p *GetTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *GetTagReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *GetTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteString(string(p.TagName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *GetTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetTagResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *nebula0.Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetTagResp() *GetTagResp {
  return &GetTagResp{}
}


func (p *GetTagResp) GetCode() ErrorCode {
  return p.Code
}
var GetTagResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetTagResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetTagResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagResp_Schema_DEFAULT *nebula0.Schema
func (p *GetTagResp) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return GetTagResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetTagResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetTagResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *GetTagResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetTagResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetTagResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetTagResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - Schema
type CreateEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName string `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Schema *nebula0.Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewCreateEdgeReq() *CreateEdgeReq {
  return &CreateEdgeReq{}
}


func (p *CreateEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeReq) GetEdgeName() string {
  return p.EdgeName
}
var CreateEdgeReq_Schema_DEFAULT *nebula0.Schema
func (p *CreateEdgeReq) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return CreateEdgeReq_Schema_DEFAULT
  }
return p.Schema
}
func (p *CreateEdgeReq) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *CreateEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *CreateEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteString(string(p.EdgeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateEdgeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - EdgeItems
//  - SchemaProp
type AlterEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName string `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  EdgeItems []*AlterSchemaItem `thrift:"edge_items,3" db:"edge_items" json:"edge_items"`
  SchemaProp *nebula0.SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterEdgeReq() *AlterEdgeReq {
  return &AlterEdgeReq{}
}


func (p *AlterEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterEdgeReq) GetEdgeName() string {
  return p.EdgeName
}

func (p *AlterEdgeReq) GetEdgeItems() []*AlterSchemaItem {
  return p.EdgeItems
}
var AlterEdgeReq_SchemaProp_DEFAULT *nebula0.SchemaProp
func (p *AlterEdgeReq) GetSchemaProp() *nebula0.SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterEdgeReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterEdgeReq) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *AlterEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AlterEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *AlterEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.EdgeItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := NewAlterSchemaItem()
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.EdgeItems = append(p.EdgeItems, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField4(iprot thrift.Protocol) error {
  p.SchemaProp = nebula0.NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteString(string(p.EdgeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_items: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterEdgeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - Version
type GetEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName string `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version nebula0.SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetEdgeReq() *GetEdgeReq {
  return &GetEdgeReq{}
}


func (p *GetEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeReq) GetEdgeName() string {
  return p.EdgeName
}

func (p *GetEdgeReq) GetVersion() nebula0.SchemaVer {
  return p.Version
}
func (p *GetEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *GetEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *GetEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteString(string(p.EdgeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetEdgeResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *nebula0.Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetEdgeResp() *GetEdgeResp {
  return &GetEdgeResp{}
}


func (p *GetEdgeResp) GetCode() ErrorCode {
  return p.Code
}
var GetEdgeResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetEdgeResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeResp_Schema_DEFAULT *nebula0.Schema
func (p *GetEdgeResp) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return GetEdgeResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetEdgeResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetEdgeResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *GetEdgeResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetEdgeResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetEdgeResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetEdgeResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
type DropEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName string `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
}

func NewDropEdgeReq() *DropEdgeReq {
  return &DropEdgeReq{}
}


func (p *DropEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeReq) GetEdgeName() string {
  return p.EdgeName
}
func (p *DropEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *DropEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteString(string(p.EdgeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *DropEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropEdgeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListEdgesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgesReq() *ListEdgesReq {
  return &ListEdgesReq{}
}


func (p *ListEdgesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListEdgesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListEdgesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Edges
type ListEdgesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Edges []*EdgeItem `thrift:"edges,3" db:"edges" json:"edges"`
}

func NewListEdgesResp() *ListEdgesResp {
  return &ListEdgesResp{}
}


func (p *ListEdgesResp) GetCode() ErrorCode {
  return p.Code
}
var ListEdgesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListEdgesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgesResp) GetEdges() []*EdgeItem {
  return p.Edges
}
func (p *ListEdgesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListEdgesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListEdgesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeItem, 0, size)
  p.Edges =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := NewEdgeItem()
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Edges = append(p.Edges, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edges", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Edges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edges: ", p), err) }
  return err
}

func (p *ListEdgesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgesResp(%+v)", *p)
}

// Attributes:
//  - Hosts
type AddHostsReq struct {
  Hosts []*nebula0.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewAddHostsReq() *AddHostsReq {
  return &AddHostsReq{}
}


func (p *AddHostsReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
func (p *AddHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddHostsReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := nebula0.NewHostAddr()
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Hosts = append(p.Hosts, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddHostsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *AddHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddHostsReq(%+v)", *p)
}

type ListHostsReq struct {
}

func NewListHostsReq() *ListHostsReq {
  return &ListHostsReq{}
}

func (p *ListHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Hosts
type ListHostsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*HostItem `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewListHostsResp() *ListHostsResp {
  return &ListHostsResp{}
}


func (p *ListHostsResp) GetCode() ErrorCode {
  return p.Code
}
var ListHostsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListHostsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListHostsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListHostsResp) GetHosts() []*HostItem {
  return p.Hosts
}
func (p *ListHostsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListHostsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListHostsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostItem, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := NewHostItem()
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Hosts = append(p.Hosts, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListHostsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListHostsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *ListHostsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsResp(%+v)", *p)
}

// Attributes:
//  - Hosts
type RemoveHostsReq struct {
  Hosts []*nebula0.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewRemoveHostsReq() *RemoveHostsReq {
  return &RemoveHostsReq{}
}


func (p *RemoveHostsReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
func (p *RemoveHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveHostsReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := nebula0.NewHostAddr()
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Hosts = append(p.Hosts, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RemoveHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveHostsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *RemoveHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveHostsReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
type GetPartsAllocReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetPartsAllocReq() *GetPartsAllocReq {
  return &GetPartsAllocReq{}
}


func (p *GetPartsAllocReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *GetPartsAllocReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetPartsAllocReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPartsAllocReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetPartsAllocReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartsAllocReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Parts
type GetPartsAllocResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts map[nebula0.PartitionID][]*nebula0.HostAddr `thrift:"parts,3" db:"parts" json:"parts"`
}

func NewGetPartsAllocResp() *GetPartsAllocResp {
  return &GetPartsAllocResp{}
}


func (p *GetPartsAllocResp) GetCode() ErrorCode {
  return p.Code
}
var GetPartsAllocResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetPartsAllocResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetPartsAllocResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetPartsAllocResp) GetParts() map[nebula0.PartitionID][]*nebula0.HostAddr {
  return p.Parts
}
func (p *GetPartsAllocResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetPartsAllocResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetPartsAllocResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.HostAddr, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key15 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key15 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.HostAddr, 0, size)
    _val16 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem17 := nebula0.NewHostAddr()
      if err := _elem17.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
      }
      _val16 = append(_val16, _elem17)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPartsAllocResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPartsAllocResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartsAllocResp(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Pairs
type MultiPutReq struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Pairs []*nebula0.Pair `thrift:"pairs,2" db:"pairs" json:"pairs"`
}

func NewMultiPutReq() *MultiPutReq {
  return &MultiPutReq{}
}


func (p *MultiPutReq) GetSegment() string {
  return p.Segment
}

func (p *MultiPutReq) GetPairs() []*nebula0.Pair {
  return p.Pairs
}
func (p *MultiPutReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiPutReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiPutReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.Pair, 0, size)
  p.Pairs =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := nebula0.NewPair()
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Pairs = append(p.Pairs, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiPutReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiPutReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiPutReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteString(string(p.Segment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *MultiPutReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("pairs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pairs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Pairs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Pairs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pairs: ", p), err) }
  return err
}

func (p *MultiPutReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiPutReq(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
type GetReq struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewGetReq() *GetReq {
  return &GetReq{}
}


func (p *GetReq) GetSegment() string {
  return p.Segment
}

func (p *GetReq) GetKey() string {
  return p.Key
}
func (p *GetReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *GetReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *GetReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteString(string(p.Segment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *GetReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *GetReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Value
type GetResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewGetResp() *GetResp {
  return &GetResp{}
}


func (p *GetResp) GetCode() ErrorCode {
  return p.Code
}
var GetResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetResp) GetValue() string {
  return p.Value
}
func (p *GetResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *GetResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *GetResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResp(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
type MultiGetReq struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2" db:"keys" json:"keys"`
}

func NewMultiGetReq() *MultiGetReq {
  return &MultiGetReq{}
}


func (p *MultiGetReq) GetSegment() string {
  return p.Segment
}

func (p *MultiGetReq) GetKeys() []string {
  return p.Keys
}
func (p *MultiGetReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiGetReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiGetReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.Keys = append(p.Keys, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiGetReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteString(string(p.Segment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *MultiGetReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiGetReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Values
type MultiGetResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Values []string `thrift:"values,3" db:"values" json:"values"`
}

func NewMultiGetResp() *MultiGetResp {
  return &MultiGetResp{}
}


func (p *MultiGetResp) GetCode() ErrorCode {
  return p.Code
}
var MultiGetResp_Leader_DEFAULT *nebula0.HostAddr
func (p *MultiGetResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return MultiGetResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *MultiGetResp) GetValues() []string {
  return p.Values
}
func (p *MultiGetResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *MultiGetResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiGetResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *MultiGetResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *MultiGetResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.Values = append(p.Values, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiGetResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *MultiGetResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *MultiGetResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiGetResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetResp(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
type RemoveReq struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewRemoveReq() *RemoveReq {
  return &RemoveReq{}
}


func (p *RemoveReq) GetSegment() string {
  return p.Segment
}

func (p *RemoveReq) GetKey() string {
  return p.Key
}
func (p *RemoveReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *RemoveReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *RemoveReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteString(string(p.Segment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *RemoveReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *RemoveReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveReq(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Start
//  - End
type RemoveRangeReq struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Start string `thrift:"start,2" db:"start" json:"start"`
  End string `thrift:"end,3" db:"end" json:"end"`
}

func NewRemoveRangeReq() *RemoveRangeReq {
  return &RemoveRangeReq{}
}


func (p *RemoveRangeReq) GetSegment() string {
  return p.Segment
}

func (p *RemoveRangeReq) GetStart() string {
  return p.Start
}

func (p *RemoveRangeReq) GetEnd() string {
  return p.End
}
func (p *RemoveRangeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveRangeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *RemoveRangeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *RemoveRangeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.End = v
}
  return nil
}

func (p *RemoveRangeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveRangeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveRangeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteString(string(p.Segment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *RemoveRangeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteString(string(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *RemoveRangeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end: ", p), err) }
  if err := oprot.WriteString(string(p.End)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end: ", p), err) }
  return err
}

func (p *RemoveRangeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveRangeReq(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Start
//  - End
type ScanReq struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Start string `thrift:"start,2" db:"start" json:"start"`
  End string `thrift:"end,3" db:"end" json:"end"`
}

func NewScanReq() *ScanReq {
  return &ScanReq{}
}


func (p *ScanReq) GetSegment() string {
  return p.Segment
}

func (p *ScanReq) GetStart() string {
  return p.Start
}

func (p *ScanReq) GetEnd() string {
  return p.End
}
func (p *ScanReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ScanReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *ScanReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.End = v
}
  return nil
}

func (p *ScanReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteString(string(p.Segment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *ScanReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteString(string(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *ScanReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end: ", p), err) }
  if err := oprot.WriteString(string(p.End)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end: ", p), err) }
  return err
}

func (p *ScanReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Values
type ScanResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Values []string `thrift:"values,3" db:"values" json:"values"`
}

func NewScanResp() *ScanResp {
  return &ScanResp{}
}


func (p *ScanResp) GetCode() ErrorCode {
  return p.Code
}
var ScanResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ScanResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ScanResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ScanResp) GetValues() []string {
  return p.Values
}
func (p *ScanResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ScanResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ScanResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ScanResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem21 = v
}
    p.Values = append(p.Values, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ScanResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ScanResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *ScanResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanResp(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - ClusterID
type HBResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ClusterID nebula0.ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
}

func NewHBResp() *HBResp {
  return &HBResp{}
}


func (p *HBResp) GetCode() ErrorCode {
  return p.Code
}
var HBResp_Leader_DEFAULT *nebula0.HostAddr
func (p *HBResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return HBResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *HBResp) GetClusterID() nebula0.ClusterID {
  return p.ClusterID
}
func (p *HBResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *HBResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *HBResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *HBResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *HBResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HBResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *HBResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *HBResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HBResp(%+v)", *p)
}

// Attributes:
//  - Host
//  - ClusterID
type HBReq struct {
  Host *nebula0.HostAddr `thrift:"host,1" db:"host" json:"host"`
  ClusterID nebula0.ClusterID `thrift:"cluster_id,2" db:"cluster_id" json:"cluster_id"`
}

func NewHBReq() *HBReq {
  return &HBReq{}
}

var HBReq_Host_DEFAULT *nebula0.HostAddr
func (p *HBReq) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return HBReq_Host_DEFAULT
  }
return p.Host
}

func (p *HBReq) GetClusterID() nebula0.ClusterID {
  return p.ClusterID
}
func (p *HBReq) IsSetHost() bool {
  return p.Host != nil
}

func (p *HBReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBReq)  ReadField1(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *HBReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *HBReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HBReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *HBReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cluster_id: ", p), err) }
  return err
}

func (p *HBReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HBReq(%+v)", *p)
}

// Attributes:
//  - User
//  - EncodedPwd
//  - MissingOk
type CreateUserReq struct {
  User *UserItem `thrift:"user,1" db:"user" json:"user"`
  EncodedPwd string `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
  MissingOk bool `thrift:"missing_ok,3" db:"missing_ok" json:"missing_ok"`
}

func NewCreateUserReq() *CreateUserReq {
  return &CreateUserReq{}
}

var CreateUserReq_User_DEFAULT *UserItem
func (p *CreateUserReq) GetUser() *UserItem {
  if !p.IsSetUser() {
    return CreateUserReq_User_DEFAULT
  }
return p.User
}

func (p *CreateUserReq) GetEncodedPwd() string {
  return p.EncodedPwd
}

func (p *CreateUserReq) GetMissingOk() bool {
  return p.MissingOk
}
func (p *CreateUserReq) IsSetUser() bool {
  return p.User != nil
}

func (p *CreateUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserReq)  ReadField1(iprot thrift.Protocol) error {
  p.User = NewUserItem()
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *CreateUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncodedPwd = v
}
  return nil
}

func (p *CreateUserReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MissingOk = v
}
  return nil
}

func (p *CreateUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteString(string(p.EncodedPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("missing_ok", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:missing_ok: ", p), err) }
  if err := oprot.WriteBool(bool(p.MissingOk)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.missing_ok (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:missing_ok: ", p), err) }
  return err
}

func (p *CreateUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - MissingOk
type DropUserReq struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  MissingOk bool `thrift:"missing_ok,2" db:"missing_ok" json:"missing_ok"`
}

func NewDropUserReq() *DropUserReq {
  return &DropUserReq{}
}


func (p *DropUserReq) GetAccount() string {
  return p.Account
}

func (p *DropUserReq) GetMissingOk() bool {
  return p.MissingOk
}
func (p *DropUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *DropUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MissingOk = v
}
  return nil
}

func (p *DropUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *DropUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("missing_ok", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:missing_ok: ", p), err) }
  if err := oprot.WriteBool(bool(p.MissingOk)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.missing_ok (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:missing_ok: ", p), err) }
  return err
}

func (p *DropUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropUserReq(%+v)", *p)
}

// Attributes:
//  - UserItem
type AlterUserReq struct {
  UserItem *UserItem `thrift:"user_item,1" db:"user_item" json:"user_item"`
}

func NewAlterUserReq() *AlterUserReq {
  return &AlterUserReq{}
}

var AlterUserReq_UserItem_DEFAULT *UserItem
func (p *AlterUserReq) GetUserItem() *UserItem {
  if !p.IsSetUserItem() {
    return AlterUserReq_UserItem_DEFAULT
  }
return p.UserItem
}
func (p *AlterUserReq) IsSetUserItem() bool {
  return p.UserItem != nil
}

func (p *AlterUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterUserReq)  ReadField1(iprot thrift.Protocol) error {
  p.UserItem = NewUserItem()
  if err := p.UserItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserItem), err)
  }
  return nil
}

func (p *AlterUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_item: ", p), err) }
  if err := p.UserItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_item: ", p), err) }
  return err
}

func (p *AlterUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterUserReq(%+v)", *p)
}

// Attributes:
//  - RoleItem
type GrantRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewGrantRoleReq() *GrantRoleReq {
  return &GrantRoleReq{}
}

var GrantRoleReq_RoleItem_DEFAULT *RoleItem
func (p *GrantRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return GrantRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *GrantRoleReq) IsSetRoleItem() bool {
  return p.RoleItem != nil
}

func (p *GrantRoleReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRoleReq)  ReadField1(iprot thrift.Protocol) error {
  p.RoleItem = NewRoleItem()
  if err := p.RoleItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *GrantRoleReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GrantRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRoleReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *GrantRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRoleReq(%+v)", *p)
}

// Attributes:
//  - RoleItem
type RevokeRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewRevokeRoleReq() *RevokeRoleReq {
  return &RevokeRoleReq{}
}

var RevokeRoleReq_RoleItem_DEFAULT *RoleItem
func (p *RevokeRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return RevokeRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *RevokeRoleReq) IsSetRoleItem() bool {
  return p.RoleItem != nil
}

func (p *RevokeRoleReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RevokeRoleReq)  ReadField1(iprot thrift.Protocol) error {
  p.RoleItem = NewRoleItem()
  if err := p.RoleItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *RevokeRoleReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RevokeRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RevokeRoleReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *RevokeRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokeRoleReq(%+v)", *p)
}

// Attributes:
//  - Account
type GetUserReq struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
}

func NewGetUserReq() *GetUserReq {
  return &GetUserReq{}
}


func (p *GetUserReq) GetAccount() string {
  return p.Account
}
func (p *GetUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GetUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GetUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - UserItem
type GetUserResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  UserItem *UserItem `thrift:"user_item,3" db:"user_item" json:"user_item"`
}

func NewGetUserResp() *GetUserResp {
  return &GetUserResp{}
}


func (p *GetUserResp) GetCode() ErrorCode {
  return p.Code
}
var GetUserResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetUserResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetUserResp_Leader_DEFAULT
  }
return p.Leader
}
var GetUserResp_UserItem_DEFAULT *UserItem
func (p *GetUserResp) GetUserItem() *UserItem {
  if !p.IsSetUserItem() {
    return GetUserResp_UserItem_DEFAULT
  }
return p.UserItem
}
func (p *GetUserResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetUserResp) IsSetUserItem() bool {
  return p.UserItem != nil
}

func (p *GetUserResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetUserResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetUserResp)  ReadField3(iprot thrift.Protocol) error {
  p.UserItem = NewUserItem()
  if err := p.UserItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserItem), err)
  }
  return nil
}

func (p *GetUserResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUserResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetUserResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetUserResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user_item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_item: ", p), err) }
  if err := p.UserItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_item: ", p), err) }
  return err
}

func (p *GetUserResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserResp(%+v)", *p)
}

type ListUsersReq struct {
}

func NewListUsersReq() *ListUsersReq {
  return &ListUsersReq{}
}

func (p *ListUsersReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListUsersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUsersReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Users
type ListUsersResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Users map[nebula0.UserID]*UserItem `thrift:"users,3" db:"users" json:"users"`
}

func NewListUsersResp() *ListUsersResp {
  return &ListUsersResp{}
}


func (p *ListUsersResp) GetCode() ErrorCode {
  return p.Code
}
var ListUsersResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListUsersResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListUsersResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListUsersResp) GetUsers() map[nebula0.UserID]*UserItem {
  return p.Users
}
func (p *ListUsersResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListUsersResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListUsersResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.UserID]*UserItem, size)
  p.Users =  tMap
  for i := 0; i < size; i ++ {
var _key22 nebula0.UserID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.UserID(v)
    _key22 = temp
}
    _val23 := NewUserItem()
    if err := _val23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val23), err)
    }
    p.Users[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListUsersResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListUsersResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("users", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:users: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Users)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Users {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:users: ", p), err) }
  return err
}

func (p *ListUsersResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUsersResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListRolesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListRolesReq() *ListRolesReq {
  return &ListRolesReq{}
}


func (p *ListRolesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListRolesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListRolesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Roles
type ListRolesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Roles []*RoleItem `thrift:"roles,3" db:"roles" json:"roles"`
}

func NewListRolesResp() *ListRolesResp {
  return &ListRolesResp{}
}


func (p *ListRolesResp) GetCode() ErrorCode {
  return p.Code
}
var ListRolesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListRolesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListRolesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListRolesResp) GetRoles() []*RoleItem {
  return p.Roles
}
func (p *ListRolesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListRolesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListRolesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoleItem, 0, size)
  p.Roles =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := NewRoleItem()
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Roles = append(p.Roles, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListRolesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListRolesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("roles", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Roles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Roles {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roles: ", p), err) }
  return err
}

func (p *ListRolesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesResp(%+v)", *p)
}

// Attributes:
//  - Account
//  - NewEncodedPwd_
//  - OldEncodedPwd
type ChangePasswordReq struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  NewEncodedPwd_ string `thrift:"new_encoded_pwd,2" db:"new_encoded_pwd" json:"new_encoded_pwd"`
  OldEncodedPwd string `thrift:"old_encoded_pwd,3" db:"old_encoded_pwd" json:"old_encoded_pwd"`
}

func NewChangePasswordReq() *ChangePasswordReq {
  return &ChangePasswordReq{}
}


func (p *ChangePasswordReq) GetAccount() string {
  return p.Account
}

func (p *ChangePasswordReq) GetNewEncodedPwd_() string {
  return p.NewEncodedPwd_
}

func (p *ChangePasswordReq) GetOldEncodedPwd() string {
  return p.OldEncodedPwd
}
func (p *ChangePasswordReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChangePasswordReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *ChangePasswordReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewEncodedPwd_ = v
}
  return nil
}

func (p *ChangePasswordReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OldEncodedPwd = v
}
  return nil
}

func (p *ChangePasswordReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ChangePasswordReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChangePasswordReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("new_encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_encoded_pwd: ", p), err) }
  if err := oprot.WriteString(string(p.NewEncodedPwd_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("old_encoded_pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:old_encoded_pwd: ", p), err) }
  if err := oprot.WriteString(string(p.OldEncodedPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_encoded_pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:old_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChangePasswordReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - EncodedPwd
type CheckPasswordReq struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd string `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
}

func NewCheckPasswordReq() *CheckPasswordReq {
  return &CheckPasswordReq{}
}


func (p *CheckPasswordReq) GetAccount() string {
  return p.Account
}

func (p *CheckPasswordReq) GetEncodedPwd() string {
  return p.EncodedPwd
}
func (p *CheckPasswordReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckPasswordReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *CheckPasswordReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncodedPwd = v
}
  return nil
}

func (p *CheckPasswordReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CheckPasswordReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckPasswordReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *CheckPasswordReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteString(string(p.EncodedPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *CheckPasswordReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckPasswordReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Id
type BalanceReq struct {
  SpaceID *nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id,omitempty"`
  Id *int64 `thrift:"id,2" db:"id" json:"id,omitempty"`
}

func NewBalanceReq() *BalanceReq {
  return &BalanceReq{}
}

var BalanceReq_SpaceID_DEFAULT nebula0.GraphSpaceID
func (p *BalanceReq) GetSpaceID() nebula0.GraphSpaceID {
  if !p.IsSetSpaceID() {
    return BalanceReq_SpaceID_DEFAULT
  }
return *p.SpaceID
}
var BalanceReq_Id_DEFAULT int64
func (p *BalanceReq) GetId() int64 {
  if !p.IsSetId() {
    return BalanceReq_Id_DEFAULT
  }
return *p.Id
}
func (p *BalanceReq) IsSetSpaceID() bool {
  return p.SpaceID != nil
}

func (p *BalanceReq) IsSetId() bool {
  return p.Id != nil
}

func (p *BalanceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = &temp
}
  return nil
}

func (p *BalanceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Id = &v
}
  return nil
}

func (p *BalanceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceReq) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceID() {
    if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SpaceID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  }
  return err
}

func (p *BalanceReq) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetId() {
    if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Id)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  }
  return err
}

func (p *BalanceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceReq(%+v)", *p)
}

// Attributes:
//  - Id
//  - Result_
type BalanceTask struct {
  Id string `thrift:"id,1" db:"id" json:"id"`
  Result_ TaskResult_ `thrift:"result,2" db:"result" json:"result"`
}

func NewBalanceTask() *BalanceTask {
  return &BalanceTask{}
}


func (p *BalanceTask) GetId() string {
  return p.Id
}

func (p *BalanceTask) GetResult_() TaskResult_ {
  return p.Result_
}
func (p *BalanceTask) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceTask)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *BalanceTask)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TaskResult_(v)
  p.Result_ = temp
}
  return nil
}

func (p *BalanceTask) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceTask) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *BalanceTask) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *BalanceTask) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceTask(%+v)", *p)
}

// Attributes:
//  - Code
//  - Id
//  - Leader
//  - Tasks
type BalanceResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Id int64 `thrift:"id,2" db:"id" json:"id"`
  Leader *nebula0.HostAddr `thrift:"leader,3" db:"leader" json:"leader"`
  Tasks []*BalanceTask `thrift:"tasks,4" db:"tasks" json:"tasks"`
}

func NewBalanceResp() *BalanceResp {
  return &BalanceResp{}
}


func (p *BalanceResp) GetCode() ErrorCode {
  return p.Code
}

func (p *BalanceResp) GetId() int64 {
  return p.Id
}
var BalanceResp_Leader_DEFAULT *nebula0.HostAddr
func (p *BalanceResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return BalanceResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *BalanceResp) GetTasks() []*BalanceTask {
  return p.Tasks
}
func (p *BalanceResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *BalanceResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *BalanceResp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *BalanceResp)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *BalanceResp)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BalanceTask, 0, size)
  p.Tasks =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := NewBalanceTask()
    if err := _elem25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Tasks = append(p.Tasks, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BalanceResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *BalanceResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *BalanceResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  return err
}

func (p *BalanceResp) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tasks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tasks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tasks: ", p), err) }
  return err
}

func (p *BalanceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceResp(%+v)", *p)
}

type LeaderBalanceReq struct {
}

func NewLeaderBalanceReq() *LeaderBalanceReq {
  return &LeaderBalanceReq{}
}

func (p *LeaderBalanceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LeaderBalanceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LeaderBalanceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LeaderBalanceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LeaderBalanceReq(%+v)", *p)
}

// Attributes:
//  - Module
//  - Name
//  - Type
//  - Mode
//  - Value
type ConfigItem struct {
  Module ConfigModule `thrift:"module,1" db:"module" json:"module"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Type ConfigType `thrift:"type,3" db:"type" json:"type"`
  Mode ConfigMode `thrift:"mode,4" db:"mode" json:"mode"`
  Value []byte `thrift:"value,5" db:"value" json:"value"`
}

func NewConfigItem() *ConfigItem {
  return &ConfigItem{}
}


func (p *ConfigItem) GetModule() ConfigModule {
  return p.Module
}

func (p *ConfigItem) GetName() string {
  return p.Name
}

func (p *ConfigItem) GetType() ConfigType {
  return p.Type
}

func (p *ConfigItem) GetMode() ConfigMode {
  return p.Mode
}

func (p *ConfigItem) GetValue() []byte {
  return p.Value
}
func (p *ConfigItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ConfigModule(v)
  p.Module = temp
}
  return nil
}

func (p *ConfigItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ConfigItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigType(v)
  p.Type = temp
}
  return nil
}

func (p *ConfigItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ConfigMode(v)
  p.Mode = temp
}
  return nil
}

func (p *ConfigItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ConfigItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ConfigItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("module", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:module: ", p), err) }
  if err := oprot.WriteI32(int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:module: ", p), err) }
  return err
}

func (p *ConfigItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ConfigItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *ConfigItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("mode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mode: ", p), err) }
  return err
}

func (p *ConfigItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:value: ", p), err) }
  return err
}

func (p *ConfigItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigItem(%+v)", *p)
}

// Attributes:
//  - Items
type RegConfigReq struct {
  Items []*ConfigItem `thrift:"items,1" db:"items" json:"items"`
}

func NewRegConfigReq() *RegConfigReq {
  return &RegConfigReq{}
}


func (p *RegConfigReq) GetItems() []*ConfigItem {
  return p.Items
}
func (p *RegConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegConfigReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := NewConfigItem()
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Items = append(p.Items, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RegConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RegConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *RegConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegConfigReq(%+v)", *p)
}

// Attributes:
//  - Item
type GetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewGetConfigReq() *GetConfigReq {
  return &GetConfigReq{}
}

var GetConfigReq_Item_DEFAULT *ConfigItem
func (p *GetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return GetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *GetConfigReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigReq)  ReadField1(iprot thrift.Protocol) error {
  p.Item = NewConfigItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *GetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type GetConfigResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewGetConfigResp() *GetConfigResp {
  return &GetConfigResp{}
}


func (p *GetConfigResp) GetCode() ErrorCode {
  return p.Code
}
var GetConfigResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetConfigResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetConfigResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetConfigResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *GetConfigResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetConfigResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetConfigResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := NewConfigItem()
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.Items = append(p.Items, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetConfigResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetConfigResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *GetConfigResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigResp(%+v)", *p)
}

// Attributes:
//  - Item
type SetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewSetConfigReq() *SetConfigReq {
  return &SetConfigReq{}
}

var SetConfigReq_Item_DEFAULT *ConfigItem
func (p *SetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return SetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *SetConfigReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *SetConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetConfigReq)  ReadField1(iprot thrift.Protocol) error {
  p.Item = NewConfigItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *SetConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *SetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigReq(%+v)", *p)
}

// Attributes:
//  - Space
//  - Module
type ListConfigsReq struct {
  Space string `thrift:"space,1" db:"space" json:"space"`
  Module ConfigModule `thrift:"module,2" db:"module" json:"module"`
}

func NewListConfigsReq() *ListConfigsReq {
  return &ListConfigsReq{}
}


func (p *ListConfigsReq) GetSpace() string {
  return p.Space
}

func (p *ListConfigsReq) GetModule() ConfigModule {
  return p.Module
}
func (p *ListConfigsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Space = v
}
  return nil
}

func (p *ListConfigsReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ConfigModule(v)
  p.Module = temp
}
  return nil
}

func (p *ListConfigsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListConfigsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteString(string(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *ListConfigsReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("module", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:module: ", p), err) }
  if err := oprot.WriteI32(int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:module: ", p), err) }
  return err
}

func (p *ListConfigsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConfigsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListConfigsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListConfigsResp() *ListConfigsResp {
  return &ListConfigsResp{}
}


func (p *ListConfigsResp) GetCode() ErrorCode {
  return p.Code
}
var ListConfigsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListConfigsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListConfigsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListConfigsResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *ListConfigsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListConfigsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListConfigsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := NewConfigItem()
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.Items = append(p.Items, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListConfigsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListConfigsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListConfigsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConfigsResp(%+v)", *p)
}

