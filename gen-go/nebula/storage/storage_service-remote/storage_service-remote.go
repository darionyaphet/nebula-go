// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "github.com/vesoft-inc/nebula-go/gen-go/nebula/storage"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  QueryResponse getBound(GetNeighborsRequest req)")
  fmt.Fprintln(os.Stderr, "  QueryStatsResponse boundStats(GetNeighborsRequest req)")
  fmt.Fprintln(os.Stderr, "  QueryResponse getProps(VertexPropRequest req)")
  fmt.Fprintln(os.Stderr, "  EdgePropResponse getEdgeProps(EdgePropRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse addVertices(AddVerticesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse addEdges(AddEdgesRequest req)")
  fmt.Fprintln(os.Stderr, "  EdgeKeyResponse getEdgeKeys(EdgeKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse deleteEdges(DeleteEdgesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse deleteVertex(DeleteVertexRequest req)")
  fmt.Fprintln(os.Stderr, "  UpdateResponse updateVertex(UpdateVertexRequest req)")
  fmt.Fprintln(os.Stderr, "  UpdateResponse updateEdge(UpdateEdgeRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp transLeader(TransLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addPart(AddPartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addLearner(AddLearnerReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp waitingForCatchUpData(CatchUpDataReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp removePart(RemovePartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp memberChange(MemberChangeReq req)")
  fmt.Fprintln(os.Stderr, "  GetLeaderResp getLeaderPart(GetLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse put(PutRequest req)")
  fmt.Fprintln(os.Stderr, "  GeneralResponse get(GetRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse remove(RemoveRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse removeRange(RemoveRangeRequest req)")
  fmt.Fprintln(os.Stderr, "  GetUUIDResp getUUID(GetUUIDReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()

  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }

  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := storage.NewStorageServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }

  switch cmd {
  case "getBound":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBound requires 1 args")
      flag.Usage()
    }
    arg152 := flag.Arg(1)
    mbTrans153 := thrift.NewMemoryBufferLen(len(arg152))
    defer mbTrans153.Close()
    _, err154 := mbTrans153.WriteString(arg152)
    if err154 != nil {
      Usage()
      return
    }
    factory155 := thrift.NewSimpleJSONProtocolFactory()
    jsProt156 := factory155.GetProtocol(mbTrans153)
    argvalue0 := storage.NewGetNeighborsRequest()
    err157 := argvalue0.Read(jsProt156)
    if err157 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBound(value0))
    fmt.Print("\n")
    break
  case "boundStats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BoundStats requires 1 args")
      flag.Usage()
    }
    arg158 := flag.Arg(1)
    mbTrans159 := thrift.NewMemoryBufferLen(len(arg158))
    defer mbTrans159.Close()
    _, err160 := mbTrans159.WriteString(arg158)
    if err160 != nil {
      Usage()
      return
    }
    factory161 := thrift.NewSimpleJSONProtocolFactory()
    jsProt162 := factory161.GetProtocol(mbTrans159)
    argvalue0 := storage.NewGetNeighborsRequest()
    err163 := argvalue0.Read(jsProt162)
    if err163 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BoundStats(value0))
    fmt.Print("\n")
    break
  case "getProps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProps requires 1 args")
      flag.Usage()
    }
    arg164 := flag.Arg(1)
    mbTrans165 := thrift.NewMemoryBufferLen(len(arg164))
    defer mbTrans165.Close()
    _, err166 := mbTrans165.WriteString(arg164)
    if err166 != nil {
      Usage()
      return
    }
    factory167 := thrift.NewSimpleJSONProtocolFactory()
    jsProt168 := factory167.GetProtocol(mbTrans165)
    argvalue0 := storage.NewVertexPropRequest()
    err169 := argvalue0.Read(jsProt168)
    if err169 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProps(value0))
    fmt.Print("\n")
    break
  case "getEdgeProps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeProps requires 1 args")
      flag.Usage()
    }
    arg170 := flag.Arg(1)
    mbTrans171 := thrift.NewMemoryBufferLen(len(arg170))
    defer mbTrans171.Close()
    _, err172 := mbTrans171.WriteString(arg170)
    if err172 != nil {
      Usage()
      return
    }
    factory173 := thrift.NewSimpleJSONProtocolFactory()
    jsProt174 := factory173.GetProtocol(mbTrans171)
    argvalue0 := storage.NewEdgePropRequest()
    err175 := argvalue0.Read(jsProt174)
    if err175 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeProps(value0))
    fmt.Print("\n")
    break
  case "addVertices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddVertices requires 1 args")
      flag.Usage()
    }
    arg176 := flag.Arg(1)
    mbTrans177 := thrift.NewMemoryBufferLen(len(arg176))
    defer mbTrans177.Close()
    _, err178 := mbTrans177.WriteString(arg176)
    if err178 != nil {
      Usage()
      return
    }
    factory179 := thrift.NewSimpleJSONProtocolFactory()
    jsProt180 := factory179.GetProtocol(mbTrans177)
    argvalue0 := storage.NewAddVerticesRequest()
    err181 := argvalue0.Read(jsProt180)
    if err181 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddVertices(value0))
    fmt.Print("\n")
    break
  case "addEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddEdges requires 1 args")
      flag.Usage()
    }
    arg182 := flag.Arg(1)
    mbTrans183 := thrift.NewMemoryBufferLen(len(arg182))
    defer mbTrans183.Close()
    _, err184 := mbTrans183.WriteString(arg182)
    if err184 != nil {
      Usage()
      return
    }
    factory185 := thrift.NewSimpleJSONProtocolFactory()
    jsProt186 := factory185.GetProtocol(mbTrans183)
    argvalue0 := storage.NewAddEdgesRequest()
    err187 := argvalue0.Read(jsProt186)
    if err187 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddEdges(value0))
    fmt.Print("\n")
    break
  case "getEdgeKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeKeys requires 1 args")
      flag.Usage()
    }
    arg188 := flag.Arg(1)
    mbTrans189 := thrift.NewMemoryBufferLen(len(arg188))
    defer mbTrans189.Close()
    _, err190 := mbTrans189.WriteString(arg188)
    if err190 != nil {
      Usage()
      return
    }
    factory191 := thrift.NewSimpleJSONProtocolFactory()
    jsProt192 := factory191.GetProtocol(mbTrans189)
    argvalue0 := storage.NewEdgeKeyRequest()
    err193 := argvalue0.Read(jsProt192)
    if err193 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeKeys(value0))
    fmt.Print("\n")
    break
  case "deleteEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteEdges requires 1 args")
      flag.Usage()
    }
    arg194 := flag.Arg(1)
    mbTrans195 := thrift.NewMemoryBufferLen(len(arg194))
    defer mbTrans195.Close()
    _, err196 := mbTrans195.WriteString(arg194)
    if err196 != nil {
      Usage()
      return
    }
    factory197 := thrift.NewSimpleJSONProtocolFactory()
    jsProt198 := factory197.GetProtocol(mbTrans195)
    argvalue0 := storage.NewDeleteEdgesRequest()
    err199 := argvalue0.Read(jsProt198)
    if err199 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteEdges(value0))
    fmt.Print("\n")
    break
  case "deleteVertex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteVertex requires 1 args")
      flag.Usage()
    }
    arg200 := flag.Arg(1)
    mbTrans201 := thrift.NewMemoryBufferLen(len(arg200))
    defer mbTrans201.Close()
    _, err202 := mbTrans201.WriteString(arg200)
    if err202 != nil {
      Usage()
      return
    }
    factory203 := thrift.NewSimpleJSONProtocolFactory()
    jsProt204 := factory203.GetProtocol(mbTrans201)
    argvalue0 := storage.NewDeleteVertexRequest()
    err205 := argvalue0.Read(jsProt204)
    if err205 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteVertex(value0))
    fmt.Print("\n")
    break
  case "updateVertex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateVertex requires 1 args")
      flag.Usage()
    }
    arg206 := flag.Arg(1)
    mbTrans207 := thrift.NewMemoryBufferLen(len(arg206))
    defer mbTrans207.Close()
    _, err208 := mbTrans207.WriteString(arg206)
    if err208 != nil {
      Usage()
      return
    }
    factory209 := thrift.NewSimpleJSONProtocolFactory()
    jsProt210 := factory209.GetProtocol(mbTrans207)
    argvalue0 := storage.NewUpdateVertexRequest()
    err211 := argvalue0.Read(jsProt210)
    if err211 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateVertex(value0))
    fmt.Print("\n")
    break
  case "updateEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEdge requires 1 args")
      flag.Usage()
    }
    arg212 := flag.Arg(1)
    mbTrans213 := thrift.NewMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewSimpleJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue0 := storage.NewUpdateEdgeRequest()
    err217 := argvalue0.Read(jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEdge(value0))
    fmt.Print("\n")
    break
  case "transLeader":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransLeader requires 1 args")
      flag.Usage()
    }
    arg218 := flag.Arg(1)
    mbTrans219 := thrift.NewMemoryBufferLen(len(arg218))
    defer mbTrans219.Close()
    _, err220 := mbTrans219.WriteString(arg218)
    if err220 != nil {
      Usage()
      return
    }
    factory221 := thrift.NewSimpleJSONProtocolFactory()
    jsProt222 := factory221.GetProtocol(mbTrans219)
    argvalue0 := storage.NewTransLeaderReq()
    err223 := argvalue0.Read(jsProt222)
    if err223 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransLeader(value0))
    fmt.Print("\n")
    break
  case "addPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPart requires 1 args")
      flag.Usage()
    }
    arg224 := flag.Arg(1)
    mbTrans225 := thrift.NewMemoryBufferLen(len(arg224))
    defer mbTrans225.Close()
    _, err226 := mbTrans225.WriteString(arg224)
    if err226 != nil {
      Usage()
      return
    }
    factory227 := thrift.NewSimpleJSONProtocolFactory()
    jsProt228 := factory227.GetProtocol(mbTrans225)
    argvalue0 := storage.NewAddPartReq()
    err229 := argvalue0.Read(jsProt228)
    if err229 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPart(value0))
    fmt.Print("\n")
    break
  case "addLearner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddLearner requires 1 args")
      flag.Usage()
    }
    arg230 := flag.Arg(1)
    mbTrans231 := thrift.NewMemoryBufferLen(len(arg230))
    defer mbTrans231.Close()
    _, err232 := mbTrans231.WriteString(arg230)
    if err232 != nil {
      Usage()
      return
    }
    factory233 := thrift.NewSimpleJSONProtocolFactory()
    jsProt234 := factory233.GetProtocol(mbTrans231)
    argvalue0 := storage.NewAddLearnerReq()
    err235 := argvalue0.Read(jsProt234)
    if err235 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddLearner(value0))
    fmt.Print("\n")
    break
  case "waitingForCatchUpData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WaitingForCatchUpData requires 1 args")
      flag.Usage()
    }
    arg236 := flag.Arg(1)
    mbTrans237 := thrift.NewMemoryBufferLen(len(arg236))
    defer mbTrans237.Close()
    _, err238 := mbTrans237.WriteString(arg236)
    if err238 != nil {
      Usage()
      return
    }
    factory239 := thrift.NewSimpleJSONProtocolFactory()
    jsProt240 := factory239.GetProtocol(mbTrans237)
    argvalue0 := storage.NewCatchUpDataReq()
    err241 := argvalue0.Read(jsProt240)
    if err241 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WaitingForCatchUpData(value0))
    fmt.Print("\n")
    break
  case "removePart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemovePart requires 1 args")
      flag.Usage()
    }
    arg242 := flag.Arg(1)
    mbTrans243 := thrift.NewMemoryBufferLen(len(arg242))
    defer mbTrans243.Close()
    _, err244 := mbTrans243.WriteString(arg242)
    if err244 != nil {
      Usage()
      return
    }
    factory245 := thrift.NewSimpleJSONProtocolFactory()
    jsProt246 := factory245.GetProtocol(mbTrans243)
    argvalue0 := storage.NewRemovePartReq()
    err247 := argvalue0.Read(jsProt246)
    if err247 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemovePart(value0))
    fmt.Print("\n")
    break
  case "memberChange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MemberChange requires 1 args")
      flag.Usage()
    }
    arg248 := flag.Arg(1)
    mbTrans249 := thrift.NewMemoryBufferLen(len(arg248))
    defer mbTrans249.Close()
    _, err250 := mbTrans249.WriteString(arg248)
    if err250 != nil {
      Usage()
      return
    }
    factory251 := thrift.NewSimpleJSONProtocolFactory()
    jsProt252 := factory251.GetProtocol(mbTrans249)
    argvalue0 := storage.NewMemberChangeReq()
    err253 := argvalue0.Read(jsProt252)
    if err253 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MemberChange(value0))
    fmt.Print("\n")
    break
  case "getLeaderPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLeaderPart requires 1 args")
      flag.Usage()
    }
    arg254 := flag.Arg(1)
    mbTrans255 := thrift.NewMemoryBufferLen(len(arg254))
    defer mbTrans255.Close()
    _, err256 := mbTrans255.WriteString(arg254)
    if err256 != nil {
      Usage()
      return
    }
    factory257 := thrift.NewSimpleJSONProtocolFactory()
    jsProt258 := factory257.GetProtocol(mbTrans255)
    argvalue0 := storage.NewGetLeaderReq()
    err259 := argvalue0.Read(jsProt258)
    if err259 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLeaderPart(value0))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Put requires 1 args")
      flag.Usage()
    }
    arg260 := flag.Arg(1)
    mbTrans261 := thrift.NewMemoryBufferLen(len(arg260))
    defer mbTrans261.Close()
    _, err262 := mbTrans261.WriteString(arg260)
    if err262 != nil {
      Usage()
      return
    }
    factory263 := thrift.NewSimpleJSONProtocolFactory()
    jsProt264 := factory263.GetProtocol(mbTrans261)
    argvalue0 := storage.NewPutRequest()
    err265 := argvalue0.Read(jsProt264)
    if err265 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Put(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg266 := flag.Arg(1)
    mbTrans267 := thrift.NewMemoryBufferLen(len(arg266))
    defer mbTrans267.Close()
    _, err268 := mbTrans267.WriteString(arg266)
    if err268 != nil {
      Usage()
      return
    }
    factory269 := thrift.NewSimpleJSONProtocolFactory()
    jsProt270 := factory269.GetProtocol(mbTrans267)
    argvalue0 := storage.NewGetRequest()
    err271 := argvalue0.Read(jsProt270)
    if err271 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg272 := flag.Arg(1)
    mbTrans273 := thrift.NewMemoryBufferLen(len(arg272))
    defer mbTrans273.Close()
    _, err274 := mbTrans273.WriteString(arg272)
    if err274 != nil {
      Usage()
      return
    }
    factory275 := thrift.NewSimpleJSONProtocolFactory()
    jsProt276 := factory275.GetProtocol(mbTrans273)
    argvalue0 := storage.NewRemoveRequest()
    err277 := argvalue0.Read(jsProt276)
    if err277 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg278 := flag.Arg(1)
    mbTrans279 := thrift.NewMemoryBufferLen(len(arg278))
    defer mbTrans279.Close()
    _, err280 := mbTrans279.WriteString(arg278)
    if err280 != nil {
      Usage()
      return
    }
    factory281 := thrift.NewSimpleJSONProtocolFactory()
    jsProt282 := factory281.GetProtocol(mbTrans279)
    argvalue0 := storage.NewRemoveRangeRequest()
    err283 := argvalue0.Read(jsProt282)
    if err283 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "getUUID":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUUID requires 1 args")
      flag.Usage()
    }
    arg284 := flag.Arg(1)
    mbTrans285 := thrift.NewMemoryBufferLen(len(arg284))
    defer mbTrans285.Close()
    _, err286 := mbTrans285.WriteString(arg284)
    if err286 != nil {
      Usage()
      return
    }
    factory287 := thrift.NewSimpleJSONProtocolFactory()
    jsProt288 := factory287.GetProtocol(mbTrans285)
    argvalue0 := storage.NewGetUUIDReq()
    err289 := argvalue0.Read(jsProt288)
    if err289 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUUID(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
