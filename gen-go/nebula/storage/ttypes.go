// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package storage

import (
	"bytes"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/gen-go/nebula"
	"sync"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int

type ErrorCode int64

const (
	ErrorCode_SUCCEEDED             ErrorCode = 0
	ErrorCode_E_DISCONNECTED        ErrorCode = -1
	ErrorCode_E_FAILED_TO_CONNECT   ErrorCode = -2
	ErrorCode_E_RPC_FAILURE         ErrorCode = -3
	ErrorCode_E_LEADER_CHANGED      ErrorCode = -11
	ErrorCode_E_KEY_HAS_EXISTS      ErrorCode = -12
	ErrorCode_E_SPACE_NOT_FOUND     ErrorCode = -13
	ErrorCode_E_PART_NOT_FOUND      ErrorCode = -14
	ErrorCode_E_KEY_NOT_FOUND       ErrorCode = -15
	ErrorCode_E_CONSENSUS_ERROR     ErrorCode = -16
	ErrorCode_E_EDGE_PROP_NOT_FOUND ErrorCode = -21
	ErrorCode_E_TAG_PROP_NOT_FOUND  ErrorCode = -22
	ErrorCode_E_IMPROPER_DATA_TYPE  ErrorCode = -23
	ErrorCode_E_INVALID_FILTER      ErrorCode = -31
	ErrorCode_E_INVALID_UPDATER     ErrorCode = -32
	ErrorCode_E_INVALID_STORE       ErrorCode = -33
	ErrorCode_E_INVALID_PEER        ErrorCode = -34
	ErrorCode_E_RETRY_EXHAUSTED     ErrorCode = -35
	ErrorCode_E_LOAD_META_FAILED    ErrorCode = -41
	ErrorCode_E_UNKNOWN             ErrorCode = -100
)

var ErrorCodeToName = map[ErrorCode]string{
	ErrorCode_SUCCEEDED:             "SUCCEEDED",
	ErrorCode_E_DISCONNECTED:        "E_DISCONNECTED",
	ErrorCode_E_FAILED_TO_CONNECT:   "E_FAILED_TO_CONNECT",
	ErrorCode_E_RPC_FAILURE:         "E_RPC_FAILURE",
	ErrorCode_E_LEADER_CHANGED:      "E_LEADER_CHANGED",
	ErrorCode_E_KEY_HAS_EXISTS:      "E_KEY_HAS_EXISTS",
	ErrorCode_E_SPACE_NOT_FOUND:     "E_SPACE_NOT_FOUND",
	ErrorCode_E_PART_NOT_FOUND:      "E_PART_NOT_FOUND",
	ErrorCode_E_KEY_NOT_FOUND:       "E_KEY_NOT_FOUND",
	ErrorCode_E_CONSENSUS_ERROR:     "E_CONSENSUS_ERROR",
	ErrorCode_E_EDGE_PROP_NOT_FOUND: "E_EDGE_PROP_NOT_FOUND",
	ErrorCode_E_TAG_PROP_NOT_FOUND:  "E_TAG_PROP_NOT_FOUND",
	ErrorCode_E_IMPROPER_DATA_TYPE:  "E_IMPROPER_DATA_TYPE",
	ErrorCode_E_INVALID_FILTER:      "E_INVALID_FILTER",
	ErrorCode_E_INVALID_UPDATER:     "E_INVALID_UPDATER",
	ErrorCode_E_INVALID_STORE:       "E_INVALID_STORE",
	ErrorCode_E_INVALID_PEER:        "E_INVALID_PEER",
	ErrorCode_E_RETRY_EXHAUSTED:     "E_RETRY_EXHAUSTED",
	ErrorCode_E_LOAD_META_FAILED:    "E_LOAD_META_FAILED",
	ErrorCode_E_UNKNOWN:             "E_UNKNOWN",
}

var ErrorCodeToValue = map[string]ErrorCode{
	"SUCCEEDED":             ErrorCode_SUCCEEDED,
	"E_DISCONNECTED":        ErrorCode_E_DISCONNECTED,
	"E_FAILED_TO_CONNECT":   ErrorCode_E_FAILED_TO_CONNECT,
	"E_RPC_FAILURE":         ErrorCode_E_RPC_FAILURE,
	"E_LEADER_CHANGED":      ErrorCode_E_LEADER_CHANGED,
	"E_KEY_HAS_EXISTS":      ErrorCode_E_KEY_HAS_EXISTS,
	"E_SPACE_NOT_FOUND":     ErrorCode_E_SPACE_NOT_FOUND,
	"E_PART_NOT_FOUND":      ErrorCode_E_PART_NOT_FOUND,
	"E_KEY_NOT_FOUND":       ErrorCode_E_KEY_NOT_FOUND,
	"E_CONSENSUS_ERROR":     ErrorCode_E_CONSENSUS_ERROR,
	"E_EDGE_PROP_NOT_FOUND": ErrorCode_E_EDGE_PROP_NOT_FOUND,
	"E_TAG_PROP_NOT_FOUND":  ErrorCode_E_TAG_PROP_NOT_FOUND,
	"E_IMPROPER_DATA_TYPE":  ErrorCode_E_IMPROPER_DATA_TYPE,
	"E_INVALID_FILTER":      ErrorCode_E_INVALID_FILTER,
	"E_INVALID_UPDATER":     ErrorCode_E_INVALID_UPDATER,
	"E_INVALID_STORE":       ErrorCode_E_INVALID_STORE,
	"E_INVALID_PEER":        ErrorCode_E_INVALID_PEER,
	"E_RETRY_EXHAUSTED":     ErrorCode_E_RETRY_EXHAUSTED,
	"E_LOAD_META_FAILED":    ErrorCode_E_LOAD_META_FAILED,
	"E_UNKNOWN":             ErrorCode_E_UNKNOWN,
}

func (p ErrorCode) String() string {
	if v, ok := ErrorCodeToName[p]; ok {
		return v
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	if v, ok := ErrorCodeToValue[s]; ok {
		return v, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type PropOwner int64

const (
	PropOwner_SOURCE PropOwner = 1
	PropOwner_DEST   PropOwner = 2
	PropOwner_EDGE   PropOwner = 3
)

var PropOwnerToName = map[PropOwner]string{
	PropOwner_SOURCE: "SOURCE",
	PropOwner_DEST:   "DEST",
	PropOwner_EDGE:   "EDGE",
}

var PropOwnerToValue = map[string]PropOwner{
	"SOURCE": PropOwner_SOURCE,
	"DEST":   PropOwner_DEST,
	"EDGE":   PropOwner_EDGE,
}

func (p PropOwner) String() string {
	if v, ok := PropOwnerToName[p]; ok {
		return v
	}
	return "<UNSET>"
}

func PropOwnerFromString(s string) (PropOwner, error) {
	if v, ok := PropOwnerToValue[s]; ok {
		return v, nil
	}
	return PropOwner(0), fmt.Errorf("not a valid PropOwner string")
}

func PropOwnerPtr(v PropOwner) *PropOwner { return &v }

type StatType int64

const (
	StatType_SUM   StatType = 1
	StatType_COUNT StatType = 2
	StatType_AVG   StatType = 3
)

var StatTypeToName = map[StatType]string{
	StatType_SUM:   "SUM",
	StatType_COUNT: "COUNT",
	StatType_AVG:   "AVG",
}

var StatTypeToValue = map[string]StatType{
	"SUM":   StatType_SUM,
	"COUNT": StatType_COUNT,
	"AVG":   StatType_AVG,
}

func (p StatType) String() string {
	if v, ok := StatTypeToName[p]; ok {
		return v
	}
	return "<UNSET>"
}

func StatTypeFromString(s string) (StatType, error) {
	if v, ok := StatTypeToValue[s]; ok {
		return v, nil
	}
	return StatType(0), fmt.Errorf("not a valid StatType string")
}

func StatTypePtr(v StatType) *StatType { return &v }

// Attributes:
//  - TagID
//  - EdgeType
type EntryId struct {
	TagID    *nebula0.TagID    `thrift:"tag_id,1" db:"tag_id" json:"tag_id,omitempty"`
	EdgeType *nebula0.EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type,omitempty"`
}

func NewEntryId() *EntryId {
	return &EntryId{}
}

var EntryId_TagID_DEFAULT nebula0.TagID

func (p *EntryId) GetTagID() nebula0.TagID {
	if !p.IsSetTagID() {
		return EntryId_TagID_DEFAULT
	}
	return *p.TagID
}

var EntryId_EdgeType_DEFAULT nebula0.EdgeType

func (p *EntryId) GetEdgeType() nebula0.EdgeType {
	if !p.IsSetEdgeType() {
		return EntryId_EdgeType_DEFAULT
	}
	return *p.EdgeType
}
func (p *EntryId) CountSetFieldsEntryId() int {
	count := 0
	if p.IsSetTagID() {
		count++
	}
	if p.IsSetEdgeType() {
		count++
	}
	return count

}

func (p *EntryId) IsSetTagID() bool {
	return p.TagID != nil
}

func (p *EntryId) IsSetEdgeType() bool {
	return p.EdgeType != nil
}

func (p *EntryId) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EntryId) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.TagID(v)
		p.TagID = &temp
	}
	return nil
}

func (p *EntryId) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.EdgeType(v)
		p.EdgeType = &temp
	}
	return nil
}

func (p *EntryId) Write(oprot thrift.Protocol) error {
	if c := p.CountSetFieldsEntryId(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("EntryId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EntryId) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetTagID() {
		if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err)
		}
	}
	return err
}

func (p *EntryId) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetEdgeType() {
		if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err)
		}
	}
	return err
}

func (p *EntryId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntryId(%+v)", *p)
}

// Attributes:
//  - Owner
//  - Id
//  - Name
//  - Stat
type PropDef struct {
	Owner PropOwner `thrift:"owner,1" db:"owner" json:"owner"`
	Id    *EntryId  `thrift:"id,2" db:"id" json:"id"`
	Name  string    `thrift:"name,3" db:"name" json:"name"`
	Stat  StatType  `thrift:"stat,4" db:"stat" json:"stat"`
}

func NewPropDef() *PropDef {
	return &PropDef{}
}

func (p *PropDef) GetOwner() PropOwner {
	return p.Owner
}

var PropDef_Id_DEFAULT *EntryId

func (p *PropDef) GetId() *EntryId {
	if !p.IsSetId() {
		return PropDef_Id_DEFAULT
	}
	return p.Id
}

func (p *PropDef) GetName() string {
	return p.Name
}

func (p *PropDef) GetStat() StatType {
	return p.Stat
}
func (p *PropDef) IsSetId() bool {
	return p.Id != nil
}

func (p *PropDef) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PropDef) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := PropOwner(v)
		p.Owner = temp
	}
	return nil
}

func (p *PropDef) ReadField2(iprot thrift.Protocol) error {
	p.Id = NewEntryId()
	if err := p.Id.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
	}
	return nil
}

func (p *PropDef) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *PropDef) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := StatType(v)
		p.Stat = temp
	}
	return nil
}

func (p *PropDef) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("PropDef"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PropDef) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("owner", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:owner: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Owner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.owner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:owner: ", p), err)
	}
	return err
}

func (p *PropDef) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := p.Id.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *PropDef) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *PropDef) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("stat", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stat: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Stat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stat (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stat: ", p), err)
	}
	return err
}

func (p *PropDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PropDef(%+v)", *p)
}

// Attributes:
//  - Code
//  - PartID
//  - Leader
type ResultCode struct {
	Code   ErrorCode           `thrift:"code,1,required" db:"code" json:"code"`
	PartID nebula0.PartitionID `thrift:"part_id,2,required" db:"part_id" json:"part_id"`
	Leader *nebula0.HostAddr   `thrift:"leader,3" db:"leader" json:"leader,omitempty"`
}

func NewResultCode() *ResultCode {
	return &ResultCode{}
}

func (p *ResultCode) GetCode() ErrorCode {
	return p.Code
}

func (p *ResultCode) GetPartID() nebula0.PartitionID {
	return p.PartID
}

var ResultCode_Leader_DEFAULT *nebula0.HostAddr

func (p *ResultCode) GetLeader() *nebula0.HostAddr {
	if !p.IsSetLeader() {
		return ResultCode_Leader_DEFAULT
	}
	return p.Leader
}
func (p *ResultCode) IsSetLeader() bool {
	return p.Leader != nil
}

func (p *ResultCode) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCode bool = false
	var issetPartID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetCode = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetPartID = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCode {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"))
	}
	if !issetPartID {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"))
	}
	return nil
}

func (p *ResultCode) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *ResultCode) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *ResultCode) ReadField3(iprot thrift.Protocol) error {
	p.Leader = nebula0.NewHostAddr()
	if err := p.Leader.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
	}
	return nil
}

func (p *ResultCode) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("ResultCode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultCode) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *ResultCode) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *ResultCode) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetLeader() {
		if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err)
		}
		if err := p.Leader.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err)
		}
	}
	return err
}

func (p *ResultCode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultCode(%+v)", *p)
}

// Attributes:
//  - Type
//  - Data
type EdgeData struct {
	Type nebula0.EdgeType `thrift:"type,1" db:"type" json:"type"`
	Data []byte           `thrift:"data,2" db:"data" json:"data"`
}

func NewEdgeData() *EdgeData {
	return &EdgeData{}
}

func (p *EdgeData) GetType() nebula0.EdgeType {
	return p.Type
}

func (p *EdgeData) GetData() []byte {
	return p.Data
}
func (p *EdgeData) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EdgeData) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.EdgeType(v)
		p.Type = temp
	}
	return nil
}

func (p *EdgeData) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *EdgeData) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EdgeData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EdgeData) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *EdgeData) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteBinary(p.Data); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *EdgeData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EdgeData(%+v)", *p)
}

// Attributes:
//  - TagID
//  - Data
type TagData struct {
	TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
	Data  []byte        `thrift:"data,2" db:"data" json:"data"`
}

func NewTagData() *TagData {
	return &TagData{}
}

func (p *TagData) GetTagID() nebula0.TagID {
	return p.TagID
}

func (p *TagData) GetData() []byte {
	return p.Data
}
func (p *TagData) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TagData) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.TagID(v)
		p.TagID = temp
	}
	return nil
}

func (p *TagData) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *TagData) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("TagData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TagData) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TagID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err)
	}
	return err
}

func (p *TagData) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteBinary(p.Data); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *TagData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagData(%+v)", *p)
}

// Attributes:
//  - VertexID
//  - TagData
//  - EdgeData
type VertexData struct {
	VertexID nebula0.VertexID `thrift:"vertex_id,1" db:"vertex_id" json:"vertex_id"`
	TagData  []*TagData       `thrift:"tag_data,2" db:"tag_data" json:"tag_data"`
	EdgeData []*EdgeData      `thrift:"edge_data,3" db:"edge_data" json:"edge_data"`
}

func NewVertexData() *VertexData {
	return &VertexData{}
}

func (p *VertexData) GetVertexID() nebula0.VertexID {
	return p.VertexID
}

func (p *VertexData) GetTagData() []*TagData {
	return p.TagData
}

func (p *VertexData) GetEdgeData() []*EdgeData {
	return p.EdgeData
}
func (p *VertexData) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VertexData) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.VertexID = temp
	}
	return nil
}

func (p *VertexData) ReadField2(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TagData, 0, size)
	p.TagData = tSlice
	for i := 0; i < size; i++ {
		_elem1 := NewTagData()
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.TagData = append(p.TagData, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VertexData) ReadField3(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EdgeData, 0, size)
	p.EdgeData = tSlice
	for i := 0; i < size; i++ {
		_elem2 := NewEdgeData()
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.EdgeData = append(p.EdgeData, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VertexData) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("VertexData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VertexData) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("vertex_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vertex_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.VertexID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vertex_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vertex_id: ", p), err)
	}
	return err
}

func (p *VertexData) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("tag_data", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagData)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TagData {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_data: ", p), err)
	}
	return err
}

func (p *VertexData) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("edge_data", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeData)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EdgeData {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_data: ", p), err)
	}
	return err
}

func (p *VertexData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VertexData(%+v)", *p)
}

// Attributes:
//  - FailedCodes
//  - LatencyInUs
type ResponseCommon struct {
	FailedCodes []*ResultCode `thrift:"failed_codes,1,required" db:"failed_codes" json:"failed_codes"`
	LatencyInUs int32         `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
}

func NewResponseCommon() *ResponseCommon {
	return &ResponseCommon{}
}

func (p *ResponseCommon) GetFailedCodes() []*ResultCode {
	return p.FailedCodes
}

func (p *ResponseCommon) GetLatencyInUs() int32 {
	return p.LatencyInUs
}
func (p *ResponseCommon) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetFailedCodes bool = false
	var issetLatencyInUs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetFailedCodes = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetLatencyInUs = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetFailedCodes {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FailedCodes is not set"))
	}
	if !issetLatencyInUs {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"))
	}
	return nil
}

func (p *ResponseCommon) ReadField1(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ResultCode, 0, size)
	p.FailedCodes = tSlice
	for i := 0; i < size; i++ {
		_elem3 := NewResultCode()
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.FailedCodes = append(p.FailedCodes, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ResponseCommon) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LatencyInUs = v
	}
	return nil
}

func (p *ResponseCommon) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("ResponseCommon"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResponseCommon) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("failed_codes", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failed_codes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedCodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.FailedCodes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failed_codes: ", p), err)
	}
	return err
}

func (p *ResponseCommon) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("latency_in_us", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LatencyInUs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err)
	}
	return err
}

func (p *ResponseCommon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseCommon(%+v)", *p)
}

// Attributes:
//  - Result_
//  - VertexSchema
//  - EdgeSchema
//  - Vertices
type QueryResponse struct {
	Result_      *ResponseCommon                      `thrift:"result,1,required" db:"result" json:"result"`
	VertexSchema map[nebula0.TagID]*nebula0.Schema    `thrift:"vertex_schema,2" db:"vertex_schema" json:"vertex_schema,omitempty"`
	EdgeSchema   map[nebula0.EdgeType]*nebula0.Schema `thrift:"edge_schema,3" db:"edge_schema" json:"edge_schema,omitempty"`
	Vertices     []*VertexData                        `thrift:"vertices,4" db:"vertices" json:"vertices,omitempty"`
}

func NewQueryResponse() *QueryResponse {
	return &QueryResponse{}
}

var QueryResponse_Result__DEFAULT *ResponseCommon

func (p *QueryResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return QueryResponse_Result__DEFAULT
	}
	return p.Result_
}

var QueryResponse_VertexSchema_DEFAULT map[nebula0.TagID]*nebula0.Schema

func (p *QueryResponse) GetVertexSchema() map[nebula0.TagID]*nebula0.Schema {
	return p.VertexSchema
}

var QueryResponse_EdgeSchema_DEFAULT map[nebula0.EdgeType]*nebula0.Schema

func (p *QueryResponse) GetEdgeSchema() map[nebula0.EdgeType]*nebula0.Schema {
	return p.EdgeSchema
}

var QueryResponse_Vertices_DEFAULT []*VertexData

func (p *QueryResponse) GetVertices() []*VertexData {
	return p.Vertices
}
func (p *QueryResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *QueryResponse) IsSetVertexSchema() bool {
	return p.VertexSchema != nil
}

func (p *QueryResponse) IsSetEdgeSchema() bool {
	return p.EdgeSchema != nil
}

func (p *QueryResponse) IsSetVertices() bool {
	return p.Vertices != nil
}

func (p *QueryResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *QueryResponse) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.TagID]*nebula0.Schema, size)
	p.VertexSchema = tMap
	for i := 0; i < size; i++ {
		var _key4 nebula0.TagID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.TagID(v)
			_key4 = temp
		}
		_val5 := nebula0.NewSchema()
		if err := _val5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val5), err)
		}
		p.VertexSchema[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *QueryResponse) ReadField3(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.EdgeType]*nebula0.Schema, size)
	p.EdgeSchema = tMap
	for i := 0; i < size; i++ {
		var _key6 nebula0.EdgeType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.EdgeType(v)
			_key6 = temp
		}
		_val7 := nebula0.NewSchema()
		if err := _val7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val7), err)
		}
		p.EdgeSchema[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *QueryResponse) ReadField4(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*VertexData, 0, size)
	p.Vertices = tSlice
	for i := 0; i < size; i++ {
		_elem8 := NewVertexData()
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Vertices = append(p.Vertices, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("QueryResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryResponse) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetVertexSchema() {
		if err := oprot.WriteFieldBegin("vertex_schema", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertex_schema: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.VertexSchema)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.VertexSchema {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertex_schema: ", p), err)
		}
	}
	return err
}

func (p *QueryResponse) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetEdgeSchema() {
		if err := oprot.WriteFieldBegin("edge_schema", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_schema: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.EdgeSchema)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.EdgeSchema {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_schema: ", p), err)
		}
	}
	return err
}

func (p *QueryResponse) writeField4(oprot thrift.Protocol) (err error) {
	if p.IsSetVertices() {
		if err := oprot.WriteFieldBegin("vertices", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vertices: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Vertices)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Vertices {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vertices: ", p), err)
		}
	}
	return err
}

func (p *QueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryResponse(%+v)", *p)
}

// Attributes:
//  - Result_
type ExecResponse struct {
	Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
}

func NewExecResponse() *ExecResponse {
	return &ExecResponse{}
}

var ExecResponse_Result__DEFAULT *ResponseCommon

func (p *ExecResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return ExecResponse_Result__DEFAULT
	}
	return p.Result_
}
func (p *ExecResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *ExecResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *ExecResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *ExecResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("ExecResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *ExecResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecResponse(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Data
type EdgePropResponse struct {
	Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
	Schema  *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
	Data    []byte          `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewEdgePropResponse() *EdgePropResponse {
	return &EdgePropResponse{}
}

var EdgePropResponse_Result__DEFAULT *ResponseCommon

func (p *EdgePropResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return EdgePropResponse_Result__DEFAULT
	}
	return p.Result_
}

var EdgePropResponse_Schema_DEFAULT *nebula0.Schema

func (p *EdgePropResponse) GetSchema() *nebula0.Schema {
	if !p.IsSetSchema() {
		return EdgePropResponse_Schema_DEFAULT
	}
	return p.Schema
}

var EdgePropResponse_Data_DEFAULT []byte

func (p *EdgePropResponse) GetData() []byte {
	return p.Data
}
func (p *EdgePropResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *EdgePropResponse) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *EdgePropResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *EdgePropResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *EdgePropResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *EdgePropResponse) ReadField2(iprot thrift.Protocol) error {
	p.Schema = nebula0.NewSchema()
	if err := p.Schema.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
	}
	return nil
}

func (p *EdgePropResponse) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *EdgePropResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EdgePropResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EdgePropResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *EdgePropResponse) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetSchema() {
		if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err)
		}
		if err := p.Schema.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err)
		}
	}
	return err
}

func (p *EdgePropResponse) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *EdgePropResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EdgePropResponse(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Data
type QueryStatsResponse struct {
	Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
	Schema  *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
	Data    []byte          `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewQueryStatsResponse() *QueryStatsResponse {
	return &QueryStatsResponse{}
}

var QueryStatsResponse_Result__DEFAULT *ResponseCommon

func (p *QueryStatsResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return QueryStatsResponse_Result__DEFAULT
	}
	return p.Result_
}

var QueryStatsResponse_Schema_DEFAULT *nebula0.Schema

func (p *QueryStatsResponse) GetSchema() *nebula0.Schema {
	if !p.IsSetSchema() {
		return QueryStatsResponse_Schema_DEFAULT
	}
	return p.Schema
}

var QueryStatsResponse_Data_DEFAULT []byte

func (p *QueryStatsResponse) GetData() []byte {
	return p.Data
}
func (p *QueryStatsResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *QueryStatsResponse) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *QueryStatsResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryStatsResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryStatsResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *QueryStatsResponse) ReadField2(iprot thrift.Protocol) error {
	p.Schema = nebula0.NewSchema()
	if err := p.Schema.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
	}
	return nil
}

func (p *QueryStatsResponse) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *QueryStatsResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("QueryStatsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryStatsResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryStatsResponse) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetSchema() {
		if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err)
		}
		if err := p.Schema.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err)
		}
	}
	return err
}

func (p *QueryStatsResponse) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *QueryStatsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryStatsResponse(%+v)", *p)
}

// Attributes:
//  - Result_
//  - EdgeKeys
type EdgeKeyResponse struct {
	Result_  *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
	EdgeKeys []*EdgeKey      `thrift:"edge_keys,2" db:"edge_keys" json:"edge_keys,omitempty"`
}

func NewEdgeKeyResponse() *EdgeKeyResponse {
	return &EdgeKeyResponse{}
}

var EdgeKeyResponse_Result__DEFAULT *ResponseCommon

func (p *EdgeKeyResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return EdgeKeyResponse_Result__DEFAULT
	}
	return p.Result_
}

var EdgeKeyResponse_EdgeKeys_DEFAULT []*EdgeKey

func (p *EdgeKeyResponse) GetEdgeKeys() []*EdgeKey {
	return p.EdgeKeys
}
func (p *EdgeKeyResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *EdgeKeyResponse) IsSetEdgeKeys() bool {
	return p.EdgeKeys != nil
}

func (p *EdgeKeyResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *EdgeKeyResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *EdgeKeyResponse) ReadField2(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EdgeKey, 0, size)
	p.EdgeKeys = tSlice
	for i := 0; i < size; i++ {
		_elem9 := NewEdgeKey()
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.EdgeKeys = append(p.EdgeKeys, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EdgeKeyResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EdgeKeyResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EdgeKeyResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *EdgeKeyResponse) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetEdgeKeys() {
		if err := oprot.WriteFieldBegin("edge_keys", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_keys: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeKeys)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.EdgeKeys {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_keys: ", p), err)
		}
	}
	return err
}

func (p *EdgeKeyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EdgeKeyResponse(%+v)", *p)
}

// Attributes:
//  - TagID
//  - Props
type Tag struct {
	TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
	Props []byte        `thrift:"props,2" db:"props" json:"props"`
}

func NewTag() *Tag {
	return &Tag{}
}

func (p *Tag) GetTagID() nebula0.TagID {
	return p.TagID
}

func (p *Tag) GetProps() []byte {
	return p.Props
}
func (p *Tag) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Tag) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.TagID(v)
		p.TagID = temp
	}
	return nil
}

func (p *Tag) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Props = v
	}
	return nil
}

func (p *Tag) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("Tag"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tag) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TagID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err)
	}
	return err
}

func (p *Tag) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("props", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err)
	}
	if err := oprot.WriteBinary(p.Props); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.props (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err)
	}
	return err
}

func (p *Tag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tag(%+v)", *p)
}

// Attributes:
//  - Id
//  - Tags
type Vertex struct {
	Id   nebula0.VertexID `thrift:"id,1" db:"id" json:"id"`
	Tags []*Tag           `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewVertex() *Vertex {
	return &Vertex{}
}

func (p *Vertex) GetId() nebula0.VertexID {
	return p.Id
}

func (p *Vertex) GetTags() []*Tag {
	return p.Tags
}
func (p *Vertex) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Vertex) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.Id = temp
	}
	return nil
}

func (p *Vertex) ReadField2(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Tag, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		_elem10 := NewTag()
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Tags = append(p.Tags, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Vertex) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("Vertex"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Vertex) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Vertex) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("tags", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tags {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err)
	}
	return err
}

func (p *Vertex) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Vertex(%+v)", *p)
}

// Attributes:
//  - Src
//  - EdgeType
//  - Ranking
//  - Dst
type EdgeKey struct {
	Src      nebula0.VertexID    `thrift:"src,1" db:"src" json:"src"`
	EdgeType nebula0.EdgeType    `thrift:"edge_type,2" db:"edge_type" json:"edge_type"`
	Ranking  nebula0.EdgeRanking `thrift:"ranking,3" db:"ranking" json:"ranking"`
	Dst      nebula0.VertexID    `thrift:"dst,4" db:"dst" json:"dst"`
}

func NewEdgeKey() *EdgeKey {
	return &EdgeKey{}
}

func (p *EdgeKey) GetSrc() nebula0.VertexID {
	return p.Src
}

func (p *EdgeKey) GetEdgeType() nebula0.EdgeType {
	return p.EdgeType
}

func (p *EdgeKey) GetRanking() nebula0.EdgeRanking {
	return p.Ranking
}

func (p *EdgeKey) GetDst() nebula0.VertexID {
	return p.Dst
}
func (p *EdgeKey) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EdgeKey) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.Src = temp
	}
	return nil
}

func (p *EdgeKey) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.EdgeType(v)
		p.EdgeType = temp
	}
	return nil
}

func (p *EdgeKey) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := nebula0.EdgeRanking(v)
		p.Ranking = temp
	}
	return nil
}

func (p *EdgeKey) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.Dst = temp
	}
	return nil
}

func (p *EdgeKey) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EdgeKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EdgeKey) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("src", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Src)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.src (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err)
	}
	return err
}

func (p *EdgeKey) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err)
	}
	return err
}

func (p *EdgeKey) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("ranking", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ranking: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ranking)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ranking (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ranking: ", p), err)
	}
	return err
}

func (p *EdgeKey) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("dst", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dst: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Dst)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dst (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dst: ", p), err)
	}
	return err
}

func (p *EdgeKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EdgeKey(%+v)", *p)
}

// Attributes:
//  - Key
//  - Props
type Edge struct {
	Key   *EdgeKey `thrift:"key,1" db:"key" json:"key"`
	Props []byte   `thrift:"props,2" db:"props" json:"props"`
}

func NewEdge() *Edge {
	return &Edge{}
}

var Edge_Key_DEFAULT *EdgeKey

func (p *Edge) GetKey() *EdgeKey {
	if !p.IsSetKey() {
		return Edge_Key_DEFAULT
	}
	return p.Key
}

func (p *Edge) GetProps() []byte {
	return p.Props
}
func (p *Edge) IsSetKey() bool {
	return p.Key != nil
}

func (p *Edge) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Edge) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewEdgeKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *Edge) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Props = v
	}
	return nil
}

func (p *Edge) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("Edge"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Edge) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *Edge) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("props", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err)
	}
	if err := oprot.WriteBinary(p.Props); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.props (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err)
	}
	return err
}

func (p *Edge) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Edge(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - EdgeTypes
//  - Filter
//  - ReturnColumns
type GetNeighborsRequest struct {
	SpaceID       nebula0.GraphSpaceID                       `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts         map[nebula0.PartitionID][]nebula0.VertexID `thrift:"parts,2" db:"parts" json:"parts"`
	EdgeTypes     []nebula0.EdgeType                         `thrift:"edge_types,3" db:"edge_types" json:"edge_types"`
	Filter        []byte                                     `thrift:"filter,4" db:"filter" json:"filter"`
	ReturnColumns []*PropDef                                 `thrift:"return_columns,5" db:"return_columns" json:"return_columns"`
}

func NewGetNeighborsRequest() *GetNeighborsRequest {
	return &GetNeighborsRequest{}
}

func (p *GetNeighborsRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *GetNeighborsRequest) GetParts() map[nebula0.PartitionID][]nebula0.VertexID {
	return p.Parts
}

func (p *GetNeighborsRequest) GetEdgeTypes() []nebula0.EdgeType {
	return p.EdgeTypes
}

func (p *GetNeighborsRequest) GetFilter() []byte {
	return p.Filter
}

func (p *GetNeighborsRequest) GetReturnColumns() []*PropDef {
	return p.ReturnColumns
}
func (p *GetNeighborsRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetNeighborsRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *GetNeighborsRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]nebula0.VertexID, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key11 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key11 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]nebula0.VertexID, 0, size)
		_val12 := tSlice
		for i := 0; i < size; i++ {
			var _elem13 nebula0.VertexID
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := nebula0.VertexID(v)
				_elem13 = temp
			}
			_val12 = append(_val12, _elem13)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GetNeighborsRequest) ReadField3(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]nebula0.EdgeType, 0, size)
	p.EdgeTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem14 nebula0.EdgeType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.EdgeType(v)
			_elem14 = temp
		}
		p.EdgeTypes = append(p.EdgeTypes, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetNeighborsRequest) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *GetNeighborsRequest) ReadField5(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PropDef, 0, size)
	p.ReturnColumns = tSlice
	for i := 0; i < size; i++ {
		_elem15 := NewPropDef()
		if err := _elem15.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.ReturnColumns = append(p.ReturnColumns, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetNeighborsRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GetNeighborsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetNeighborsRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *GetNeighborsRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *GetNeighborsRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("edge_types", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_types: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.EdgeTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EdgeTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_types: ", p), err)
	}
	return err
}

func (p *GetNeighborsRequest) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err)
	}
	if err := oprot.WriteBinary(p.Filter); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err)
	}
	return err
}

func (p *GetNeighborsRequest) writeField5(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:return_columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReturnColumns {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:return_columns: ", p), err)
	}
	return err
}

func (p *GetNeighborsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNeighborsRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnColumns
type VertexPropRequest struct {
	SpaceID       nebula0.GraphSpaceID                       `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts         map[nebula0.PartitionID][]nebula0.VertexID `thrift:"parts,2" db:"parts" json:"parts"`
	ReturnColumns []*PropDef                                 `thrift:"return_columns,3" db:"return_columns" json:"return_columns"`
}

func NewVertexPropRequest() *VertexPropRequest {
	return &VertexPropRequest{}
}

func (p *VertexPropRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *VertexPropRequest) GetParts() map[nebula0.PartitionID][]nebula0.VertexID {
	return p.Parts
}

func (p *VertexPropRequest) GetReturnColumns() []*PropDef {
	return p.ReturnColumns
}
func (p *VertexPropRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VertexPropRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *VertexPropRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]nebula0.VertexID, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key16 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key16 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]nebula0.VertexID, 0, size)
		_val17 := tSlice
		for i := 0; i < size; i++ {
			var _elem18 nebula0.VertexID
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := nebula0.VertexID(v)
				_elem18 = temp
			}
			_val17 = append(_val17, _elem18)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *VertexPropRequest) ReadField3(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PropDef, 0, size)
	p.ReturnColumns = tSlice
	for i := 0; i < size; i++ {
		_elem19 := NewPropDef()
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.ReturnColumns = append(p.ReturnColumns, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VertexPropRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("VertexPropRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VertexPropRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *VertexPropRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *VertexPropRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReturnColumns {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_columns: ", p), err)
	}
	return err
}

func (p *VertexPropRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VertexPropRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - EdgeType
//  - Filter
//  - ReturnColumns
type EdgePropRequest struct {
	SpaceID       nebula0.GraphSpaceID               `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts         map[nebula0.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
	EdgeType      nebula0.EdgeType                   `thrift:"edge_type,3" db:"edge_type" json:"edge_type"`
	Filter        []byte                             `thrift:"filter,4" db:"filter" json:"filter"`
	ReturnColumns []*PropDef                         `thrift:"return_columns,5" db:"return_columns" json:"return_columns"`
}

func NewEdgePropRequest() *EdgePropRequest {
	return &EdgePropRequest{}
}

func (p *EdgePropRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *EdgePropRequest) GetParts() map[nebula0.PartitionID][]*EdgeKey {
	return p.Parts
}

func (p *EdgePropRequest) GetEdgeType() nebula0.EdgeType {
	return p.EdgeType
}

func (p *EdgePropRequest) GetFilter() []byte {
	return p.Filter
}

func (p *EdgePropRequest) GetReturnColumns() []*PropDef {
	return p.ReturnColumns
}
func (p *EdgePropRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EdgePropRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *EdgePropRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]*EdgeKey, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key20 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key20 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*EdgeKey, 0, size)
		_val21 := tSlice
		for i := 0; i < size; i++ {
			_elem22 := NewEdgeKey()
			if err := _elem22.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
			}
			_val21 = append(_val21, _elem22)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *EdgePropRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := nebula0.EdgeType(v)
		p.EdgeType = temp
	}
	return nil
}

func (p *EdgePropRequest) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *EdgePropRequest) ReadField5(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PropDef, 0, size)
	p.ReturnColumns = tSlice
	for i := 0; i < size; i++ {
		_elem23 := NewPropDef()
		if err := _elem23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
		}
		p.ReturnColumns = append(p.ReturnColumns, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EdgePropRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EdgePropRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EdgePropRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *EdgePropRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *EdgePropRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.edge_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_type: ", p), err)
	}
	return err
}

func (p *EdgePropRequest) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err)
	}
	if err := oprot.WriteBinary(p.Filter); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err)
	}
	return err
}

func (p *EdgePropRequest) writeField5(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:return_columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReturnColumns {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:return_columns: ", p), err)
	}
	return err
}

func (p *EdgePropRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EdgePropRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Overwritable
type AddVerticesRequest struct {
	SpaceID      nebula0.GraphSpaceID              `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts        map[nebula0.PartitionID][]*Vertex `thrift:"parts,2" db:"parts" json:"parts"`
	Overwritable bool                              `thrift:"overwritable,3" db:"overwritable" json:"overwritable"`
}

func NewAddVerticesRequest() *AddVerticesRequest {
	return &AddVerticesRequest{}
}

func (p *AddVerticesRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *AddVerticesRequest) GetParts() map[nebula0.PartitionID][]*Vertex {
	return p.Parts
}

func (p *AddVerticesRequest) GetOverwritable() bool {
	return p.Overwritable
}
func (p *AddVerticesRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddVerticesRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *AddVerticesRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]*Vertex, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key24 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key24 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*Vertex, 0, size)
		_val25 := tSlice
		for i := 0; i < size; i++ {
			_elem26 := NewVertex()
			if err := _elem26.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
			}
			_val25 = append(_val25, _elem26)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AddVerticesRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Overwritable = v
	}
	return nil
}

func (p *AddVerticesRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("AddVerticesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddVerticesRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *AddVerticesRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *AddVerticesRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("overwritable", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:overwritable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Overwritable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.overwritable (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:overwritable: ", p), err)
	}
	return err
}

func (p *AddVerticesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddVerticesRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Overwritable
type AddEdgesRequest struct {
	SpaceID      nebula0.GraphSpaceID            `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts        map[nebula0.PartitionID][]*Edge `thrift:"parts,2" db:"parts" json:"parts"`
	Overwritable bool                            `thrift:"overwritable,3" db:"overwritable" json:"overwritable"`
}

func NewAddEdgesRequest() *AddEdgesRequest {
	return &AddEdgesRequest{}
}

func (p *AddEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *AddEdgesRequest) GetParts() map[nebula0.PartitionID][]*Edge {
	return p.Parts
}

func (p *AddEdgesRequest) GetOverwritable() bool {
	return p.Overwritable
}
func (p *AddEdgesRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddEdgesRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *AddEdgesRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]*Edge, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key27 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key27 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*Edge, 0, size)
		_val28 := tSlice
		for i := 0; i < size; i++ {
			_elem29 := NewEdge()
			if err := _elem29.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
			}
			_val28 = append(_val28, _elem29)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AddEdgesRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Overwritable = v
	}
	return nil
}

func (p *AddEdgesRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("AddEdgesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *AddEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *AddEdgesRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("overwritable", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:overwritable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Overwritable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.overwritable (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:overwritable: ", p), err)
	}
	return err
}

func (p *AddEdgesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddEdgesRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Vid
type EdgeKeyRequest struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	Vid     nebula0.VertexID     `thrift:"vid,3" db:"vid" json:"vid"`
}

func NewEdgeKeyRequest() *EdgeKeyRequest {
	return &EdgeKeyRequest{}
}

func (p *EdgeKeyRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *EdgeKeyRequest) GetPartID() nebula0.PartitionID {
	return p.PartID
}

func (p *EdgeKeyRequest) GetVid() nebula0.VertexID {
	return p.Vid
}
func (p *EdgeKeyRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EdgeKeyRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *EdgeKeyRequest) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *EdgeKeyRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.Vid = temp
	}
	return nil
}

func (p *EdgeKeyRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EdgeKeyRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EdgeKeyRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *EdgeKeyRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *EdgeKeyRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("vid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Vid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vid: ", p), err)
	}
	return err
}

func (p *EdgeKeyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EdgeKeyRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Vid
type DeleteVertexRequest struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	Vid     nebula0.VertexID     `thrift:"vid,3" db:"vid" json:"vid"`
}

func NewDeleteVertexRequest() *DeleteVertexRequest {
	return &DeleteVertexRequest{}
}

func (p *DeleteVertexRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *DeleteVertexRequest) GetPartID() nebula0.PartitionID {
	return p.PartID
}

func (p *DeleteVertexRequest) GetVid() nebula0.VertexID {
	return p.Vid
}
func (p *DeleteVertexRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteVertexRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *DeleteVertexRequest) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *DeleteVertexRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.Vid = temp
	}
	return nil
}

func (p *DeleteVertexRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("DeleteVertexRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteVertexRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *DeleteVertexRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *DeleteVertexRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("vid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Vid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vid: ", p), err)
	}
	return err
}

func (p *DeleteVertexRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVertexRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type DeleteEdgesRequest struct {
	SpaceID nebula0.GraphSpaceID               `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewDeleteEdgesRequest() *DeleteEdgesRequest {
	return &DeleteEdgesRequest{}
}

func (p *DeleteEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *DeleteEdgesRequest) GetParts() map[nebula0.PartitionID][]*EdgeKey {
	return p.Parts
}
func (p *DeleteEdgesRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteEdgesRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *DeleteEdgesRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]*EdgeKey, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key30 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key30 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*EdgeKey, 0, size)
		_val31 := tSlice
		for i := 0; i < size; i++ {
			_elem32 := NewEdgeKey()
			if err := _elem32.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
			}
			_val31 = append(_val31, _elem32)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *DeleteEdgesRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("DeleteEdgesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *DeleteEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *DeleteEdgesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEdgesRequest(%+v)", *p)
}

// Attributes:
//  - Result_
type AdminExecResp struct {
	Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
}

func NewAdminExecResp() *AdminExecResp {
	return &AdminExecResp{}
}

var AdminExecResp_Result__DEFAULT *ResponseCommon

func (p *AdminExecResp) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return AdminExecResp_Result__DEFAULT
	}
	return p.Result_
}
func (p *AdminExecResp) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *AdminExecResp) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *AdminExecResp) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *AdminExecResp) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("AdminExecResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminExecResp) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *AdminExecResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminExecResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - AsLearner
type AddPartReq struct {
	SpaceID   nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID    nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	AsLearner bool                 `thrift:"as_learner,3" db:"as_learner" json:"as_learner"`
}

func NewAddPartReq() *AddPartReq {
	return &AddPartReq{}
}

func (p *AddPartReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *AddPartReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}

func (p *AddPartReq) GetAsLearner() bool {
	return p.AsLearner
}
func (p *AddPartReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddPartReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *AddPartReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *AddPartReq) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AsLearner = v
	}
	return nil
}

func (p *AddPartReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("AddPartReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddPartReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *AddPartReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *AddPartReq) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("as_learner", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:as_learner: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AsLearner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.as_learner (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:as_learner: ", p), err)
	}
	return err
}

func (p *AddPartReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
type RemovePartReq struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
}

func NewRemovePartReq() *RemovePartReq {
	return &RemovePartReq{}
}

func (p *RemovePartReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *RemovePartReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}
func (p *RemovePartReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemovePartReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *RemovePartReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *RemovePartReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("RemovePartReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemovePartReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *RemovePartReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *RemovePartReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemovePartReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Peer
//  - Add
type MemberChangeReq struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	Peer    *nebula0.HostAddr    `thrift:"peer,3" db:"peer" json:"peer"`
	Add     bool                 `thrift:"add,4" db:"add" json:"add"`
}

func NewMemberChangeReq() *MemberChangeReq {
	return &MemberChangeReq{}
}

func (p *MemberChangeReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *MemberChangeReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}

var MemberChangeReq_Peer_DEFAULT *nebula0.HostAddr

func (p *MemberChangeReq) GetPeer() *nebula0.HostAddr {
	if !p.IsSetPeer() {
		return MemberChangeReq_Peer_DEFAULT
	}
	return p.Peer
}

func (p *MemberChangeReq) GetAdd() bool {
	return p.Add
}
func (p *MemberChangeReq) IsSetPeer() bool {
	return p.Peer != nil
}

func (p *MemberChangeReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberChangeReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *MemberChangeReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *MemberChangeReq) ReadField3(iprot thrift.Protocol) error {
	p.Peer = nebula0.NewHostAddr()
	if err := p.Peer.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Peer), err)
	}
	return nil
}

func (p *MemberChangeReq) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Add = v
	}
	return nil
}

func (p *MemberChangeReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("MemberChangeReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberChangeReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *MemberChangeReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *MemberChangeReq) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("peer", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peer: ", p), err)
	}
	if err := p.Peer.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Peer), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peer: ", p), err)
	}
	return err
}

func (p *MemberChangeReq) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("add", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:add: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Add)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.add (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:add: ", p), err)
	}
	return err
}

func (p *MemberChangeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberChangeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - NewLeader_
type TransLeaderReq struct {
	SpaceID    nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID     nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	NewLeader_ *nebula0.HostAddr    `thrift:"new_leader,3" db:"new_leader" json:"new_leader"`
}

func NewTransLeaderReq() *TransLeaderReq {
	return &TransLeaderReq{}
}

func (p *TransLeaderReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *TransLeaderReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}

var TransLeaderReq_NewLeader__DEFAULT *nebula0.HostAddr

func (p *TransLeaderReq) GetNewLeader_() *nebula0.HostAddr {
	if !p.IsSetNewLeader_() {
		return TransLeaderReq_NewLeader__DEFAULT
	}
	return p.NewLeader_
}
func (p *TransLeaderReq) IsSetNewLeader_() bool {
	return p.NewLeader_ != nil
}

func (p *TransLeaderReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TransLeaderReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *TransLeaderReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *TransLeaderReq) ReadField3(iprot thrift.Protocol) error {
	p.NewLeader_ = nebula0.NewHostAddr()
	if err := p.NewLeader_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewLeader_), err)
	}
	return nil
}

func (p *TransLeaderReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("TransLeaderReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TransLeaderReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *TransLeaderReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *TransLeaderReq) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("new_leader", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_leader: ", p), err)
	}
	if err := p.NewLeader_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewLeader_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_leader: ", p), err)
	}
	return err
}

func (p *TransLeaderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TransLeaderReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Learner
type AddLearnerReq struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	Learner *nebula0.HostAddr    `thrift:"learner,3" db:"learner" json:"learner"`
}

func NewAddLearnerReq() *AddLearnerReq {
	return &AddLearnerReq{}
}

func (p *AddLearnerReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *AddLearnerReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}

var AddLearnerReq_Learner_DEFAULT *nebula0.HostAddr

func (p *AddLearnerReq) GetLearner() *nebula0.HostAddr {
	if !p.IsSetLearner() {
		return AddLearnerReq_Learner_DEFAULT
	}
	return p.Learner
}
func (p *AddLearnerReq) IsSetLearner() bool {
	return p.Learner != nil
}

func (p *AddLearnerReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddLearnerReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *AddLearnerReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *AddLearnerReq) ReadField3(iprot thrift.Protocol) error {
	p.Learner = nebula0.NewHostAddr()
	if err := p.Learner.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Learner), err)
	}
	return nil
}

func (p *AddLearnerReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("AddLearnerReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddLearnerReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *AddLearnerReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *AddLearnerReq) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("learner", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:learner: ", p), err)
	}
	if err := p.Learner.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Learner), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:learner: ", p), err)
	}
	return err
}

func (p *AddLearnerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddLearnerReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Target
type CatchUpDataReq struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	Target  *nebula0.HostAddr    `thrift:"target,3" db:"target" json:"target"`
}

func NewCatchUpDataReq() *CatchUpDataReq {
	return &CatchUpDataReq{}
}

func (p *CatchUpDataReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *CatchUpDataReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}

var CatchUpDataReq_Target_DEFAULT *nebula0.HostAddr

func (p *CatchUpDataReq) GetTarget() *nebula0.HostAddr {
	if !p.IsSetTarget() {
		return CatchUpDataReq_Target_DEFAULT
	}
	return p.Target
}
func (p *CatchUpDataReq) IsSetTarget() bool {
	return p.Target != nil
}

func (p *CatchUpDataReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CatchUpDataReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *CatchUpDataReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *CatchUpDataReq) ReadField3(iprot thrift.Protocol) error {
	p.Target = nebula0.NewHostAddr()
	if err := p.Target.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
	}
	return nil
}

func (p *CatchUpDataReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("CatchUpDataReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CatchUpDataReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *CatchUpDataReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *CatchUpDataReq) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("target", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err)
	}
	if err := p.Target.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err)
	}
	return err
}

func (p *CatchUpDataReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CatchUpDataReq(%+v)", *p)
}

type GetLeaderReq struct {
}

func NewGetLeaderReq() *GetLeaderReq {
	return &GetLeaderReq{}
}

func (p *GetLeaderReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetLeaderReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GetLeaderReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetLeaderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLeaderReq(%+v)", *p)
}

// Attributes:
//  - Result_
//  - LeaderParts
type GetLeaderResp struct {
	Result_     *ResponseCommon                                `thrift:"result,1,required" db:"result" json:"result"`
	LeaderParts map[nebula0.GraphSpaceID][]nebula0.PartitionID `thrift:"leader_parts,2" db:"leader_parts" json:"leader_parts"`
}

func NewGetLeaderResp() *GetLeaderResp {
	return &GetLeaderResp{}
}

var GetLeaderResp_Result__DEFAULT *ResponseCommon

func (p *GetLeaderResp) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return GetLeaderResp_Result__DEFAULT
	}
	return p.Result_
}

func (p *GetLeaderResp) GetLeaderParts() map[nebula0.GraphSpaceID][]nebula0.PartitionID {
	return p.LeaderParts
}
func (p *GetLeaderResp) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *GetLeaderResp) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *GetLeaderResp) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *GetLeaderResp) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.GraphSpaceID][]nebula0.PartitionID, size)
	p.LeaderParts = tMap
	for i := 0; i < size; i++ {
		var _key33 nebula0.GraphSpaceID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.GraphSpaceID(v)
			_key33 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]nebula0.PartitionID, 0, size)
		_val34 := tSlice
		for i := 0; i < size; i++ {
			var _elem35 nebula0.PartitionID
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := nebula0.PartitionID(v)
				_elem35 = temp
			}
			_val34 = append(_val34, _elem35)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.LeaderParts[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GetLeaderResp) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GetLeaderResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetLeaderResp) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *GetLeaderResp) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("leader_parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader_parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.LeaderParts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.LeaderParts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader_parts: ", p), err)
	}
	return err
}

func (p *GetLeaderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLeaderResp(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Data
//  - Upsert
type UpdateResponse struct {
	Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
	Schema  *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
	Data    []byte          `thrift:"data,3" db:"data" json:"data,omitempty"`
	Upsert  bool            `thrift:"upsert,4" db:"upsert" json:"upsert,omitempty"`
}

func NewUpdateResponse() *UpdateResponse {
	return &UpdateResponse{}
}

var UpdateResponse_Result__DEFAULT *ResponseCommon

func (p *UpdateResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return UpdateResponse_Result__DEFAULT
	}
	return p.Result_
}

var UpdateResponse_Schema_DEFAULT *nebula0.Schema

func (p *UpdateResponse) GetSchema() *nebula0.Schema {
	if !p.IsSetSchema() {
		return UpdateResponse_Schema_DEFAULT
	}
	return p.Schema
}

var UpdateResponse_Data_DEFAULT []byte

func (p *UpdateResponse) GetData() []byte {
	return p.Data
}

var UpdateResponse_Upsert_DEFAULT bool = false

func (p *UpdateResponse) GetUpsert() bool {
	return p.Upsert
}
func (p *UpdateResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *UpdateResponse) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *UpdateResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UpdateResponse) IsSetUpsert() bool {
	return p.Upsert != UpdateResponse_Upsert_DEFAULT
}

func (p *UpdateResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *UpdateResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *UpdateResponse) ReadField2(iprot thrift.Protocol) error {
	p.Schema = nebula0.NewSchema()
	if err := p.Schema.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
	}
	return nil
}

func (p *UpdateResponse) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *UpdateResponse) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Upsert = v
	}
	return nil
}

func (p *UpdateResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("UpdateResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *UpdateResponse) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetSchema() {
		if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err)
		}
		if err := p.Schema.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err)
		}
	}
	return err
}

func (p *UpdateResponse) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *UpdateResponse) writeField4(oprot thrift.Protocol) (err error) {
	if p.IsSetUpsert() {
		if err := oprot.WriteFieldBegin("upsert", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:upsert: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.Upsert)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.upsert (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:upsert: ", p), err)
		}
	}
	return err
}

func (p *UpdateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

// Attributes:
//  - Name
//  - Prop
//  - Value
type UpdateItem struct {
	Name  []byte `thrift:"name,1,required" db:"name" json:"name"`
	Prop  []byte `thrift:"prop,2,required" db:"prop" json:"prop"`
	Value []byte `thrift:"value,3,required" db:"value" json:"value"`
}

func NewUpdateItem() *UpdateItem {
	return &UpdateItem{}
}

func (p *UpdateItem) GetName() []byte {
	return p.Name
}

func (p *UpdateItem) GetProp() []byte {
	return p.Prop
}

func (p *UpdateItem) GetValue() []byte {
	return p.Value
}
func (p *UpdateItem) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetProp bool = false
	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetName = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetProp = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetValue = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetProp {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Prop is not set"))
	}
	if !issetValue {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *UpdateItem) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *UpdateItem) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Prop = v
	}
	return nil
}

func (p *UpdateItem) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *UpdateItem) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("UpdateItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateItem) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteBinary(p.Name); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *UpdateItem) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("prop", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prop: ", p), err)
	}
	if err := oprot.WriteBinary(p.Prop); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prop (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prop: ", p), err)
	}
	return err
}

func (p *UpdateItem) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *UpdateItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateItem(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - VertexID
//  - PartID
//  - Filter
//  - UpdateItems
//  - ReturnColumns
//  - Insertable
type UpdateVertexRequest struct {
	SpaceID       nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	VertexID      nebula0.VertexID     `thrift:"vertex_id,2" db:"vertex_id" json:"vertex_id"`
	PartID        nebula0.PartitionID  `thrift:"part_id,3" db:"part_id" json:"part_id"`
	Filter        []byte               `thrift:"filter,4" db:"filter" json:"filter"`
	UpdateItems   []*UpdateItem        `thrift:"update_items,5" db:"update_items" json:"update_items"`
	ReturnColumns [][]byte             `thrift:"return_columns,6" db:"return_columns" json:"return_columns"`
	Insertable    bool                 `thrift:"insertable,7" db:"insertable" json:"insertable"`
}

func NewUpdateVertexRequest() *UpdateVertexRequest {
	return &UpdateVertexRequest{}
}

func (p *UpdateVertexRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *UpdateVertexRequest) GetVertexID() nebula0.VertexID {
	return p.VertexID
}

func (p *UpdateVertexRequest) GetPartID() nebula0.PartitionID {
	return p.PartID
}

func (p *UpdateVertexRequest) GetFilter() []byte {
	return p.Filter
}

func (p *UpdateVertexRequest) GetUpdateItems() []*UpdateItem {
	return p.UpdateItems
}

func (p *UpdateVertexRequest) GetReturnColumns() [][]byte {
	return p.ReturnColumns
}

func (p *UpdateVertexRequest) GetInsertable() bool {
	return p.Insertable
}
func (p *UpdateVertexRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.VertexID = temp
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField5(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UpdateItem, 0, size)
	p.UpdateItems = tSlice
	for i := 0; i < size; i++ {
		_elem36 := NewUpdateItem()
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.UpdateItems = append(p.UpdateItems, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField6(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ReturnColumns = tSlice
	for i := 0; i < size; i++ {
		var _elem37 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem37 = v
		}
		p.ReturnColumns = append(p.ReturnColumns, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateVertexRequest) ReadField7(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Insertable = v
	}
	return nil
}

func (p *UpdateVertexRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("UpdateVertexRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateVertexRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("vertex_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertex_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.VertexID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vertex_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertex_id: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err)
	}
	if err := oprot.WriteBinary(p.Filter); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) writeField5(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("update_items", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UpdateItems)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UpdateItems {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_items: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) writeField6(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnColumns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReturnColumns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_columns: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) writeField7(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("insertable", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:insertable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Insertable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.insertable (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:insertable: ", p), err)
	}
	return err
}

func (p *UpdateVertexRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVertexRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeKey
//  - PartID
//  - Filter
//  - UpdateItems
//  - ReturnColumns
//  - Insertable
type UpdateEdgeRequest struct {
	SpaceID       nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	EdgeKey       *EdgeKey             `thrift:"edge_key,2" db:"edge_key" json:"edge_key"`
	PartID        nebula0.PartitionID  `thrift:"part_id,3" db:"part_id" json:"part_id"`
	Filter        []byte               `thrift:"filter,4" db:"filter" json:"filter"`
	UpdateItems   []*UpdateItem        `thrift:"update_items,5" db:"update_items" json:"update_items"`
	ReturnColumns [][]byte             `thrift:"return_columns,6" db:"return_columns" json:"return_columns"`
	Insertable    bool                 `thrift:"insertable,7" db:"insertable" json:"insertable"`
}

func NewUpdateEdgeRequest() *UpdateEdgeRequest {
	return &UpdateEdgeRequest{}
}

func (p *UpdateEdgeRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

var UpdateEdgeRequest_EdgeKey_DEFAULT *EdgeKey

func (p *UpdateEdgeRequest) GetEdgeKey() *EdgeKey {
	if !p.IsSetEdgeKey() {
		return UpdateEdgeRequest_EdgeKey_DEFAULT
	}
	return p.EdgeKey
}

func (p *UpdateEdgeRequest) GetPartID() nebula0.PartitionID {
	return p.PartID
}

func (p *UpdateEdgeRequest) GetFilter() []byte {
	return p.Filter
}

func (p *UpdateEdgeRequest) GetUpdateItems() []*UpdateItem {
	return p.UpdateItems
}

func (p *UpdateEdgeRequest) GetReturnColumns() [][]byte {
	return p.ReturnColumns
}

func (p *UpdateEdgeRequest) GetInsertable() bool {
	return p.Insertable
}
func (p *UpdateEdgeRequest) IsSetEdgeKey() bool {
	return p.EdgeKey != nil
}

func (p *UpdateEdgeRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField2(iprot thrift.Protocol) error {
	p.EdgeKey = NewEdgeKey()
	if err := p.EdgeKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EdgeKey), err)
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField5(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UpdateItem, 0, size)
	p.UpdateItems = tSlice
	for i := 0; i < size; i++ {
		_elem38 := NewUpdateItem()
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.UpdateItems = append(p.UpdateItems, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField6(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ReturnColumns = tSlice
	for i := 0; i < size; i++ {
		var _elem39 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem39 = v
		}
		p.ReturnColumns = append(p.ReturnColumns, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateEdgeRequest) ReadField7(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Insertable = v
	}
	return nil
}

func (p *UpdateEdgeRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("UpdateEdgeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateEdgeRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("edge_key", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_key: ", p), err)
	}
	if err := p.EdgeKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EdgeKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_key: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err)
	}
	if err := oprot.WriteBinary(p.Filter); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) writeField5(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("update_items", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UpdateItems)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UpdateItems {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_items: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) writeField6(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnColumns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReturnColumns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_columns: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) writeField7(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("insertable", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:insertable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Insertable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.insertable (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:insertable: ", p), err)
	}
	return err
}

func (p *UpdateEdgeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEdgeRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type PutRequest struct {
	SpaceID nebula0.GraphSpaceID                    `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID][]*nebula0.Pair `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewPutRequest() *PutRequest {
	return &PutRequest{}
}

func (p *PutRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *PutRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Pair {
	return p.Parts
}
func (p *PutRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *PutRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]*nebula0.Pair, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key40 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key40 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*nebula0.Pair, 0, size)
		_val41 := tSlice
		for i := 0; i < size; i++ {
			_elem42 := nebula0.NewPair()
			if err := _elem42.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
			}
			_val41 = append(_val41, _elem42)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key40] = _val41
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PutRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("PutRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *PutRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *PutRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type RemoveRequest struct {
	SpaceID nebula0.GraphSpaceID             `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID][]string `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewRemoveRequest() *RemoveRequest {
	return &RemoveRequest{}
}

func (p *RemoveRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *RemoveRequest) GetParts() map[nebula0.PartitionID][]string {
	return p.Parts
}
func (p *RemoveRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *RemoveRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]string, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key43 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key43 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val44 := tSlice
		for i := 0; i < size; i++ {
			var _elem45 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem45 = v
			}
			_val44 = append(_val44, _elem45)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RemoveRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("RemoveRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *RemoveRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *RemoveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type RemoveRangeRequest struct {
	SpaceID nebula0.GraphSpaceID                    `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID][]*nebula0.Pair `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewRemoveRangeRequest() *RemoveRangeRequest {
	return &RemoveRangeRequest{}
}

func (p *RemoveRangeRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *RemoveRangeRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Pair {
	return p.Parts
}
func (p *RemoveRangeRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveRangeRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *RemoveRangeRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]*nebula0.Pair, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key46 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key46 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*nebula0.Pair, 0, size)
		_val47 := tSlice
		for i := 0; i < size; i++ {
			_elem48 := nebula0.NewPair()
			if err := _elem48.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
			}
			_val47 = append(_val47, _elem48)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key46] = _val47
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RemoveRangeRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("RemoveRangeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveRangeRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *RemoveRangeRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *RemoveRangeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveRangeRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type GetRequest struct {
	SpaceID nebula0.GraphSpaceID             `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID][]string `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewGetRequest() *GetRequest {
	return &GetRequest{}
}

func (p *GetRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *GetRequest) GetParts() map[nebula0.PartitionID][]string {
	return p.Parts
}
func (p *GetRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *GetRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID][]string, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key49 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key49 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val50 := tSlice
		for i := 0; i < size; i++ {
			var _elem51 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem51 = v
			}
			_val50 = append(_val50, _elem51)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Parts[_key49] = _val50
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GetRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GetRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *GetRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *GetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type PrefixRequest struct {
	SpaceID nebula0.GraphSpaceID           `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID]string `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewPrefixRequest() *PrefixRequest {
	return &PrefixRequest{}
}

func (p *PrefixRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *PrefixRequest) GetParts() map[nebula0.PartitionID]string {
	return p.Parts
}
func (p *PrefixRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PrefixRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *PrefixRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID]string, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key52 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key52 = temp
		}
		var _val53 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val53 = v
		}
		p.Parts[_key52] = _val53
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PrefixRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("PrefixRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PrefixRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *PrefixRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *PrefixRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrefixRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type ScanRequest struct {
	SpaceID nebula0.GraphSpaceID                  `thrift:"space_id,1" db:"space_id" json:"space_id"`
	Parts   map[nebula0.PartitionID]*nebula0.Pair `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewScanRequest() *ScanRequest {
	return &ScanRequest{}
}

func (p *ScanRequest) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *ScanRequest) GetParts() map[nebula0.PartitionID]*nebula0.Pair {
	return p.Parts
}
func (p *ScanRequest) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScanRequest) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *ScanRequest) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[nebula0.PartitionID]*nebula0.Pair, size)
	p.Parts = tMap
	for i := 0; i < size; i++ {
		var _key54 nebula0.PartitionID
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := nebula0.PartitionID(v)
			_key54 = temp
		}
		_val55 := nebula0.NewPair()
		if err := _val55.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val55), err)
		}
		p.Parts[_key54] = _val55
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ScanRequest) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("ScanRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScanRequest) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *ScanRequest) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Parts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Parts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err)
	}
	return err
}

func (p *ScanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanRequest(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Values
type GeneralResponse struct {
	Result_ *ResponseCommon   `thrift:"result,1,required" db:"result" json:"result"`
	Values  map[string]string `thrift:"values,2" db:"values" json:"values"`
}

func NewGeneralResponse() *GeneralResponse {
	return &GeneralResponse{}
}

var GeneralResponse_Result__DEFAULT *ResponseCommon

func (p *GeneralResponse) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return GeneralResponse_Result__DEFAULT
	}
	return p.Result_
}

func (p *GeneralResponse) GetValues() map[string]string {
	return p.Values
}
func (p *GeneralResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *GeneralResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *GeneralResponse) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *GeneralResponse) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Values = tMap
	for i := 0; i < size; i++ {
		var _key56 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key56 = v
		}
		var _val57 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val57 = v
		}
		p.Values[_key56] = _val57
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GeneralResponse) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GeneralResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeneralResponse) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *GeneralResponse) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Values)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Values {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err)
	}
	return err
}

func (p *GeneralResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralResponse(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Name
type GetUUIDReq struct {
	SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
	PartID  nebula0.PartitionID  `thrift:"part_id,2" db:"part_id" json:"part_id"`
	Name    string               `thrift:"name,3" db:"name" json:"name"`
}

func NewGetUUIDReq() *GetUUIDReq {
	return &GetUUIDReq{}
}

func (p *GetUUIDReq) GetSpaceID() nebula0.GraphSpaceID {
	return p.SpaceID
}

func (p *GetUUIDReq) GetPartID() nebula0.PartitionID {
	return p.PartID
}

func (p *GetUUIDReq) GetName() string {
	return p.Name
}
func (p *GetUUIDReq) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetUUIDReq) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := nebula0.GraphSpaceID(v)
		p.SpaceID = temp
	}
	return nil
}

func (p *GetUUIDReq) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.PartitionID(v)
		p.PartID = temp
	}
	return nil
}

func (p *GetUUIDReq) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetUUIDReq) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GetUUIDReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUUIDReq) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err)
	}
	return err
}

func (p *GetUUIDReq) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err)
	}
	return err
}

func (p *GetUUIDReq) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *GetUUIDReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUUIDReq(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Id
type GetUUIDResp struct {
	Result_ *ResponseCommon  `thrift:"result,1,required" db:"result" json:"result"`
	Id      nebula0.VertexID `thrift:"id,2" db:"id" json:"id"`
}

func NewGetUUIDResp() *GetUUIDResp {
	return &GetUUIDResp{}
}

var GetUUIDResp_Result__DEFAULT *ResponseCommon

func (p *GetUUIDResp) GetResult_() *ResponseCommon {
	if !p.IsSetResult_() {
		return GetUUIDResp_Result__DEFAULT
	}
	return p.Result_
}

func (p *GetUUIDResp) GetId() nebula0.VertexID {
	return p.Id
}
func (p *GetUUIDResp) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *GetUUIDResp) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetResult_ = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *GetUUIDResp) ReadField1(iprot thrift.Protocol) error {
	p.Result_ = NewResponseCommon()
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *GetUUIDResp) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := nebula0.VertexID(v)
		p.Id = temp
	}
	return nil
}

func (p *GetUUIDResp) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("GetUUIDResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUUIDResp) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *GetUUIDResp) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *GetUUIDResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUUIDResp(%+v)", *p)
}
