// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package storage

import (
	"bytes"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/gen-go/nebula"
	"sync"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__

type StorageService interface {
	// Parameters:
	//  - Req
	GetBound(req *GetNeighborsRequest) (r *QueryResponse, err error)
	// Parameters:
	//  - Req
	BoundStats(req *GetNeighborsRequest) (r *QueryStatsResponse, err error)
	// Parameters:
	//  - Req
	GetProps(req *VertexPropRequest) (r *QueryResponse, err error)
	// Parameters:
	//  - Req
	GetEdgeProps(req *EdgePropRequest) (r *EdgePropResponse, err error)
	// Parameters:
	//  - Req
	AddVertices(req *AddVerticesRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	AddEdges(req *AddEdgesRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	GetEdgeKeys(req *EdgeKeyRequest) (r *EdgeKeyResponse, err error)
	// Parameters:
	//  - Req
	DeleteEdges(req *DeleteEdgesRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	DeleteVertex(req *DeleteVertexRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	UpdateVertex(req *UpdateVertexRequest) (r *UpdateResponse, err error)
	// Parameters:
	//  - Req
	UpdateEdge(req *UpdateEdgeRequest) (r *UpdateResponse, err error)
	// Parameters:
	//  - Req
	TransLeader(req *TransLeaderReq) (r *AdminExecResp, err error)
	// Parameters:
	//  - Req
	AddPart(req *AddPartReq) (r *AdminExecResp, err error)
	// Parameters:
	//  - Req
	AddLearner(req *AddLearnerReq) (r *AdminExecResp, err error)
	// Parameters:
	//  - Req
	WaitingForCatchUpData(req *CatchUpDataReq) (r *AdminExecResp, err error)
	// Parameters:
	//  - Req
	RemovePart(req *RemovePartReq) (r *AdminExecResp, err error)
	// Parameters:
	//  - Req
	MemberChange(req *MemberChangeReq) (r *AdminExecResp, err error)
	// Parameters:
	//  - Req
	GetLeaderPart(req *GetLeaderReq) (r *GetLeaderResp, err error)
	// Parameters:
	//  - Req
	Put(req *PutRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	Get(req *GetRequest) (r *GeneralResponse, err error)
	// Parameters:
	//  - Req
	Remove(req *RemoveRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	RemoveRange(req *RemoveRangeRequest) (r *ExecResponse, err error)
	// Parameters:
	//  - Req
	GetUUID(req *GetUUIDReq) (r *GetUUIDResp, err error)
}

type StorageServiceClient struct {
	Transport       thrift.Transport
	ProtocolFactory thrift.ProtocolFactory
	InputProtocol   thrift.Protocol
	OutputProtocol  thrift.Protocol
	SeqId           int32
}

func (client *StorageServiceClient) Close() error {
	return client.Transport.Close()
}

func NewStorageServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *StorageServiceClient {
	return &StorageServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewStorageServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *StorageServiceClient {
	return &StorageServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Req
func (p *StorageServiceClient) GetBound(req *GetNeighborsRequest) (r *QueryResponse, err error) {
	if err = p.sendGetBound(req); err != nil {
		return
	}
	return p.recvGetBound()
}

func (p *StorageServiceClient) sendGetBound(req *GetNeighborsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBound", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetBoundArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGetBound() (value *QueryResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBound" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getBound failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getBound failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBound failed: invalid message type")
		return
	}
	result := StorageServiceGetBoundResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) BoundStats(req *GetNeighborsRequest) (r *QueryStatsResponse, err error) {
	if err = p.sendBoundStats(req); err != nil {
		return
	}
	return p.recvBoundStats()
}

func (p *StorageServiceClient) sendBoundStats(req *GetNeighborsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("boundStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceBoundStatsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvBoundStats() (value *QueryStatsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "boundStats" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "boundStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "boundStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "boundStats failed: invalid message type")
		return
	}
	result := StorageServiceBoundStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) GetProps(req *VertexPropRequest) (r *QueryResponse, err error) {
	if err = p.sendGetProps(req); err != nil {
		return
	}
	return p.recvGetProps()
}

func (p *StorageServiceClient) sendGetProps(req *VertexPropRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetPropsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGetProps() (value *QueryResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getProps" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getProps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getProps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProps failed: invalid message type")
		return
	}
	result := StorageServiceGetPropsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) GetEdgeProps(req *EdgePropRequest) (r *EdgePropResponse, err error) {
	if err = p.sendGetEdgeProps(req); err != nil {
		return
	}
	return p.recvGetEdgeProps()
}

func (p *StorageServiceClient) sendGetEdgeProps(req *EdgePropRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getEdgeProps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetEdgePropsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGetEdgeProps() (value *EdgePropResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getEdgeProps" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdgeProps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdgeProps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdgeProps failed: invalid message type")
		return
	}
	result := StorageServiceGetEdgePropsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) AddVertices(req *AddVerticesRequest) (r *ExecResponse, err error) {
	if err = p.sendAddVertices(req); err != nil {
		return
	}
	return p.recvAddVertices()
}

func (p *StorageServiceClient) sendAddVertices(req *AddVerticesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addVertices", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddVerticesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvAddVertices() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addVertices" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addVertices failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addVertices failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addVertices failed: invalid message type")
		return
	}
	result := StorageServiceAddVerticesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) AddEdges(req *AddEdgesRequest) (r *ExecResponse, err error) {
	if err = p.sendAddEdges(req); err != nil {
		return
	}
	return p.recvAddEdges()
}

func (p *StorageServiceClient) sendAddEdges(req *AddEdgesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addEdges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddEdgesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvAddEdges() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addEdges" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addEdges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addEdges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addEdges failed: invalid message type")
		return
	}
	result := StorageServiceAddEdgesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) GetEdgeKeys(req *EdgeKeyRequest) (r *EdgeKeyResponse, err error) {
	if err = p.sendGetEdgeKeys(req); err != nil {
		return
	}
	return p.recvGetEdgeKeys()
}

func (p *StorageServiceClient) sendGetEdgeKeys(req *EdgeKeyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getEdgeKeys", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetEdgeKeysArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGetEdgeKeys() (value *EdgeKeyResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getEdgeKeys" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdgeKeys failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdgeKeys failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdgeKeys failed: invalid message type")
		return
	}
	result := StorageServiceGetEdgeKeysResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) DeleteEdges(req *DeleteEdgesRequest) (r *ExecResponse, err error) {
	if err = p.sendDeleteEdges(req); err != nil {
		return
	}
	return p.recvDeleteEdges()
}

func (p *StorageServiceClient) sendDeleteEdges(req *DeleteEdgesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteEdges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceDeleteEdgesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvDeleteEdges() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteEdges" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteEdges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteEdges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteEdges failed: invalid message type")
		return
	}
	result := StorageServiceDeleteEdgesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) DeleteVertex(req *DeleteVertexRequest) (r *ExecResponse, err error) {
	if err = p.sendDeleteVertex(req); err != nil {
		return
	}
	return p.recvDeleteVertex()
}

func (p *StorageServiceClient) sendDeleteVertex(req *DeleteVertexRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteVertex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceDeleteVertexArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvDeleteVertex() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteVertex" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteVertex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteVertex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteVertex failed: invalid message type")
		return
	}
	result := StorageServiceDeleteVertexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) UpdateVertex(req *UpdateVertexRequest) (r *UpdateResponse, err error) {
	if err = p.sendUpdateVertex(req); err != nil {
		return
	}
	return p.recvUpdateVertex()
}

func (p *StorageServiceClient) sendUpdateVertex(req *UpdateVertexRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateVertex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceUpdateVertexArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvUpdateVertex() (value *UpdateResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateVertex" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "updateVertex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "updateVertex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateVertex failed: invalid message type")
		return
	}
	result := StorageServiceUpdateVertexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) UpdateEdge(req *UpdateEdgeRequest) (r *UpdateResponse, err error) {
	if err = p.sendUpdateEdge(req); err != nil {
		return
	}
	return p.recvUpdateEdge()
}

func (p *StorageServiceClient) sendUpdateEdge(req *UpdateEdgeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateEdge", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceUpdateEdgeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvUpdateEdge() (value *UpdateResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateEdge" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "updateEdge failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "updateEdge failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateEdge failed: invalid message type")
		return
	}
	result := StorageServiceUpdateEdgeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) TransLeader(req *TransLeaderReq) (r *AdminExecResp, err error) {
	if err = p.sendTransLeader(req); err != nil {
		return
	}
	return p.recvTransLeader()
}

func (p *StorageServiceClient) sendTransLeader(req *TransLeaderReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("transLeader", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceTransLeaderArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvTransLeader() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "transLeader" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "transLeader failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "transLeader failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "transLeader failed: invalid message type")
		return
	}
	result := StorageServiceTransLeaderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) AddPart(req *AddPartReq) (r *AdminExecResp, err error) {
	if err = p.sendAddPart(req); err != nil {
		return
	}
	return p.recvAddPart()
}

func (p *StorageServiceClient) sendAddPart(req *AddPartReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addPart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddPartArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvAddPart() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addPart" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addPart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addPart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addPart failed: invalid message type")
		return
	}
	result := StorageServiceAddPartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) AddLearner(req *AddLearnerReq) (r *AdminExecResp, err error) {
	if err = p.sendAddLearner(req); err != nil {
		return
	}
	return p.recvAddLearner()
}

func (p *StorageServiceClient) sendAddLearner(req *AddLearnerReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addLearner", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddLearnerArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvAddLearner() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addLearner" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addLearner failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addLearner failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addLearner failed: invalid message type")
		return
	}
	result := StorageServiceAddLearnerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) WaitingForCatchUpData(req *CatchUpDataReq) (r *AdminExecResp, err error) {
	if err = p.sendWaitingForCatchUpData(req); err != nil {
		return
	}
	return p.recvWaitingForCatchUpData()
}

func (p *StorageServiceClient) sendWaitingForCatchUpData(req *CatchUpDataReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("waitingForCatchUpData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceWaitingForCatchUpDataArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvWaitingForCatchUpData() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "waitingForCatchUpData" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "waitingForCatchUpData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "waitingForCatchUpData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "waitingForCatchUpData failed: invalid message type")
		return
	}
	result := StorageServiceWaitingForCatchUpDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) RemovePart(req *RemovePartReq) (r *AdminExecResp, err error) {
	if err = p.sendRemovePart(req); err != nil {
		return
	}
	return p.recvRemovePart()
}

func (p *StorageServiceClient) sendRemovePart(req *RemovePartReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removePart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceRemovePartArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvRemovePart() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removePart" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removePart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removePart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removePart failed: invalid message type")
		return
	}
	result := StorageServiceRemovePartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) MemberChange(req *MemberChangeReq) (r *AdminExecResp, err error) {
	if err = p.sendMemberChange(req); err != nil {
		return
	}
	return p.recvMemberChange()
}

func (p *StorageServiceClient) sendMemberChange(req *MemberChangeReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("memberChange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceMemberChangeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvMemberChange() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "memberChange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "memberChange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "memberChange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "memberChange failed: invalid message type")
		return
	}
	result := StorageServiceMemberChangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) GetLeaderPart(req *GetLeaderReq) (r *GetLeaderResp, err error) {
	if err = p.sendGetLeaderPart(req); err != nil {
		return
	}
	return p.recvGetLeaderPart()
}

func (p *StorageServiceClient) sendGetLeaderPart(req *GetLeaderReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLeaderPart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetLeaderPartArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGetLeaderPart() (value *GetLeaderResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLeaderPart" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getLeaderPart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getLeaderPart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLeaderPart failed: invalid message type")
		return
	}
	result := StorageServiceGetLeaderPartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) Put(req *PutRequest) (r *ExecResponse, err error) {
	if err = p.sendPut(req); err != nil {
		return
	}
	return p.recvPut()
}

func (p *StorageServiceClient) sendPut(req *PutRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("put", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServicePutArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvPut() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "put" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "put failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "put failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "put failed: invalid message type")
		return
	}
	result := StorageServicePutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) Get(req *GetRequest) (r *GeneralResponse, err error) {
	if err = p.sendGet(req); err != nil {
		return
	}
	return p.recvGet()
}

func (p *StorageServiceClient) sendGet(req *GetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGet() (value *GeneralResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
		return
	}
	result := StorageServiceGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) Remove(req *RemoveRequest) (r *ExecResponse, err error) {
	if err = p.sendRemove(req); err != nil {
		return
	}
	return p.recvRemove()
}

func (p *StorageServiceClient) sendRemove(req *RemoveRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceRemoveArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvRemove() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remove" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
		return
	}
	result := StorageServiceRemoveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) RemoveRange(req *RemoveRangeRequest) (r *ExecResponse, err error) {
	if err = p.sendRemoveRange(req); err != nil {
		return
	}
	return p.recvRemoveRange()
}

func (p *StorageServiceClient) sendRemoveRange(req *RemoveRangeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeRange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceRemoveRangeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvRemoveRange() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeRange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeRange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeRange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeRange failed: invalid message type")
		return
	}
	result := StorageServiceRemoveRangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceClient) GetUUID(req *GetUUIDReq) (r *GetUUIDResp, err error) {
	if err = p.sendGetUUID(req); err != nil {
		return
	}
	return p.recvGetUUID()
}

func (p *StorageServiceClient) sendGetUUID(req *GetUUIDReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetUUIDArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceClient) recvGetUUID() (value *GetUUIDResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUUID" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUUID failed: invalid message type")
		return
	}
	result := StorageServiceGetUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type StorageServiceThreadsafeClient struct {
	Transport       thrift.Transport
	ProtocolFactory thrift.ProtocolFactory
	InputProtocol   thrift.Protocol
	OutputProtocol  thrift.Protocol
	SeqId           int32
	Mu              sync.Mutex
}

func NewStorageServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *StorageServiceThreadsafeClient {
	return &StorageServiceThreadsafeClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewStorageServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *StorageServiceThreadsafeClient {
	return &StorageServiceThreadsafeClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *StorageServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) GetBound(req *GetNeighborsRequest) (r *QueryResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGetBound(req); err != nil {
		return
	}
	return p.recvGetBound()
}

func (p *StorageServiceThreadsafeClient) sendGetBound(req *GetNeighborsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBound", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetBoundArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGetBound() (value *QueryResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBound" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getBound failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getBound failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBound failed: invalid message type")
		return
	}
	result := StorageServiceGetBoundResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) BoundStats(req *GetNeighborsRequest) (r *QueryStatsResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendBoundStats(req); err != nil {
		return
	}
	return p.recvBoundStats()
}

func (p *StorageServiceThreadsafeClient) sendBoundStats(req *GetNeighborsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("boundStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceBoundStatsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvBoundStats() (value *QueryStatsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "boundStats" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "boundStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "boundStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "boundStats failed: invalid message type")
		return
	}
	result := StorageServiceBoundStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) GetProps(req *VertexPropRequest) (r *QueryResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGetProps(req); err != nil {
		return
	}
	return p.recvGetProps()
}

func (p *StorageServiceThreadsafeClient) sendGetProps(req *VertexPropRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetPropsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGetProps() (value *QueryResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getProps" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getProps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getProps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProps failed: invalid message type")
		return
	}
	result := StorageServiceGetPropsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) GetEdgeProps(req *EdgePropRequest) (r *EdgePropResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGetEdgeProps(req); err != nil {
		return
	}
	return p.recvGetEdgeProps()
}

func (p *StorageServiceThreadsafeClient) sendGetEdgeProps(req *EdgePropRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getEdgeProps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetEdgePropsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGetEdgeProps() (value *EdgePropResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getEdgeProps" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdgeProps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdgeProps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdgeProps failed: invalid message type")
		return
	}
	result := StorageServiceGetEdgePropsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) AddVertices(req *AddVerticesRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendAddVertices(req); err != nil {
		return
	}
	return p.recvAddVertices()
}

func (p *StorageServiceThreadsafeClient) sendAddVertices(req *AddVerticesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addVertices", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddVerticesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvAddVertices() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addVertices" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addVertices failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addVertices failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addVertices failed: invalid message type")
		return
	}
	result := StorageServiceAddVerticesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) AddEdges(req *AddEdgesRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendAddEdges(req); err != nil {
		return
	}
	return p.recvAddEdges()
}

func (p *StorageServiceThreadsafeClient) sendAddEdges(req *AddEdgesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addEdges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddEdgesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvAddEdges() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addEdges" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addEdges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addEdges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addEdges failed: invalid message type")
		return
	}
	result := StorageServiceAddEdgesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) GetEdgeKeys(req *EdgeKeyRequest) (r *EdgeKeyResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGetEdgeKeys(req); err != nil {
		return
	}
	return p.recvGetEdgeKeys()
}

func (p *StorageServiceThreadsafeClient) sendGetEdgeKeys(req *EdgeKeyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getEdgeKeys", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetEdgeKeysArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGetEdgeKeys() (value *EdgeKeyResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getEdgeKeys" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdgeKeys failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdgeKeys failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdgeKeys failed: invalid message type")
		return
	}
	result := StorageServiceGetEdgeKeysResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) DeleteEdges(req *DeleteEdgesRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendDeleteEdges(req); err != nil {
		return
	}
	return p.recvDeleteEdges()
}

func (p *StorageServiceThreadsafeClient) sendDeleteEdges(req *DeleteEdgesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteEdges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceDeleteEdgesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvDeleteEdges() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteEdges" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteEdges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteEdges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteEdges failed: invalid message type")
		return
	}
	result := StorageServiceDeleteEdgesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) DeleteVertex(req *DeleteVertexRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendDeleteVertex(req); err != nil {
		return
	}
	return p.recvDeleteVertex()
}

func (p *StorageServiceThreadsafeClient) sendDeleteVertex(req *DeleteVertexRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteVertex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceDeleteVertexArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvDeleteVertex() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteVertex" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteVertex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteVertex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteVertex failed: invalid message type")
		return
	}
	result := StorageServiceDeleteVertexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) UpdateVertex(req *UpdateVertexRequest) (r *UpdateResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendUpdateVertex(req); err != nil {
		return
	}
	return p.recvUpdateVertex()
}

func (p *StorageServiceThreadsafeClient) sendUpdateVertex(req *UpdateVertexRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateVertex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceUpdateVertexArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvUpdateVertex() (value *UpdateResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateVertex" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "updateVertex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "updateVertex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateVertex failed: invalid message type")
		return
	}
	result := StorageServiceUpdateVertexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) UpdateEdge(req *UpdateEdgeRequest) (r *UpdateResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendUpdateEdge(req); err != nil {
		return
	}
	return p.recvUpdateEdge()
}

func (p *StorageServiceThreadsafeClient) sendUpdateEdge(req *UpdateEdgeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateEdge", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceUpdateEdgeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvUpdateEdge() (value *UpdateResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateEdge" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "updateEdge failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "updateEdge failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateEdge failed: invalid message type")
		return
	}
	result := StorageServiceUpdateEdgeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) TransLeader(req *TransLeaderReq) (r *AdminExecResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendTransLeader(req); err != nil {
		return
	}
	return p.recvTransLeader()
}

func (p *StorageServiceThreadsafeClient) sendTransLeader(req *TransLeaderReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("transLeader", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceTransLeaderArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvTransLeader() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "transLeader" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "transLeader failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "transLeader failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "transLeader failed: invalid message type")
		return
	}
	result := StorageServiceTransLeaderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) AddPart(req *AddPartReq) (r *AdminExecResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendAddPart(req); err != nil {
		return
	}
	return p.recvAddPart()
}

func (p *StorageServiceThreadsafeClient) sendAddPart(req *AddPartReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addPart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddPartArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvAddPart() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addPart" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addPart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addPart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addPart failed: invalid message type")
		return
	}
	result := StorageServiceAddPartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) AddLearner(req *AddLearnerReq) (r *AdminExecResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendAddLearner(req); err != nil {
		return
	}
	return p.recvAddLearner()
}

func (p *StorageServiceThreadsafeClient) sendAddLearner(req *AddLearnerReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addLearner", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceAddLearnerArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvAddLearner() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addLearner" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addLearner failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addLearner failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addLearner failed: invalid message type")
		return
	}
	result := StorageServiceAddLearnerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) WaitingForCatchUpData(req *CatchUpDataReq) (r *AdminExecResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendWaitingForCatchUpData(req); err != nil {
		return
	}
	return p.recvWaitingForCatchUpData()
}

func (p *StorageServiceThreadsafeClient) sendWaitingForCatchUpData(req *CatchUpDataReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("waitingForCatchUpData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceWaitingForCatchUpDataArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvWaitingForCatchUpData() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "waitingForCatchUpData" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "waitingForCatchUpData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "waitingForCatchUpData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "waitingForCatchUpData failed: invalid message type")
		return
	}
	result := StorageServiceWaitingForCatchUpDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) RemovePart(req *RemovePartReq) (r *AdminExecResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendRemovePart(req); err != nil {
		return
	}
	return p.recvRemovePart()
}

func (p *StorageServiceThreadsafeClient) sendRemovePart(req *RemovePartReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removePart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceRemovePartArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvRemovePart() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removePart" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removePart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removePart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removePart failed: invalid message type")
		return
	}
	result := StorageServiceRemovePartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) MemberChange(req *MemberChangeReq) (r *AdminExecResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendMemberChange(req); err != nil {
		return
	}
	return p.recvMemberChange()
}

func (p *StorageServiceThreadsafeClient) sendMemberChange(req *MemberChangeReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("memberChange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceMemberChangeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvMemberChange() (value *AdminExecResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "memberChange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "memberChange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "memberChange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "memberChange failed: invalid message type")
		return
	}
	result := StorageServiceMemberChangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) GetLeaderPart(req *GetLeaderReq) (r *GetLeaderResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGetLeaderPart(req); err != nil {
		return
	}
	return p.recvGetLeaderPart()
}

func (p *StorageServiceThreadsafeClient) sendGetLeaderPart(req *GetLeaderReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLeaderPart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetLeaderPartArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGetLeaderPart() (value *GetLeaderResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLeaderPart" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getLeaderPart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getLeaderPart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLeaderPart failed: invalid message type")
		return
	}
	result := StorageServiceGetLeaderPartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) Put(req *PutRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendPut(req); err != nil {
		return
	}
	return p.recvPut()
}

func (p *StorageServiceThreadsafeClient) sendPut(req *PutRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("put", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServicePutArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvPut() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "put" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "put failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "put failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "put failed: invalid message type")
		return
	}
	result := StorageServicePutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) Get(req *GetRequest) (r *GeneralResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGet(req); err != nil {
		return
	}
	return p.recvGet()
}

func (p *StorageServiceThreadsafeClient) sendGet(req *GetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGet() (value *GeneralResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
		return
	}
	result := StorageServiceGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) Remove(req *RemoveRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendRemove(req); err != nil {
		return
	}
	return p.recvRemove()
}

func (p *StorageServiceThreadsafeClient) sendRemove(req *RemoveRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceRemoveArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvRemove() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remove" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
		return
	}
	result := StorageServiceRemoveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) RemoveRange(req *RemoveRangeRequest) (r *ExecResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendRemoveRange(req); err != nil {
		return
	}
	return p.recvRemoveRange()
}

func (p *StorageServiceThreadsafeClient) sendRemoveRange(req *RemoveRangeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeRange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceRemoveRangeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvRemoveRange() (value *ExecResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeRange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeRange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeRange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeRange failed: invalid message type")
		return
	}
	result := StorageServiceRemoveRangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *StorageServiceThreadsafeClient) GetUUID(req *GetUUIDReq) (r *GetUUIDResp, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGetUUID(req); err != nil {
		return
	}
	return p.recvGetUUID()
}

func (p *StorageServiceThreadsafeClient) sendGetUUID(req *GetUUIDReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StorageServiceGetUUIDArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StorageServiceThreadsafeClient) recvGetUUID() (value *GetUUIDResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUUID" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUUID failed: invalid message type")
		return
	}
	result := StorageServiceGetUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type StorageServiceProcessor struct {
	processorMap map[string]thrift.ProcessorFunction
	handler      StorageService
}

func (p *StorageServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *StorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
	if processor, ok := p.processorMap[key]; ok {
		return processor, nil
	}
	return nil, nil // generic error message will be sent
}

func (p *StorageServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
	return p.processorMap
}

func NewStorageServiceProcessor(handler StorageService) *StorageServiceProcessor {
	self150 := &StorageServiceProcessor{handler: handler, processorMap: make(map[string]thrift.ProcessorFunction)}
	self150.processorMap["getBound"] = &storageServiceProcessorGetBound{handler: handler}
	self150.processorMap["boundStats"] = &storageServiceProcessorBoundStats{handler: handler}
	self150.processorMap["getProps"] = &storageServiceProcessorGetProps{handler: handler}
	self150.processorMap["getEdgeProps"] = &storageServiceProcessorGetEdgeProps{handler: handler}
	self150.processorMap["addVertices"] = &storageServiceProcessorAddVertices{handler: handler}
	self150.processorMap["addEdges"] = &storageServiceProcessorAddEdges{handler: handler}
	self150.processorMap["getEdgeKeys"] = &storageServiceProcessorGetEdgeKeys{handler: handler}
	self150.processorMap["deleteEdges"] = &storageServiceProcessorDeleteEdges{handler: handler}
	self150.processorMap["deleteVertex"] = &storageServiceProcessorDeleteVertex{handler: handler}
	self150.processorMap["updateVertex"] = &storageServiceProcessorUpdateVertex{handler: handler}
	self150.processorMap["updateEdge"] = &storageServiceProcessorUpdateEdge{handler: handler}
	self150.processorMap["transLeader"] = &storageServiceProcessorTransLeader{handler: handler}
	self150.processorMap["addPart"] = &storageServiceProcessorAddPart{handler: handler}
	self150.processorMap["addLearner"] = &storageServiceProcessorAddLearner{handler: handler}
	self150.processorMap["waitingForCatchUpData"] = &storageServiceProcessorWaitingForCatchUpData{handler: handler}
	self150.processorMap["removePart"] = &storageServiceProcessorRemovePart{handler: handler}
	self150.processorMap["memberChange"] = &storageServiceProcessorMemberChange{handler: handler}
	self150.processorMap["getLeaderPart"] = &storageServiceProcessorGetLeaderPart{handler: handler}
	self150.processorMap["put"] = &storageServiceProcessorPut{handler: handler}
	self150.processorMap["get"] = &storageServiceProcessorGet{handler: handler}
	self150.processorMap["remove"] = &storageServiceProcessorRemove{handler: handler}
	self150.processorMap["removeRange"] = &storageServiceProcessorRemoveRange{handler: handler}
	self150.processorMap["getUUID"] = &storageServiceProcessorGetUUID{handler: handler}
	return self150
}

type storageServiceProcessorGetBound struct {
	handler StorageService
}

func (p *storageServiceProcessorGetBound) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetBoundArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGetBound) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("getBound", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGetBound) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetBoundArgs)
	var result StorageServiceGetBoundResult
	if retval, err := p.handler.GetBound(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBound: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorBoundStats struct {
	handler StorageService
}

func (p *storageServiceProcessorBoundStats) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceBoundStatsArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorBoundStats) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("boundStats", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorBoundStats) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceBoundStatsArgs)
	var result StorageServiceBoundStatsResult
	if retval, err := p.handler.BoundStats(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing boundStats: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorGetProps struct {
	handler StorageService
}

func (p *storageServiceProcessorGetProps) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetPropsArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGetProps) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("getProps", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGetProps) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetPropsArgs)
	var result StorageServiceGetPropsResult
	if retval, err := p.handler.GetProps(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProps: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorGetEdgeProps struct {
	handler StorageService
}

func (p *storageServiceProcessorGetEdgeProps) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetEdgePropsArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGetEdgeProps) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("getEdgeProps", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGetEdgeProps) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetEdgePropsArgs)
	var result StorageServiceGetEdgePropsResult
	if retval, err := p.handler.GetEdgeProps(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdgeProps: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorAddVertices struct {
	handler StorageService
}

func (p *storageServiceProcessorAddVertices) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceAddVerticesArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorAddVertices) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("addVertices", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorAddVertices) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceAddVerticesArgs)
	var result StorageServiceAddVerticesResult
	if retval, err := p.handler.AddVertices(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addVertices: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorAddEdges struct {
	handler StorageService
}

func (p *storageServiceProcessorAddEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceAddEdgesArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorAddEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("addEdges", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorAddEdges) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceAddEdgesArgs)
	var result StorageServiceAddEdgesResult
	if retval, err := p.handler.AddEdges(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addEdges: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorGetEdgeKeys struct {
	handler StorageService
}

func (p *storageServiceProcessorGetEdgeKeys) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetEdgeKeysArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGetEdgeKeys) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("getEdgeKeys", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGetEdgeKeys) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetEdgeKeysArgs)
	var result StorageServiceGetEdgeKeysResult
	if retval, err := p.handler.GetEdgeKeys(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdgeKeys: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorDeleteEdges struct {
	handler StorageService
}

func (p *storageServiceProcessorDeleteEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceDeleteEdgesArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorDeleteEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("deleteEdges", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorDeleteEdges) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceDeleteEdgesArgs)
	var result StorageServiceDeleteEdgesResult
	if retval, err := p.handler.DeleteEdges(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteEdges: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorDeleteVertex struct {
	handler StorageService
}

func (p *storageServiceProcessorDeleteVertex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceDeleteVertexArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorDeleteVertex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("deleteVertex", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorDeleteVertex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceDeleteVertexArgs)
	var result StorageServiceDeleteVertexResult
	if retval, err := p.handler.DeleteVertex(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteVertex: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorUpdateVertex struct {
	handler StorageService
}

func (p *storageServiceProcessorUpdateVertex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceUpdateVertexArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorUpdateVertex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("updateVertex", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorUpdateVertex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceUpdateVertexArgs)
	var result StorageServiceUpdateVertexResult
	if retval, err := p.handler.UpdateVertex(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateVertex: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorUpdateEdge struct {
	handler StorageService
}

func (p *storageServiceProcessorUpdateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceUpdateEdgeArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorUpdateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("updateEdge", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorUpdateEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceUpdateEdgeArgs)
	var result StorageServiceUpdateEdgeResult
	if retval, err := p.handler.UpdateEdge(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateEdge: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorTransLeader struct {
	handler StorageService
}

func (p *storageServiceProcessorTransLeader) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceTransLeaderArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorTransLeader) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("transLeader", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorTransLeader) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceTransLeaderArgs)
	var result StorageServiceTransLeaderResult
	if retval, err := p.handler.TransLeader(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transLeader: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorAddPart struct {
	handler StorageService
}

func (p *storageServiceProcessorAddPart) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceAddPartArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorAddPart) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("addPart", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorAddPart) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceAddPartArgs)
	var result StorageServiceAddPartResult
	if retval, err := p.handler.AddPart(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addPart: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorAddLearner struct {
	handler StorageService
}

func (p *storageServiceProcessorAddLearner) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceAddLearnerArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorAddLearner) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("addLearner", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorAddLearner) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceAddLearnerArgs)
	var result StorageServiceAddLearnerResult
	if retval, err := p.handler.AddLearner(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addLearner: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorWaitingForCatchUpData struct {
	handler StorageService
}

func (p *storageServiceProcessorWaitingForCatchUpData) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceWaitingForCatchUpDataArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorWaitingForCatchUpData) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("waitingForCatchUpData", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorWaitingForCatchUpData) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceWaitingForCatchUpDataArgs)
	var result StorageServiceWaitingForCatchUpDataResult
	if retval, err := p.handler.WaitingForCatchUpData(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing waitingForCatchUpData: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorRemovePart struct {
	handler StorageService
}

func (p *storageServiceProcessorRemovePart) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceRemovePartArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorRemovePart) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("removePart", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorRemovePart) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceRemovePartArgs)
	var result StorageServiceRemovePartResult
	if retval, err := p.handler.RemovePart(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removePart: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorMemberChange struct {
	handler StorageService
}

func (p *storageServiceProcessorMemberChange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceMemberChangeArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorMemberChange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("memberChange", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorMemberChange) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceMemberChangeArgs)
	var result StorageServiceMemberChangeResult
	if retval, err := p.handler.MemberChange(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing memberChange: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorGetLeaderPart struct {
	handler StorageService
}

func (p *storageServiceProcessorGetLeaderPart) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetLeaderPartArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGetLeaderPart) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("getLeaderPart", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGetLeaderPart) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetLeaderPartArgs)
	var result StorageServiceGetLeaderPartResult
	if retval, err := p.handler.GetLeaderPart(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLeaderPart: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorPut struct {
	handler StorageService
}

func (p *storageServiceProcessorPut) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServicePutArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorPut) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("put", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorPut) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServicePutArgs)
	var result StorageServicePutResult
	if retval, err := p.handler.Put(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorGet struct {
	handler StorageService
}

func (p *storageServiceProcessorGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("get", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetArgs)
	var result StorageServiceGetResult
	if retval, err := p.handler.Get(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorRemove struct {
	handler StorageService
}

func (p *storageServiceProcessorRemove) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceRemoveArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorRemove) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("remove", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorRemove) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceRemoveArgs)
	var result StorageServiceRemoveResult
	if retval, err := p.handler.Remove(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorRemoveRange struct {
	handler StorageService
}

func (p *storageServiceProcessorRemoveRange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceRemoveRangeArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorRemoveRange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("removeRange", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorRemoveRange) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceRemoveRangeArgs)
	var result StorageServiceRemoveRangeResult
	if retval, err := p.handler.RemoveRange(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRange: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type storageServiceProcessorGetUUID struct {
	handler StorageService
}

func (p *storageServiceProcessorGetUUID) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := StorageServiceGetUUIDArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *storageServiceProcessorGetUUID) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch result.(type) {
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("getUUID", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *storageServiceProcessorGetUUID) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*StorageServiceGetUUIDArgs)
	var result StorageServiceGetUUIDResult
	if retval, err := p.handler.GetUUID(args.Req); err != nil {
		switch err.(type) {
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUUID: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type StorageServiceGetBoundArgs struct {
	Req *GetNeighborsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetBoundArgs() *StorageServiceGetBoundArgs {
	return &StorageServiceGetBoundArgs{}
}

var StorageServiceGetBoundArgs_Req_DEFAULT *GetNeighborsRequest

func (p *StorageServiceGetBoundArgs) GetReq() *GetNeighborsRequest {
	if !p.IsSetReq() {
		return StorageServiceGetBoundArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetBoundArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetBoundArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetBoundArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewGetNeighborsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetBoundArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getBound_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetBoundArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetBoundArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetBoundArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetBoundResult struct {
	Success *QueryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetBoundResult() *StorageServiceGetBoundResult {
	return &StorageServiceGetBoundResult{}
}

var StorageServiceGetBoundResult_Success_DEFAULT *QueryResponse

func (p *StorageServiceGetBoundResult) GetSuccess() *QueryResponse {
	if !p.IsSetSuccess() {
		return StorageServiceGetBoundResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetBoundResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetBoundResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetBoundResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewQueryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetBoundResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getBound_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetBoundResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetBoundResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetBoundResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceBoundStatsArgs struct {
	Req *GetNeighborsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceBoundStatsArgs() *StorageServiceBoundStatsArgs {
	return &StorageServiceBoundStatsArgs{}
}

var StorageServiceBoundStatsArgs_Req_DEFAULT *GetNeighborsRequest

func (p *StorageServiceBoundStatsArgs) GetReq() *GetNeighborsRequest {
	if !p.IsSetReq() {
		return StorageServiceBoundStatsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceBoundStatsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceBoundStatsArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceBoundStatsArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewGetNeighborsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceBoundStatsArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("boundStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceBoundStatsArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceBoundStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceBoundStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceBoundStatsResult struct {
	Success *QueryStatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceBoundStatsResult() *StorageServiceBoundStatsResult {
	return &StorageServiceBoundStatsResult{}
}

var StorageServiceBoundStatsResult_Success_DEFAULT *QueryStatsResponse

func (p *StorageServiceBoundStatsResult) GetSuccess() *QueryStatsResponse {
	if !p.IsSetSuccess() {
		return StorageServiceBoundStatsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceBoundStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceBoundStatsResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceBoundStatsResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewQueryStatsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceBoundStatsResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("boundStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceBoundStatsResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceBoundStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceBoundStatsResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceGetPropsArgs struct {
	Req *VertexPropRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetPropsArgs() *StorageServiceGetPropsArgs {
	return &StorageServiceGetPropsArgs{}
}

var StorageServiceGetPropsArgs_Req_DEFAULT *VertexPropRequest

func (p *StorageServiceGetPropsArgs) GetReq() *VertexPropRequest {
	if !p.IsSetReq() {
		return StorageServiceGetPropsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetPropsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetPropsArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetPropsArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewVertexPropRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetPropsArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getProps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetPropsArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetPropsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetPropsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetPropsResult struct {
	Success *QueryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetPropsResult() *StorageServiceGetPropsResult {
	return &StorageServiceGetPropsResult{}
}

var StorageServiceGetPropsResult_Success_DEFAULT *QueryResponse

func (p *StorageServiceGetPropsResult) GetSuccess() *QueryResponse {
	if !p.IsSetSuccess() {
		return StorageServiceGetPropsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetPropsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetPropsResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetPropsResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewQueryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetPropsResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getProps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetPropsResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetPropsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetPropsResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceGetEdgePropsArgs struct {
	Req *EdgePropRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetEdgePropsArgs() *StorageServiceGetEdgePropsArgs {
	return &StorageServiceGetEdgePropsArgs{}
}

var StorageServiceGetEdgePropsArgs_Req_DEFAULT *EdgePropRequest

func (p *StorageServiceGetEdgePropsArgs) GetReq() *EdgePropRequest {
	if !p.IsSetReq() {
		return StorageServiceGetEdgePropsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetEdgePropsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetEdgePropsArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetEdgePropsArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewEdgePropRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetEdgePropsArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getEdgeProps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetEdgePropsArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetEdgePropsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetEdgePropsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetEdgePropsResult struct {
	Success *EdgePropResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetEdgePropsResult() *StorageServiceGetEdgePropsResult {
	return &StorageServiceGetEdgePropsResult{}
}

var StorageServiceGetEdgePropsResult_Success_DEFAULT *EdgePropResponse

func (p *StorageServiceGetEdgePropsResult) GetSuccess() *EdgePropResponse {
	if !p.IsSetSuccess() {
		return StorageServiceGetEdgePropsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetEdgePropsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetEdgePropsResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetEdgePropsResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewEdgePropResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetEdgePropsResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getEdgeProps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetEdgePropsResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetEdgePropsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetEdgePropsResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceAddVerticesArgs struct {
	Req *AddVerticesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceAddVerticesArgs() *StorageServiceAddVerticesArgs {
	return &StorageServiceAddVerticesArgs{}
}

var StorageServiceAddVerticesArgs_Req_DEFAULT *AddVerticesRequest

func (p *StorageServiceAddVerticesArgs) GetReq() *AddVerticesRequest {
	if !p.IsSetReq() {
		return StorageServiceAddVerticesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceAddVerticesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceAddVerticesArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddVerticesArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewAddVerticesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceAddVerticesArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addVertices_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddVerticesArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceAddVerticesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddVerticesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceAddVerticesResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceAddVerticesResult() *StorageServiceAddVerticesResult {
	return &StorageServiceAddVerticesResult{}
}

var StorageServiceAddVerticesResult_Success_DEFAULT *ExecResponse

func (p *StorageServiceAddVerticesResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServiceAddVerticesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceAddVerticesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceAddVerticesResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddVerticesResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceAddVerticesResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addVertices_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddVerticesResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceAddVerticesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddVerticesResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceAddEdgesArgs struct {
	Req *AddEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceAddEdgesArgs() *StorageServiceAddEdgesArgs {
	return &StorageServiceAddEdgesArgs{}
}

var StorageServiceAddEdgesArgs_Req_DEFAULT *AddEdgesRequest

func (p *StorageServiceAddEdgesArgs) GetReq() *AddEdgesRequest {
	if !p.IsSetReq() {
		return StorageServiceAddEdgesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceAddEdgesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceAddEdgesArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddEdgesArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewAddEdgesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceAddEdgesArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addEdges_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceAddEdgesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceAddEdgesResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceAddEdgesResult() *StorageServiceAddEdgesResult {
	return &StorageServiceAddEdgesResult{}
}

var StorageServiceAddEdgesResult_Success_DEFAULT *ExecResponse

func (p *StorageServiceAddEdgesResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServiceAddEdgesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceAddEdgesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceAddEdgesResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddEdgesResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceAddEdgesResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addEdges_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceAddEdgesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceGetEdgeKeysArgs struct {
	Req *EdgeKeyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetEdgeKeysArgs() *StorageServiceGetEdgeKeysArgs {
	return &StorageServiceGetEdgeKeysArgs{}
}

var StorageServiceGetEdgeKeysArgs_Req_DEFAULT *EdgeKeyRequest

func (p *StorageServiceGetEdgeKeysArgs) GetReq() *EdgeKeyRequest {
	if !p.IsSetReq() {
		return StorageServiceGetEdgeKeysArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetEdgeKeysArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetEdgeKeysArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetEdgeKeysArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewEdgeKeyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetEdgeKeysArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getEdgeKeys_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetEdgeKeysArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetEdgeKeysArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetEdgeKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetEdgeKeysResult struct {
	Success *EdgeKeyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetEdgeKeysResult() *StorageServiceGetEdgeKeysResult {
	return &StorageServiceGetEdgeKeysResult{}
}

var StorageServiceGetEdgeKeysResult_Success_DEFAULT *EdgeKeyResponse

func (p *StorageServiceGetEdgeKeysResult) GetSuccess() *EdgeKeyResponse {
	if !p.IsSetSuccess() {
		return StorageServiceGetEdgeKeysResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetEdgeKeysResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetEdgeKeysResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetEdgeKeysResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewEdgeKeyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetEdgeKeysResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getEdgeKeys_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetEdgeKeysResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetEdgeKeysResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetEdgeKeysResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceDeleteEdgesArgs struct {
	Req *DeleteEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceDeleteEdgesArgs() *StorageServiceDeleteEdgesArgs {
	return &StorageServiceDeleteEdgesArgs{}
}

var StorageServiceDeleteEdgesArgs_Req_DEFAULT *DeleteEdgesRequest

func (p *StorageServiceDeleteEdgesArgs) GetReq() *DeleteEdgesRequest {
	if !p.IsSetReq() {
		return StorageServiceDeleteEdgesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceDeleteEdgesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceDeleteEdgesArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceDeleteEdgesArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewDeleteEdgesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceDeleteEdgesArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("deleteEdges_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceDeleteEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceDeleteEdgesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceDeleteEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceDeleteEdgesResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceDeleteEdgesResult() *StorageServiceDeleteEdgesResult {
	return &StorageServiceDeleteEdgesResult{}
}

var StorageServiceDeleteEdgesResult_Success_DEFAULT *ExecResponse

func (p *StorageServiceDeleteEdgesResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServiceDeleteEdgesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceDeleteEdgesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceDeleteEdgesResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceDeleteEdgesResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceDeleteEdgesResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("deleteEdges_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceDeleteEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceDeleteEdgesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceDeleteEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceDeleteVertexArgs struct {
	Req *DeleteVertexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceDeleteVertexArgs() *StorageServiceDeleteVertexArgs {
	return &StorageServiceDeleteVertexArgs{}
}

var StorageServiceDeleteVertexArgs_Req_DEFAULT *DeleteVertexRequest

func (p *StorageServiceDeleteVertexArgs) GetReq() *DeleteVertexRequest {
	if !p.IsSetReq() {
		return StorageServiceDeleteVertexArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceDeleteVertexArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceDeleteVertexArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceDeleteVertexArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewDeleteVertexRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceDeleteVertexArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("deleteVertex_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceDeleteVertexArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceDeleteVertexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceDeleteVertexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceDeleteVertexResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceDeleteVertexResult() *StorageServiceDeleteVertexResult {
	return &StorageServiceDeleteVertexResult{}
}

var StorageServiceDeleteVertexResult_Success_DEFAULT *ExecResponse

func (p *StorageServiceDeleteVertexResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServiceDeleteVertexResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceDeleteVertexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceDeleteVertexResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceDeleteVertexResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceDeleteVertexResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("deleteVertex_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceDeleteVertexResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceDeleteVertexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceDeleteVertexResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceUpdateVertexArgs struct {
	Req *UpdateVertexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceUpdateVertexArgs() *StorageServiceUpdateVertexArgs {
	return &StorageServiceUpdateVertexArgs{}
}

var StorageServiceUpdateVertexArgs_Req_DEFAULT *UpdateVertexRequest

func (p *StorageServiceUpdateVertexArgs) GetReq() *UpdateVertexRequest {
	if !p.IsSetReq() {
		return StorageServiceUpdateVertexArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceUpdateVertexArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceUpdateVertexArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceUpdateVertexArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewUpdateVertexRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceUpdateVertexArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("updateVertex_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceUpdateVertexArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceUpdateVertexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceUpdateVertexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceUpdateVertexResult struct {
	Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceUpdateVertexResult() *StorageServiceUpdateVertexResult {
	return &StorageServiceUpdateVertexResult{}
}

var StorageServiceUpdateVertexResult_Success_DEFAULT *UpdateResponse

func (p *StorageServiceUpdateVertexResult) GetSuccess() *UpdateResponse {
	if !p.IsSetSuccess() {
		return StorageServiceUpdateVertexResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceUpdateVertexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceUpdateVertexResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceUpdateVertexResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewUpdateResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceUpdateVertexResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("updateVertex_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceUpdateVertexResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceUpdateVertexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceUpdateVertexResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceUpdateEdgeArgs struct {
	Req *UpdateEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceUpdateEdgeArgs() *StorageServiceUpdateEdgeArgs {
	return &StorageServiceUpdateEdgeArgs{}
}

var StorageServiceUpdateEdgeArgs_Req_DEFAULT *UpdateEdgeRequest

func (p *StorageServiceUpdateEdgeArgs) GetReq() *UpdateEdgeRequest {
	if !p.IsSetReq() {
		return StorageServiceUpdateEdgeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceUpdateEdgeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceUpdateEdgeArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceUpdateEdgeArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewUpdateEdgeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceUpdateEdgeArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("updateEdge_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceUpdateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceUpdateEdgeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceUpdateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceUpdateEdgeResult struct {
	Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceUpdateEdgeResult() *StorageServiceUpdateEdgeResult {
	return &StorageServiceUpdateEdgeResult{}
}

var StorageServiceUpdateEdgeResult_Success_DEFAULT *UpdateResponse

func (p *StorageServiceUpdateEdgeResult) GetSuccess() *UpdateResponse {
	if !p.IsSetSuccess() {
		return StorageServiceUpdateEdgeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceUpdateEdgeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceUpdateEdgeResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceUpdateEdgeResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewUpdateResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceUpdateEdgeResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("updateEdge_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceUpdateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceUpdateEdgeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceUpdateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceTransLeaderArgs struct {
	Req *TransLeaderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceTransLeaderArgs() *StorageServiceTransLeaderArgs {
	return &StorageServiceTransLeaderArgs{}
}

var StorageServiceTransLeaderArgs_Req_DEFAULT *TransLeaderReq

func (p *StorageServiceTransLeaderArgs) GetReq() *TransLeaderReq {
	if !p.IsSetReq() {
		return StorageServiceTransLeaderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceTransLeaderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceTransLeaderArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceTransLeaderArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewTransLeaderReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceTransLeaderArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("transLeader_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceTransLeaderArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceTransLeaderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceTransLeaderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceTransLeaderResult struct {
	Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceTransLeaderResult() *StorageServiceTransLeaderResult {
	return &StorageServiceTransLeaderResult{}
}

var StorageServiceTransLeaderResult_Success_DEFAULT *AdminExecResp

func (p *StorageServiceTransLeaderResult) GetSuccess() *AdminExecResp {
	if !p.IsSetSuccess() {
		return StorageServiceTransLeaderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceTransLeaderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceTransLeaderResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceTransLeaderResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewAdminExecResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceTransLeaderResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("transLeader_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceTransLeaderResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceTransLeaderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceTransLeaderResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceAddPartArgs struct {
	Req *AddPartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceAddPartArgs() *StorageServiceAddPartArgs {
	return &StorageServiceAddPartArgs{}
}

var StorageServiceAddPartArgs_Req_DEFAULT *AddPartReq

func (p *StorageServiceAddPartArgs) GetReq() *AddPartReq {
	if !p.IsSetReq() {
		return StorageServiceAddPartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceAddPartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceAddPartArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddPartArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewAddPartReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceAddPartArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addPart_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddPartArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceAddPartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddPartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceAddPartResult struct {
	Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceAddPartResult() *StorageServiceAddPartResult {
	return &StorageServiceAddPartResult{}
}

var StorageServiceAddPartResult_Success_DEFAULT *AdminExecResp

func (p *StorageServiceAddPartResult) GetSuccess() *AdminExecResp {
	if !p.IsSetSuccess() {
		return StorageServiceAddPartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceAddPartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceAddPartResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddPartResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewAdminExecResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceAddPartResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addPart_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddPartResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceAddPartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddPartResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceAddLearnerArgs struct {
	Req *AddLearnerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceAddLearnerArgs() *StorageServiceAddLearnerArgs {
	return &StorageServiceAddLearnerArgs{}
}

var StorageServiceAddLearnerArgs_Req_DEFAULT *AddLearnerReq

func (p *StorageServiceAddLearnerArgs) GetReq() *AddLearnerReq {
	if !p.IsSetReq() {
		return StorageServiceAddLearnerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceAddLearnerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceAddLearnerArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddLearnerArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewAddLearnerReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceAddLearnerArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addLearner_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddLearnerArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceAddLearnerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddLearnerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceAddLearnerResult struct {
	Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceAddLearnerResult() *StorageServiceAddLearnerResult {
	return &StorageServiceAddLearnerResult{}
}

var StorageServiceAddLearnerResult_Success_DEFAULT *AdminExecResp

func (p *StorageServiceAddLearnerResult) GetSuccess() *AdminExecResp {
	if !p.IsSetSuccess() {
		return StorageServiceAddLearnerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceAddLearnerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceAddLearnerResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceAddLearnerResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewAdminExecResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceAddLearnerResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("addLearner_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceAddLearnerResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceAddLearnerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceAddLearnerResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceWaitingForCatchUpDataArgs struct {
	Req *CatchUpDataReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceWaitingForCatchUpDataArgs() *StorageServiceWaitingForCatchUpDataArgs {
	return &StorageServiceWaitingForCatchUpDataArgs{}
}

var StorageServiceWaitingForCatchUpDataArgs_Req_DEFAULT *CatchUpDataReq

func (p *StorageServiceWaitingForCatchUpDataArgs) GetReq() *CatchUpDataReq {
	if !p.IsSetReq() {
		return StorageServiceWaitingForCatchUpDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceWaitingForCatchUpDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceWaitingForCatchUpDataArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceWaitingForCatchUpDataArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewCatchUpDataReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceWaitingForCatchUpDataArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("waitingForCatchUpData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceWaitingForCatchUpDataArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceWaitingForCatchUpDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceWaitingForCatchUpDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceWaitingForCatchUpDataResult struct {
	Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceWaitingForCatchUpDataResult() *StorageServiceWaitingForCatchUpDataResult {
	return &StorageServiceWaitingForCatchUpDataResult{}
}

var StorageServiceWaitingForCatchUpDataResult_Success_DEFAULT *AdminExecResp

func (p *StorageServiceWaitingForCatchUpDataResult) GetSuccess() *AdminExecResp {
	if !p.IsSetSuccess() {
		return StorageServiceWaitingForCatchUpDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceWaitingForCatchUpDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceWaitingForCatchUpDataResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceWaitingForCatchUpDataResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewAdminExecResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceWaitingForCatchUpDataResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("waitingForCatchUpData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceWaitingForCatchUpDataResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceWaitingForCatchUpDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceWaitingForCatchUpDataResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceRemovePartArgs struct {
	Req *RemovePartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceRemovePartArgs() *StorageServiceRemovePartArgs {
	return &StorageServiceRemovePartArgs{}
}

var StorageServiceRemovePartArgs_Req_DEFAULT *RemovePartReq

func (p *StorageServiceRemovePartArgs) GetReq() *RemovePartReq {
	if !p.IsSetReq() {
		return StorageServiceRemovePartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceRemovePartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceRemovePartArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceRemovePartArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewRemovePartReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceRemovePartArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("removePart_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceRemovePartArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceRemovePartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceRemovePartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceRemovePartResult struct {
	Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceRemovePartResult() *StorageServiceRemovePartResult {
	return &StorageServiceRemovePartResult{}
}

var StorageServiceRemovePartResult_Success_DEFAULT *AdminExecResp

func (p *StorageServiceRemovePartResult) GetSuccess() *AdminExecResp {
	if !p.IsSetSuccess() {
		return StorageServiceRemovePartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceRemovePartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceRemovePartResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceRemovePartResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewAdminExecResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceRemovePartResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("removePart_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceRemovePartResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceRemovePartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceRemovePartResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceMemberChangeArgs struct {
	Req *MemberChangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceMemberChangeArgs() *StorageServiceMemberChangeArgs {
	return &StorageServiceMemberChangeArgs{}
}

var StorageServiceMemberChangeArgs_Req_DEFAULT *MemberChangeReq

func (p *StorageServiceMemberChangeArgs) GetReq() *MemberChangeReq {
	if !p.IsSetReq() {
		return StorageServiceMemberChangeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceMemberChangeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceMemberChangeArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceMemberChangeArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewMemberChangeReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceMemberChangeArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("memberChange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceMemberChangeArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceMemberChangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceMemberChangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceMemberChangeResult struct {
	Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceMemberChangeResult() *StorageServiceMemberChangeResult {
	return &StorageServiceMemberChangeResult{}
}

var StorageServiceMemberChangeResult_Success_DEFAULT *AdminExecResp

func (p *StorageServiceMemberChangeResult) GetSuccess() *AdminExecResp {
	if !p.IsSetSuccess() {
		return StorageServiceMemberChangeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceMemberChangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceMemberChangeResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceMemberChangeResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewAdminExecResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceMemberChangeResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("memberChange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceMemberChangeResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceMemberChangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceMemberChangeResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceGetLeaderPartArgs struct {
	Req *GetLeaderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetLeaderPartArgs() *StorageServiceGetLeaderPartArgs {
	return &StorageServiceGetLeaderPartArgs{}
}

var StorageServiceGetLeaderPartArgs_Req_DEFAULT *GetLeaderReq

func (p *StorageServiceGetLeaderPartArgs) GetReq() *GetLeaderReq {
	if !p.IsSetReq() {
		return StorageServiceGetLeaderPartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetLeaderPartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetLeaderPartArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetLeaderPartArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewGetLeaderReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetLeaderPartArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getLeaderPart_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetLeaderPartArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetLeaderPartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetLeaderPartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetLeaderPartResult struct {
	Success *GetLeaderResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetLeaderPartResult() *StorageServiceGetLeaderPartResult {
	return &StorageServiceGetLeaderPartResult{}
}

var StorageServiceGetLeaderPartResult_Success_DEFAULT *GetLeaderResp

func (p *StorageServiceGetLeaderPartResult) GetSuccess() *GetLeaderResp {
	if !p.IsSetSuccess() {
		return StorageServiceGetLeaderPartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetLeaderPartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetLeaderPartResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetLeaderPartResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewGetLeaderResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetLeaderPartResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getLeaderPart_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetLeaderPartResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetLeaderPartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetLeaderPartResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServicePutArgs struct {
	Req *PutRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServicePutArgs() *StorageServicePutArgs {
	return &StorageServicePutArgs{}
}

var StorageServicePutArgs_Req_DEFAULT *PutRequest

func (p *StorageServicePutArgs) GetReq() *PutRequest {
	if !p.IsSetReq() {
		return StorageServicePutArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServicePutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServicePutArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServicePutArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewPutRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServicePutArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("put_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServicePutArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServicePutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServicePutResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServicePutResult() *StorageServicePutResult {
	return &StorageServicePutResult{}
}

var StorageServicePutResult_Success_DEFAULT *ExecResponse

func (p *StorageServicePutResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServicePutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServicePutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServicePutResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServicePutResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServicePutResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("put_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServicePutResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServicePutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServicePutResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceGetArgs struct {
	Req *GetRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetArgs() *StorageServiceGetArgs {
	return &StorageServiceGetArgs{}
}

var StorageServiceGetArgs_Req_DEFAULT *GetRequest

func (p *StorageServiceGetArgs) GetReq() *GetRequest {
	if !p.IsSetReq() {
		return StorageServiceGetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("get_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetResult struct {
	Success *GeneralResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetResult() *StorageServiceGetResult {
	return &StorageServiceGetResult{}
}

var StorageServiceGetResult_Success_DEFAULT *GeneralResponse

func (p *StorageServiceGetResult) GetSuccess() *GeneralResponse {
	if !p.IsSetSuccess() {
		return StorageServiceGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewGeneralResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("get_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceRemoveArgs struct {
	Req *RemoveRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceRemoveArgs() *StorageServiceRemoveArgs {
	return &StorageServiceRemoveArgs{}
}

var StorageServiceRemoveArgs_Req_DEFAULT *RemoveRequest

func (p *StorageServiceRemoveArgs) GetReq() *RemoveRequest {
	if !p.IsSetReq() {
		return StorageServiceRemoveArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceRemoveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceRemoveArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceRemoveArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewRemoveRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceRemoveArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("remove_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceRemoveArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceRemoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceRemoveResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceRemoveResult() *StorageServiceRemoveResult {
	return &StorageServiceRemoveResult{}
}

var StorageServiceRemoveResult_Success_DEFAULT *ExecResponse

func (p *StorageServiceRemoveResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServiceRemoveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceRemoveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceRemoveResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceRemoveResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceRemoveResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("remove_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceRemoveResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceRemoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceRemoveResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceRemoveRangeArgs struct {
	Req *RemoveRangeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceRemoveRangeArgs() *StorageServiceRemoveRangeArgs {
	return &StorageServiceRemoveRangeArgs{}
}

var StorageServiceRemoveRangeArgs_Req_DEFAULT *RemoveRangeRequest

func (p *StorageServiceRemoveRangeArgs) GetReq() *RemoveRangeRequest {
	if !p.IsSetReq() {
		return StorageServiceRemoveRangeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceRemoveRangeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceRemoveRangeArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceRemoveRangeArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewRemoveRangeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceRemoveRangeArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("removeRange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceRemoveRangeArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceRemoveRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceRemoveRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceRemoveRangeResult struct {
	Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceRemoveRangeResult() *StorageServiceRemoveRangeResult {
	return &StorageServiceRemoveRangeResult{}
}

var StorageServiceRemoveRangeResult_Success_DEFAULT *ExecResponse

func (p *StorageServiceRemoveRangeResult) GetSuccess() *ExecResponse {
	if !p.IsSetSuccess() {
		return StorageServiceRemoveRangeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceRemoveRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceRemoveRangeResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceRemoveRangeResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewExecResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceRemoveRangeResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("removeRange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceRemoveRangeResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceRemoveRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceRemoveRangeResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageServiceGetUUIDArgs struct {
	Req *GetUUIDReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceGetUUIDArgs() *StorageServiceGetUUIDArgs {
	return &StorageServiceGetUUIDArgs{}
}

var StorageServiceGetUUIDArgs_Req_DEFAULT *GetUUIDReq

func (p *StorageServiceGetUUIDArgs) GetReq() *GetUUIDReq {
	if !p.IsSetReq() {
		return StorageServiceGetUUIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StorageServiceGetUUIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StorageServiceGetUUIDArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetUUIDArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewGetUUIDReq()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *StorageServiceGetUUIDArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetUUIDArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *StorageServiceGetUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageServiceGetUUIDResult struct {
	Success *GetUUIDResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceGetUUIDResult() *StorageServiceGetUUIDResult {
	return &StorageServiceGetUUIDResult{}
}

var StorageServiceGetUUIDResult_Success_DEFAULT *GetUUIDResp

func (p *StorageServiceGetUUIDResult) GetSuccess() *GetUUIDResp {
	if !p.IsSetSuccess() {
		return StorageServiceGetUUIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StorageServiceGetUUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StorageServiceGetUUIDResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StorageServiceGetUUIDResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewGetUUIDResp()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StorageServiceGetUUIDResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("getUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageServiceGetUUIDResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StorageServiceGetUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageServiceGetUUIDResult(%+v)", *p)
}
